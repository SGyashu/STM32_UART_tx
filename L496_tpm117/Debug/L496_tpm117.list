
L496_tpm117.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d698  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  0800d848  0800d848  0001d848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc0c  0800dc0c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc0c  0800dc0c  0001dc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc14  0800dc14  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc18  0800dc18  0001dc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800dc1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b48  20000204  0800de20  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d4c  0800de20  00020d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cce8  00000000  00000000  00020277  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004637  00000000  00000000  0003cf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  00041598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108a  00000000  00000000  00042b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d063  00000000  00000000  00043bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dd88  00000000  00000000  00070c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100171  00000000  00000000  0008e9c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006864  00000000  00000000  0018eb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0019539c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d830 	.word	0x0800d830

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	0800d830 	.word	0x0800d830

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b970 	b.w	8000ec0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9e08      	ldr	r6, [sp, #32]
 8000bfe:	460d      	mov	r5, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	460f      	mov	r7, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	d965      	bls.n	8000cda <__udivmoddi4+0xe2>
 8000c0e:	fab2 f382 	clz	r3, r2
 8000c12:	b143      	cbz	r3, 8000c26 <__udivmoddi4+0x2e>
 8000c14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c18:	f1c3 0220 	rsb	r2, r3, #32
 8000c1c:	409f      	lsls	r7, r3
 8000c1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c22:	4317      	orrs	r7, r2
 8000c24:	409c      	lsls	r4, r3
 8000c26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c2a:	fa1f f58c 	uxth.w	r5, ip
 8000c2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c32:	0c22      	lsrs	r2, r4, #16
 8000c34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c3c:	fb01 f005 	mul.w	r0, r1, r5
 8000c40:	4290      	cmp	r0, r2
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c44:	eb1c 0202 	adds.w	r2, ip, r2
 8000c48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c4c:	f080 811c 	bcs.w	8000e88 <__udivmoddi4+0x290>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f240 8119 	bls.w	8000e88 <__udivmoddi4+0x290>
 8000c56:	3902      	subs	r1, #2
 8000c58:	4462      	add	r2, ip
 8000c5a:	1a12      	subs	r2, r2, r0
 8000c5c:	b2a4      	uxth	r4, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c6a:	fb00 f505 	mul.w	r5, r0, r5
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x90>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x294>
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x294>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11e      	cbz	r6, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40dc      	lsrs	r4, r3
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0xbc>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f000 80ed 	beq.w	8000e82 <__udivmoddi4+0x28a>
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cae:	4608      	mov	r0, r1
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	fab3 f183 	clz	r1, r3
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	d149      	bne.n	8000d50 <__udivmoddi4+0x158>
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	d302      	bcc.n	8000cc6 <__udivmoddi4+0xce>
 8000cc0:	4282      	cmp	r2, r0
 8000cc2:	f200 80f8 	bhi.w	8000eb6 <__udivmoddi4+0x2be>
 8000cc6:	1a84      	subs	r4, r0, r2
 8000cc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ccc:	2001      	movs	r0, #1
 8000cce:	4617      	mov	r7, r2
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d0e2      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cd8:	e7df      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cda:	b902      	cbnz	r2, 8000cde <__udivmoddi4+0xe6>
 8000cdc:	deff      	udf	#255	; 0xff
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f040 8090 	bne.w	8000e08 <__udivmoddi4+0x210>
 8000ce8:	1a8a      	subs	r2, r1, r2
 8000cea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cee:	fa1f fe8c 	uxth.w	lr, ip
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cf8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d02:	fb0e f005 	mul.w	r0, lr, r5
 8000d06:	4290      	cmp	r0, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x122>
 8000d14:	4290      	cmp	r0, r2
 8000d16:	f200 80cb 	bhi.w	8000eb0 <__udivmoddi4+0x2b8>
 8000d1a:	4645      	mov	r5, r8
 8000d1c:	1a12      	subs	r2, r2, r0
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d24:	fb07 2210 	mls	r2, r7, r0, r2
 8000d28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x14e>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x14c>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80bb 	bhi.w	8000eba <__udivmoddi4+0x2c2>
 8000d44:	4610      	mov	r0, r2
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d4e:	e79f      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d62:	fa20 f307 	lsr.w	r3, r0, r7
 8000d66:	40fd      	lsrs	r5, r7
 8000d68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6c:	4323      	orrs	r3, r4
 8000d6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d72:	fa1f fe8c 	uxth.w	lr, ip
 8000d76:	fb09 5518 	mls	r5, r9, r8, r5
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d80:	fb08 f50e 	mul.w	r5, r8, lr
 8000d84:	42a5      	cmp	r5, r4
 8000d86:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b0>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2b4>
 8000d9c:	42a5      	cmp	r5, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2b4>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1b64      	subs	r4, r4, r5
 8000daa:	b29d      	uxth	r5, r3
 8000dac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db0:	fb09 4413 	mls	r4, r9, r3, r4
 8000db4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000db8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1da>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000dce:	3b02      	subs	r3, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dd6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x29c>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x298>
 8000de8:	b156      	cbz	r6, 8000e00 <__udivmoddi4+0x208>
 8000dea:	ebb0 0208 	subs.w	r2, r0, r8
 8000dee:	eb64 040e 	sbc.w	r4, r4, lr
 8000df2:	fa04 f707 	lsl.w	r7, r4, r7
 8000df6:	40ca      	lsrs	r2, r1
 8000df8:	40cc      	lsrs	r4, r1
 8000dfa:	4317      	orrs	r7, r2
 8000dfc:	e9c6 7400 	strd	r7, r4, [r6]
 8000e00:	4618      	mov	r0, r3
 8000e02:	2100      	movs	r1, #0
 8000e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e08:	f1c3 0120 	rsb	r1, r3, #32
 8000e0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e10:	fa20 f201 	lsr.w	r2, r0, r1
 8000e14:	fa25 f101 	lsr.w	r1, r5, r1
 8000e18:	409d      	lsls	r5, r3
 8000e1a:	432a      	orrs	r2, r5
 8000e1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e28:	fb07 1510 	mls	r5, r7, r0, r1
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e32:	fb00 f50e 	mul.w	r5, r0, lr
 8000e36:	428d      	cmp	r5, r1
 8000e38:	fa04 f403 	lsl.w	r4, r4, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x258>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e48:	428d      	cmp	r5, r1
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e4c:	3802      	subs	r0, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1b49      	subs	r1, r1, r5
 8000e52:	b292      	uxth	r2, r2
 8000e54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e58:	fb07 1115 	mls	r1, r7, r5, r1
 8000e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e60:	fb05 f10e 	mul.w	r1, r5, lr
 8000e64:	4291      	cmp	r1, r2
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x282>
 8000e68:	eb1c 0202 	adds.w	r2, ip, r2
 8000e6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e72:	4291      	cmp	r1, r2
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2a8>
 8000e76:	3d02      	subs	r5, #2
 8000e78:	4462      	add	r2, ip
 8000e7a:	1a52      	subs	r2, r2, r1
 8000e7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0xfc>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e708      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e88:	4639      	mov	r1, r7
 8000e8a:	e6e6      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x90>
 8000e90:	4548      	cmp	r0, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f0>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000ea0:	4645      	mov	r5, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ea4:	462b      	mov	r3, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1da>
 8000ea8:	4640      	mov	r0, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x258>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b0>
 8000eb0:	3d02      	subs	r5, #2
 8000eb2:	4462      	add	r2, ip
 8000eb4:	e732      	b.n	8000d1c <__udivmoddi4+0x124>
 8000eb6:	4608      	mov	r0, r1
 8000eb8:	e70a      	b.n	8000cd0 <__udivmoddi4+0xd8>
 8000eba:	4464      	add	r4, ip
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	e742      	b.n	8000d46 <__udivmoddi4+0x14e>

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <MX_DMA_Init+0x38>)
 8000ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <MX_DMA_Init+0x38>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <MX_DMA_Init+0x38>)
 8000ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	200c      	movs	r0, #12
 8000ee8:	f000 fe83 	bl	8001bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000eec:	200c      	movs	r0, #12
 8000eee:	f000 fe9c 	bl	8001c2a <HAL_NVIC_EnableIRQ>

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 031c 	add.w	r3, r7, #28
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b49      	ldr	r3, [pc, #292]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a48      	ldr	r2, [pc, #288]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b46      	ldr	r3, [pc, #280]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	4b43      	ldr	r3, [pc, #268]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a42      	ldr	r2, [pc, #264]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b40      	ldr	r3, [pc, #256]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b3d      	ldr	r3, [pc, #244]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a3c      	ldr	r2, [pc, #240]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f64:	f043 0302 	orr.w	r3, r3, #2
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f76:	4b31      	ldr	r3, [pc, #196]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a30      	ldr	r2, [pc, #192]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0308 	and.w	r3, r3, #8
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f8e:	4b2b      	ldr	r3, [pc, #172]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a2a      	ldr	r2, [pc, #168]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <MX_GPIO_Init+0x13c>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000fa6:	f002 ff19 	bl	8003ddc <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000fb0:	4823      	ldr	r0, [pc, #140]	; (8001040 <MX_GPIO_Init+0x140>)
 8000fb2:	f001 f9cd 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
 8000fbc:	4821      	ldr	r0, [pc, #132]	; (8001044 <MX_GPIO_Init+0x144>)
 8000fbe:	f001 f9c7 	bl	8002350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481b      	ldr	r0, [pc, #108]	; (8001048 <MX_GPIO_Init+0x148>)
 8000fda:	f001 f827 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000fde:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <MX_GPIO_Init+0x140>)
 8000ff8:	f001 f818 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|SMPS_PG_Pin;
 8000ffc:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100a:	f107 031c 	add.w	r3, r7, #28
 800100e:	4619      	mov	r1, r3
 8001010:	480c      	ldr	r0, [pc, #48]	; (8001044 <MX_GPIO_Init+0x144>)
 8001012:	f001 f80b 	bl	800202c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|SMPS_V1_Pin|SMPS_EN_Pin|SMPS_SW_Pin;
 8001016:	f44f 5331 	mov.w	r3, #11328	; 0x2c40
 800101a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101c:	2301      	movs	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <MX_GPIO_Init+0x144>)
 8001030:	f000 fffc 	bl	800202c <HAL_GPIO_Init>

}
 8001034:	bf00      	nop
 8001036:	3730      	adds	r7, #48	; 0x30
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40021000 	.word	0x40021000
 8001040:	48000400 	.word	0x48000400
 8001044:	48001800 	.word	0x48001800
 8001048:	48000800 	.word	0x48000800

0800104c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001052:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <MX_I2C1_Init+0x78>)
 8001054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8001056:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001058:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <MX_I2C1_Init+0x7c>)
 800105a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800105c:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <MX_I2C1_Init+0x74>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001062:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001064:	2201      	movs	r2, #1
 8001066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001068:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_I2C1_Init+0x74>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001070:	2200      	movs	r2, #0
 8001072:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001076:	2200      	movs	r2, #0
 8001078:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_I2C1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001080:	4b0f      	ldr	r3, [pc, #60]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001082:	2200      	movs	r2, #0
 8001084:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001086:	480e      	ldr	r0, [pc, #56]	; (80010c0 <MX_I2C1_Init+0x74>)
 8001088:	f002 fcfd 	bl	8003a86 <HAL_I2C_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001092:	f000 f909 	bl	80012a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001096:	2100      	movs	r1, #0
 8001098:	4809      	ldr	r0, [pc, #36]	; (80010c0 <MX_I2C1_Init+0x74>)
 800109a:	f002 fd83 	bl	8003ba4 <HAL_I2CEx_ConfigAnalogFilter>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f000 f900 	bl	80012a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_I2C1_Init+0x74>)
 80010ac:	f002 fdc5 	bl	8003c3a <HAL_I2CEx_ConfigDigitalFilter>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 f8f7 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000220 	.word	0x20000220
 80010c4:	40005400 	.word	0x40005400
 80010c8:	2000090e 	.word	0x2000090e

080010cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0ac      	sub	sp, #176	; 0xb0
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	228c      	movs	r2, #140	; 0x8c
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00a fd04 	bl	800bafa <memset>
  if(i2cHandle->Instance==I2C1)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a21      	ldr	r2, [pc, #132]	; (800117c <HAL_I2C_MspInit+0xb0>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d13b      	bne.n	8001174 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010fc:	2340      	movs	r3, #64	; 0x40
 80010fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001100:	2300      	movs	r3, #0
 8001102:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f003 fcb5 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001114:	f000 f8c8 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <HAL_I2C_MspInit+0xb4>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a18      	ldr	r2, [pc, #96]	; (8001180 <HAL_I2C_MspInit+0xb4>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_I2C_MspInit+0xb4>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001130:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001138:	2312      	movs	r3, #18
 800113a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800114a:	2304      	movs	r3, #4
 800114c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001154:	4619      	mov	r1, r3
 8001156:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_I2C_MspInit+0xb8>)
 8001158:	f000 ff68 	bl	800202c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <HAL_I2C_MspInit+0xb4>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <HAL_I2C_MspInit+0xb4>)
 8001162:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001166:	6593      	str	r3, [r2, #88]	; 0x58
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_I2C_MspInit+0xb4>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	37b0      	adds	r7, #176	; 0xb0
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fbbc 	bl	800190a <HAL_Init>
  uint8_t Rx_data[10];  //  creating a buffer of 10 bytes

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f82d 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001196:	f7ff feb3 	bl	8000f00 <MX_GPIO_Init>
  MX_DMA_Init();
 800119a:	f7ff fe93 	bl	8000ec4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800119e:	f000 f9d7 	bl	8001550 <MX_LPUART1_UART_Init>
  MX_USB_HOST_Init();
 80011a2:	f009 fb71 	bl	800a888 <MX_USB_HOST_Init>
  MX_USART3_UART_Init();
 80011a6:	f000 fa2f 	bl	8001608 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80011aa:	f7ff ff4f 	bl	800104c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80011ae:	f000 f9fb 	bl	80015a8 <MX_USART2_UART_Init>

	  //  printf("output\r\n");
	  // HAL_UART_Transmit(&huart3,buf,strlen((char*)buf),HAL_MAX_DELAY);     // for sending our message;

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80011b2:	f009 fb8f 	bl	800a8d4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
   // HAL_UART_Receive (&huart3, Rx_data, 4, 100);
    HAL_GPIO_TogglePin (GPIOB,GPIO_PIN_7);
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <main+0x58>)
 80011ba:	f001 f8e1 	bl	8002380 <HAL_GPIO_TogglePin>

    HAL_Delay (250);  // 250 ms delay
 80011be:	20fa      	movs	r0, #250	; 0xfa
 80011c0:	f000 fc18 	bl	80019f4 <HAL_Delay>

    HAL_UART_Transmit (&huart3, data, sizeof (data), 10);
 80011c4:	230a      	movs	r3, #10
 80011c6:	220f      	movs	r2, #15
 80011c8:	4906      	ldr	r1, [pc, #24]	; (80011e4 <main+0x5c>)
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <main+0x60>)
 80011cc:	f004 f97c 	bl	80054c8 <HAL_UART_Transmit>

    //HAL_UART_Transmit (&huart3, Rx_data, 4, 100);//

    HAL_UART_Transmit (&hlpuart1, data, sizeof (data), 10);
 80011d0:	230a      	movs	r3, #10
 80011d2:	220f      	movs	r2, #15
 80011d4:	4903      	ldr	r1, [pc, #12]	; (80011e4 <main+0x5c>)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <main+0x64>)
 80011d8:	f004 f976 	bl	80054c8 <HAL_UART_Transmit>
    MX_USB_HOST_Process();
 80011dc:	e7e9      	b.n	80011b2 <main+0x2a>
 80011de:	bf00      	nop
 80011e0:	48000400 	.word	0x48000400
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000380 	.word	0x20000380
 80011ec:	20000278 	.word	0x20000278

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00a fc7b 	bl	800bafa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f002 fd7b 	bl	8003d10 <HAL_PWREx_ControlVoltageScaling>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001220:	f000 f842 	bl	80012a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001224:	f002 fd56 	bl	8003cd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <SystemClock_Config+0xb4>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122e:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <SystemClock_Config+0xb4>)
 8001230:	f023 0318 	bic.w	r3, r3, #24
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001238:	2316      	movs	r3, #22
 800123a:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001244:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001246:	2340      	movs	r3, #64	; 0x40
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800124a:	2301      	movs	r3, #1
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8001252:	2390      	movs	r3, #144	; 0x90
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f002 fdcc 	bl	8003dfc <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800126a:	f000 f81d 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001272:	2301      	movs	r3, #1
 8001274:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800127a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800127e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001284:	463b      	mov	r3, r7
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f003 f9d1 	bl	8004630 <HAL_RCC_ClockConfig>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001294:	f000 f808 	bl	80012a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001298:	f003 feea 	bl	8005070 <HAL_RCCEx_EnableMSIPLLMode>
}
 800129c:	bf00      	nop
 800129e:	3758      	adds	r7, #88	; 0x58
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40021000 	.word	0x40021000

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x44>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6613      	str	r3, [r2, #96]	; 0x60
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x44>)
 80012c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x44>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012dc:	6593      	str	r3, [r2, #88]	; 0x58
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x44>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f000 fb34 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <DMA1_Channel2_IRQHandler+0x10>)
 8001356:	f000 fdba 	bl	8001ece <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000404 	.word	0x20000404

08001364 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001368:	4802      	ldr	r0, [pc, #8]	; (8001374 <USART3_IRQHandler+0x10>)
 800136a:	f004 f941 	bl	80055f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000380 	.word	0x20000380

08001378 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <OTG_FS_IRQHandler+0x10>)
 800137e:	f001 fa7f 	bl	8002880 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200008fc 	.word	0x200008fc

0800138c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <LPUART1_IRQHandler+0x10>)
 8001392:	f004 f92d 	bl	80055f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000278 	.word	0x20000278

080013a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return 1;
 80013a4:	2301      	movs	r3, #1
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <_kill>:

int _kill(int pid, int sig)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ba:	f00a fc01 	bl	800bbc0 <__errno>
 80013be:	4603      	mov	r3, r0
 80013c0:	2216      	movs	r2, #22
 80013c2:	601a      	str	r2, [r3, #0]
  return -1;
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <_exit>:

void _exit (int status)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ffe7 	bl	80013b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013e2:	e7fe      	b.n	80013e2 <_exit+0x12>

080013e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	e00a      	b.n	800140c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013f6:	f3af 8000 	nop.w
 80013fa:	4601      	mov	r1, r0
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	1c5a      	adds	r2, r3, #1
 8001400:	60ba      	str	r2, [r7, #8]
 8001402:	b2ca      	uxtb	r2, r1
 8001404:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf0      	blt.n	80013f6 <_read+0x12>
  }

  return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e009      	b.n	8001444 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	60ba      	str	r2, [r7, #8]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	3301      	adds	r3, #1
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	429a      	cmp	r2, r3
 800144a:	dbf1      	blt.n	8001430 <_write+0x12>
  }
  return len;
 800144c:	687b      	ldr	r3, [r7, #4]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <_close>:

int _close(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800146e:	b480      	push	{r7}
 8001470:	b083      	sub	sp, #12
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
 8001476:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800147e:	605a      	str	r2, [r3, #4]
  return 0;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <_isatty>:

int _isatty(int file)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001496:	2301      	movs	r3, #1
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3714      	adds	r7, #20
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <_sbrk+0x5c>)
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <_sbrk+0x60>)
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x64>)
 80014de:	4a12      	ldr	r2, [pc, #72]	; (8001528 <_sbrk+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d207      	bcs.n	8001500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f0:	f00a fb66 	bl	800bbc0 <__errno>
 80014f4:	4603      	mov	r3, r0
 80014f6:	220c      	movs	r2, #12
 80014f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295
 80014fe:	e009      	b.n	8001514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <_sbrk+0x64>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001506:	4b07      	ldr	r3, [pc, #28]	; (8001524 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <_sbrk+0x64>)
 8001510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001512:	68fb      	ldr	r3, [r7, #12]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	20050000 	.word	0x20050000
 8001520:	00000400 	.word	0x00000400
 8001524:	20000274 	.word	0x20000274
 8001528:	20000d50 	.word	0x20000d50

0800152c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001530:	4b06      	ldr	r3, [pc, #24]	; (800154c <SystemInit+0x20>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <SystemInit+0x20>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 8001556:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <MX_LPUART1_UART_Init+0x54>)
 8001558:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 800155c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001560:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_LPUART1_UART_Init+0x50>)
 800158e:	f003 ff4d 	bl	800542c <HAL_UART_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001598:	f7ff fe86 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000278 	.word	0x20000278
 80015a4:	40008000 	.word	0x40008000

080015a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ae:	4a15      	ldr	r2, [pc, #84]	; (8001604 <MX_USART2_UART_Init+0x5c>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015b2:	4b13      	ldr	r3, [pc, #76]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b0b      	ldr	r3, [pc, #44]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b09      	ldr	r3, [pc, #36]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b08      	ldr	r3, [pc, #32]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ea:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_USART2_UART_Init+0x58>)
 80015ec:	f003 ff1e 	bl	800542c <HAL_UART_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f6:	f7ff fe57 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200002fc 	.word	0x200002fc
 8001604:	40004400 	.word	0x40004400

08001608 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_USART3_UART_Init+0x58>)
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <MX_USART3_UART_Init+0x5c>)
 8001610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_USART3_UART_Init+0x58>)
 8001614:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001618:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_USART3_UART_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_USART3_UART_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_USART3_UART_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_USART3_UART_Init+0x58>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_USART3_UART_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_USART3_UART_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_USART3_UART_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_USART3_UART_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_USART3_UART_Init+0x58>)
 800164c:	f003 feee 	bl	800542c <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001656:	f7ff fe27 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000380 	.word	0x20000380
 8001664:	40004800 	.word	0x40004800

08001668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b0b0      	sub	sp, #192	; 0xc0
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001670:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	f107 0320 	add.w	r3, r7, #32
 8001684:	228c      	movs	r2, #140	; 0x8c
 8001686:	2100      	movs	r1, #0
 8001688:	4618      	mov	r0, r3
 800168a:	f00a fa36 	bl	800bafa <memset>
  if(uartHandle->Instance==LPUART1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a81      	ldr	r2, [pc, #516]	; (8001898 <HAL_UART_MspInit+0x230>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d146      	bne.n	8001726 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001698:	2320      	movs	r3, #32
 800169a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800169c:	2300      	movs	r3, #0
 800169e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a0:	f107 0320 	add.w	r3, r7, #32
 80016a4:	4618      	mov	r0, r3
 80016a6:	f003 f9e7 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016b0:	f7ff fdfa 	bl	80012a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016b4:	4b79      	ldr	r3, [pc, #484]	; (800189c <HAL_UART_MspInit+0x234>)
 80016b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b8:	4a78      	ldr	r2, [pc, #480]	; (800189c <HAL_UART_MspInit+0x234>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016c0:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_UART_MspInit+0x234>)
 80016c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016cc:	4b73      	ldr	r3, [pc, #460]	; (800189c <HAL_UART_MspInit+0x234>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	4a72      	ldr	r2, [pc, #456]	; (800189c <HAL_UART_MspInit+0x234>)
 80016d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d8:	4b70      	ldr	r3, [pc, #448]	; (800189c <HAL_UART_MspInit+0x234>)
 80016da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e0:	61bb      	str	r3, [r7, #24]
 80016e2:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 80016e4:	f002 fb7a 	bl	8003ddc <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80016e8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001702:	2308      	movs	r3, #8
 8001704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800170c:	4619      	mov	r1, r3
 800170e:	4864      	ldr	r0, [pc, #400]	; (80018a0 <HAL_UART_MspInit+0x238>)
 8001710:	f000 fc8c 	bl	800202c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2046      	movs	r0, #70	; 0x46
 800171a:	f000 fa6a 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800171e:	2046      	movs	r0, #70	; 0x46
 8001720:	f000 fa83 	bl	8001c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001724:	e0b3      	b.n	800188e <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART2)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <HAL_UART_MspInit+0x23c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d13c      	bne.n	80017aa <HAL_UART_MspInit+0x142>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001730:	2302      	movs	r3, #2
 8001732:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001734:	2300      	movs	r3, #0
 8001736:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	f107 0320 	add.w	r3, r7, #32
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f99b 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8001748:	f7ff fdae 	bl	80012a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_UART_MspInit+0x234>)
 800174e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_UART_MspInit+0x234>)
 8001752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001756:	6593      	str	r3, [r2, #88]	; 0x58
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_UART_MspInit+0x234>)
 800175a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b4d      	ldr	r3, [pc, #308]	; (800189c <HAL_UART_MspInit+0x234>)
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	4a4c      	ldr	r2, [pc, #304]	; (800189c <HAL_UART_MspInit+0x234>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001770:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_UART_MspInit+0x234>)
 8001772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800177c:	230c      	movs	r3, #12
 800177e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178e:	2303      	movs	r3, #3
 8001790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001794:	2307      	movs	r3, #7
 8001796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800179e:	4619      	mov	r1, r3
 80017a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a4:	f000 fc42 	bl	800202c <HAL_GPIO_Init>
}
 80017a8:	e071      	b.n	800188e <HAL_UART_MspInit+0x226>
  else if(uartHandle->Instance==USART3)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a3e      	ldr	r2, [pc, #248]	; (80018a8 <HAL_UART_MspInit+0x240>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d16c      	bne.n	800188e <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80017b4:	2304      	movs	r3, #4
 80017b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 f959 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_UART_MspInit+0x168>
      Error_Handler();
 80017cc:	f7ff fd6c 	bl	80012a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d0:	4b32      	ldr	r3, [pc, #200]	; (800189c <HAL_UART_MspInit+0x234>)
 80017d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d4:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_UART_MspInit+0x234>)
 80017d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017da:	6593      	str	r3, [r2, #88]	; 0x58
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_UART_MspInit+0x234>)
 80017de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e8:	4b2c      	ldr	r3, [pc, #176]	; (800189c <HAL_UART_MspInit+0x234>)
 80017ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ec:	4a2b      	ldr	r2, [pc, #172]	; (800189c <HAL_UART_MspInit+0x234>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f4:	4b29      	ldr	r3, [pc, #164]	; (800189c <HAL_UART_MspInit+0x234>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f8:	f003 0308 	and.w	r3, r3, #8
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001800:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001808:	2302      	movs	r3, #2
 800180a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800181a:	2307      	movs	r3, #7
 800181c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001820:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001824:	4619      	mov	r1, r3
 8001826:	4821      	ldr	r0, [pc, #132]	; (80018ac <HAL_UART_MspInit+0x244>)
 8001828:	f000 fc00 	bl	800202c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <HAL_UART_MspInit+0x248>)
 800182e:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <HAL_UART_MspInit+0x24c>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_2;
 8001832:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001834:	2202      	movs	r2, #2
 8001836:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_UART_MspInit+0x248>)
 800183a:	2210      	movs	r2, #16
 800183c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183e:	4b1c      	ldr	r3, [pc, #112]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001840:	2200      	movs	r2, #0
 8001842:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001844:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001846:	2280      	movs	r2, #128	; 0x80
 8001848:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184a:	4b19      	ldr	r3, [pc, #100]	; (80018b0 <HAL_UART_MspInit+0x248>)
 800184c:	2200      	movs	r2, #0
 800184e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001850:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001852:	2200      	movs	r2, #0
 8001854:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001856:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001858:	2200      	movs	r2, #0
 800185a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_UART_MspInit+0x248>)
 800185e:	2200      	movs	r2, #0
 8001860:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001862:	4813      	ldr	r0, [pc, #76]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001864:	f000 f9fc 	bl	8001c60 <HAL_DMA_Init>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_UART_MspInit+0x20a>
      Error_Handler();
 800186e:	f7ff fd1b 	bl	80012a8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_UART_MspInit+0x248>)
 8001876:	66da      	str	r2, [r3, #108]	; 0x6c
 8001878:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_UART_MspInit+0x248>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2100      	movs	r1, #0
 8001882:	2027      	movs	r0, #39	; 0x27
 8001884:	f000 f9b5 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001888:	2027      	movs	r0, #39	; 0x27
 800188a:	f000 f9ce 	bl	8001c2a <HAL_NVIC_EnableIRQ>
}
 800188e:	bf00      	nop
 8001890:	37c0      	adds	r7, #192	; 0xc0
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40008000 	.word	0x40008000
 800189c:	40021000 	.word	0x40021000
 80018a0:	48001800 	.word	0x48001800
 80018a4:	40004400 	.word	0x40004400
 80018a8:	40004800 	.word	0x40004800
 80018ac:	48000c00 	.word	0x48000c00
 80018b0:	20000404 	.word	0x20000404
 80018b4:	4002001c 	.word	0x4002001c

080018b8 <Reset_Handler>:
    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

  ldr   sp, =_estack    /* Set stack pointer */
 80018b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018bc:	f7ff fe36 	bl	800152c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c0:	480c      	ldr	r0, [pc, #48]	; (80018f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018c2:	490d      	ldr	r1, [pc, #52]	; (80018f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c4:	4a0d      	ldr	r2, [pc, #52]	; (80018fc <LoopForever+0xe>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c8:	e002      	b.n	80018d0 <LoopCopyDataInit>

080018ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ce:	3304      	adds	r3, #4

080018d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d4:	d3f9      	bcc.n	80018ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d8:	4c0a      	ldr	r4, [pc, #40]	; (8001904 <LoopForever+0x16>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018dc:	e001      	b.n	80018e2 <LoopFillZerobss>

080018de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e0:	3204      	adds	r2, #4

080018e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e4:	d3fb      	bcc.n	80018de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018e6:	f00a f971 	bl	800bbcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ea:	f7ff fc4d 	bl	8001188 <main>

080018ee <LoopForever>:

LoopForever:
    b LoopForever
 80018ee:	e7fe      	b.n	80018ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f8:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80018fc:	0800dc1c 	.word	0x0800dc1c
  ldr r2, =_sbss
 8001900:	20000204 	.word	0x20000204
  ldr r4, =_ebss
 8001904:	20000d4c 	.word	0x20000d4c

08001908 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001908:	e7fe      	b.n	8001908 <ADC1_2_IRQHandler>

0800190a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800190a:	b580      	push	{r7, lr}
 800190c:	b082      	sub	sp, #8
 800190e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001914:	2003      	movs	r0, #3
 8001916:	f000 f961 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191a:	2000      	movs	r0, #0
 800191c:	f000 f80e 	bl	800193c <HAL_InitTick>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	71fb      	strb	r3, [r7, #7]
 800192a:	e001      	b.n	8001930 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800192c:	f7ff fcc2 	bl	80012b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001930:	79fb      	ldrb	r3, [r7, #7]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_InitTick+0x6c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d023      	beq.n	8001998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001950:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_InitTick+0x70>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_InitTick+0x6c>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f96d 	bl	8001c46 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10f      	bne.n	8001992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2b0f      	cmp	r3, #15
 8001976:	d809      	bhi.n	800198c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001978:	2200      	movs	r2, #0
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f000 f937 	bl	8001bf2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001984:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <HAL_InitTick+0x74>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	e007      	b.n	800199c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	e004      	b.n	800199c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	e001      	b.n	800199c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800199c:	7bfb      	ldrb	r3, [r7, #15]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000018 	.word	0x20000018
 80019ac:	20000010 	.word	0x20000010
 80019b0:	20000014 	.word	0x20000014

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	; (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000018 	.word	0x20000018
 80019d8:	2000044c 	.word	0x2000044c

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000044c 	.word	0x2000044c

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	; (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000018 	.word	0x20000018

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	; (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	; (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	; 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	; 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	; (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff3e 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff31 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e098      	b.n	8001da4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	4b4d      	ldr	r3, [pc, #308]	; (8001db0 <HAL_DMA_Init+0x150>)
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d80f      	bhi.n	8001c9e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <HAL_DMA_Init+0x154>)
 8001c86:	4413      	add	r3, r2
 8001c88:	4a4b      	ldr	r2, [pc, #300]	; (8001db8 <HAL_DMA_Init+0x158>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a48      	ldr	r2, [pc, #288]	; (8001dbc <HAL_DMA_Init+0x15c>)
 8001c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001c9c:	e00e      	b.n	8001cbc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	4b46      	ldr	r3, [pc, #280]	; (8001dc0 <HAL_DMA_Init+0x160>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4a43      	ldr	r2, [pc, #268]	; (8001db8 <HAL_DMA_Init+0x158>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	091b      	lsrs	r3, r3, #4
 8001cb0:	009a      	lsls	r2, r3, #2
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a42      	ldr	r2, [pc, #264]	; (8001dc4 <HAL_DMA_Init+0x164>)
 8001cba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cd6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d16:	d039      	beq.n	8001d8c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	4a27      	ldr	r2, [pc, #156]	; (8001dbc <HAL_DMA_Init+0x15c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d11a      	bne.n	8001d58 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f003 031c 	and.w	r3, r3, #28
 8001d2e:	210f      	movs	r1, #15
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	4924      	ldr	r1, [pc, #144]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6859      	ldr	r1, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d48:	f003 031c 	and.w	r3, r3, #28
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	491d      	ldr	r1, [pc, #116]	; (8001dc8 <HAL_DMA_Init+0x168>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]
 8001d56:	e019      	b.n	8001d8c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f003 031c 	and.w	r3, r3, #28
 8001d64:	210f      	movs	r1, #15
 8001d66:	fa01 f303 	lsl.w	r3, r1, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	4917      	ldr	r1, [pc, #92]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d6e:	4013      	ands	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6859      	ldr	r1, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f003 031c 	and.w	r3, r3, #28
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	4911      	ldr	r1, [pc, #68]	; (8001dcc <HAL_DMA_Init+0x16c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40020407 	.word	0x40020407
 8001db4:	bffdfff8 	.word	0xbffdfff8
 8001db8:	cccccccd 	.word	0xcccccccd
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	bffdfbf8 	.word	0xbffdfbf8
 8001dc4:	40020400 	.word	0x40020400
 8001dc8:	400200a8 	.word	0x400200a8
 8001dcc:	400204a8 	.word	0x400204a8

08001dd0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d008      	beq.n	8001dfa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2204      	movs	r2, #4
 8001dec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e022      	b.n	8001e40 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 020e 	bic.w	r2, r2, #14
 8001e08:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1e:	f003 021c 	and.w	r2, r3, #28
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2101      	movs	r1, #1
 8001e28:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d005      	beq.n	8001e70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2204      	movs	r2, #4
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	e029      	b.n	8001ec4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020e 	bic.w	r2, r2, #14
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0201 	bic.w	r2, r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e94:	f003 021c 	and.w	r2, r3, #28
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
    }
  }
  return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f003 031c 	and.w	r3, r3, #28
 8001eee:	2204      	movs	r2, #4
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d026      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x7a>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d021      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d107      	bne.n	8001f22 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0204 	bic.w	r2, r2, #4
 8001f20:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	f003 021c 	and.w	r2, r3, #28
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	2104      	movs	r1, #4
 8001f30:	fa01 f202 	lsl.w	r2, r1, r2
 8001f34:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d071      	beq.n	8002022 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001f46:	e06c      	b.n	8002022 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4c:	f003 031c 	and.w	r3, r3, #28
 8001f50:	2202      	movs	r2, #2
 8001f52:	409a      	lsls	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d02e      	beq.n	8001fba <HAL_DMA_IRQHandler+0xec>
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d029      	beq.n	8001fba <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10b      	bne.n	8001f8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 020a 	bic.w	r2, r2, #10
 8001f82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f90:	f003 021c 	and.w	r2, r3, #28
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	2102      	movs	r1, #2
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d038      	beq.n	8002022 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001fb8:	e033      	b.n	8002022 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f003 031c 	and.w	r3, r3, #28
 8001fc2:	2208      	movs	r2, #8
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d02a      	beq.n	8002024 <HAL_DMA_IRQHandler+0x156>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d025      	beq.n	8002024 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020e 	bic.w	r2, r2, #14
 8001fe6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	f003 021c 	and.w	r2, r3, #28
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2201      	movs	r2, #1
 8002006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002022:	bf00      	nop
 8002024:	bf00      	nop
}
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203a:	e166      	b.n	800230a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	fa01 f303 	lsl.w	r3, r1, r3
 8002048:	4013      	ands	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f000 8158 	beq.w	8002304 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b01      	cmp	r3, #1
 800205e:	d005      	beq.n	800206c <HAL_GPIO_Init+0x40>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d130      	bne.n	80020ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	4013      	ands	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a2:	2201      	movs	r2, #1
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	693a      	ldr	r2, [r7, #16]
 80020ae:	4013      	ands	r3, r2
 80020b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	091b      	lsrs	r3, r3, #4
 80020b8:	f003 0201 	and.w	r2, r3, #1
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b03      	cmp	r3, #3
 80020d8:	d017      	beq.n	800210a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d123      	bne.n	800215e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002122:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	08da      	lsrs	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3208      	adds	r2, #8
 8002158:	6939      	ldr	r1, [r7, #16]
 800215a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	2203      	movs	r2, #3
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0203 	and.w	r2, r3, #3
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80b2 	beq.w	8002304 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a0:	4b61      	ldr	r3, [pc, #388]	; (8002328 <HAL_GPIO_Init+0x2fc>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a4:	4a60      	ldr	r2, [pc, #384]	; (8002328 <HAL_GPIO_Init+0x2fc>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6613      	str	r3, [r2, #96]	; 0x60
 80021ac:	4b5e      	ldr	r3, [pc, #376]	; (8002328 <HAL_GPIO_Init+0x2fc>)
 80021ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021b8:	4a5c      	ldr	r2, [pc, #368]	; (800232c <HAL_GPIO_Init+0x300>)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4013      	ands	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021e2:	d02b      	beq.n	800223c <HAL_GPIO_Init+0x210>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_GPIO_Init+0x304>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d025      	beq.n	8002238 <HAL_GPIO_Init+0x20c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_GPIO_Init+0x308>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d01f      	beq.n	8002234 <HAL_GPIO_Init+0x208>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_GPIO_Init+0x30c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d019      	beq.n	8002230 <HAL_GPIO_Init+0x204>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a4f      	ldr	r2, [pc, #316]	; (800233c <HAL_GPIO_Init+0x310>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d013      	beq.n	800222c <HAL_GPIO_Init+0x200>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a4e      	ldr	r2, [pc, #312]	; (8002340 <HAL_GPIO_Init+0x314>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00d      	beq.n	8002228 <HAL_GPIO_Init+0x1fc>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a4d      	ldr	r2, [pc, #308]	; (8002344 <HAL_GPIO_Init+0x318>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d007      	beq.n	8002224 <HAL_GPIO_Init+0x1f8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a4c      	ldr	r2, [pc, #304]	; (8002348 <HAL_GPIO_Init+0x31c>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d101      	bne.n	8002220 <HAL_GPIO_Init+0x1f4>
 800221c:	2307      	movs	r3, #7
 800221e:	e00e      	b.n	800223e <HAL_GPIO_Init+0x212>
 8002220:	2308      	movs	r3, #8
 8002222:	e00c      	b.n	800223e <HAL_GPIO_Init+0x212>
 8002224:	2306      	movs	r3, #6
 8002226:	e00a      	b.n	800223e <HAL_GPIO_Init+0x212>
 8002228:	2305      	movs	r3, #5
 800222a:	e008      	b.n	800223e <HAL_GPIO_Init+0x212>
 800222c:	2304      	movs	r3, #4
 800222e:	e006      	b.n	800223e <HAL_GPIO_Init+0x212>
 8002230:	2303      	movs	r3, #3
 8002232:	e004      	b.n	800223e <HAL_GPIO_Init+0x212>
 8002234:	2302      	movs	r3, #2
 8002236:	e002      	b.n	800223e <HAL_GPIO_Init+0x212>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_GPIO_Init+0x212>
 800223c:	2300      	movs	r3, #0
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	f002 0203 	and.w	r2, r2, #3
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	4093      	lsls	r3, r2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800224e:	4937      	ldr	r1, [pc, #220]	; (800232c <HAL_GPIO_Init+0x300>)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	089b      	lsrs	r3, r3, #2
 8002254:	3302      	adds	r3, #2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800225c:	4b3b      	ldr	r3, [pc, #236]	; (800234c <HAL_GPIO_Init+0x320>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002280:	4a32      	ldr	r2, [pc, #200]	; (800234c <HAL_GPIO_Init+0x320>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002286:	4b31      	ldr	r3, [pc, #196]	; (800234c <HAL_GPIO_Init+0x320>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022aa:	4a28      	ldr	r2, [pc, #160]	; (800234c <HAL_GPIO_Init+0x320>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022b0:	4b26      	ldr	r3, [pc, #152]	; (800234c <HAL_GPIO_Init+0x320>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <HAL_GPIO_Init+0x320>)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_GPIO_Init+0x320>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_GPIO_Init+0x320>)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	2b00      	cmp	r3, #0
 8002316:	f47f ae91 	bne.w	800203c <HAL_GPIO_Init+0x10>
  }
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	371c      	adds	r7, #28
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000
 8002330:	48000400 	.word	0x48000400
 8002334:	48000800 	.word	0x48000800
 8002338:	48000c00 	.word	0x48000c00
 800233c:	48001000 	.word	0x48001000
 8002340:	48001400 	.word	0x48001400
 8002344:	48001800 	.word	0x48001800
 8002348:	48001c00 	.word	0x48001c00
 800234c:	40010400 	.word	0x40010400

08002350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	807b      	strh	r3, [r7, #2]
 800235c:	4613      	mov	r3, r2
 800235e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002360:	787b      	ldrb	r3, [r7, #1]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800236c:	e002      	b.n	8002374 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800236e:	887a      	ldrh	r2, [r7, #2]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002392:	887a      	ldrh	r2, [r7, #2]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	041a      	lsls	r2, r3, #16
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	43d9      	mvns	r1, r3
 800239e:	887b      	ldrh	r3, [r7, #2]
 80023a0:	400b      	ands	r3, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	619a      	str	r2, [r3, #24]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023b6:	b08f      	sub	sp, #60	; 0x3c
 80023b8:	af0a      	add	r7, sp, #40	; 0x28
 80023ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d101      	bne.n	80023c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e054      	b.n	8002470 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d106      	bne.n	80023e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f008 faaf 	bl	800a944 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 f946 	bl	8006696 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	687e      	ldr	r6, [r7, #4]
 8002412:	466d      	mov	r5, sp
 8002414:	f106 0410 	add.w	r4, r6, #16
 8002418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800241e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002420:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002424:	e885 0003 	stmia.w	r5, {r0, r1}
 8002428:	1d33      	adds	r3, r6, #4
 800242a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f004 f8f5 	bl	800661c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2101      	movs	r1, #1
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f93d 	bl	80066b8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	687e      	ldr	r6, [r7, #4]
 8002446:	466d      	mov	r5, sp
 8002448:	f106 0410 	add.w	r4, r6, #16
 800244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002454:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002458:	e885 0003 	stmia.w	r5, {r0, r1}
 800245c:	1d33      	adds	r3, r6, #4
 800245e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002460:	6838      	ldr	r0, [r7, #0]
 8002462:	f004 fac1 	bl	80069e8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002478 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af04      	add	r7, sp, #16
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4603      	mov	r3, r0
 8002488:	70fb      	strb	r3, [r7, #3]
 800248a:	460b      	mov	r3, r1
 800248c:	70bb      	strb	r3, [r7, #2]
 800248e:	4613      	mov	r3, r2
 8002490:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_HCD_HC_Init+0x28>
 800249c:	2302      	movs	r3, #2
 800249e:	e076      	b.n	800258e <HAL_HCD_HC_Init+0x116>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	333d      	adds	r3, #61	; 0x3d
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80024ba:	78fb      	ldrb	r3, [r7, #3]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	212c      	movs	r1, #44	; 0x2c
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	4413      	add	r3, r2
 80024c6:	3338      	adds	r3, #56	; 0x38
 80024c8:	787a      	ldrb	r2, [r7, #1]
 80024ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3340      	adds	r3, #64	; 0x40
 80024da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80024dc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	212c      	movs	r1, #44	; 0x2c
 80024e4:	fb01 f303 	mul.w	r3, r1, r3
 80024e8:	4413      	add	r3, r2
 80024ea:	3339      	adds	r3, #57	; 0x39
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	212c      	movs	r1, #44	; 0x2c
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	4413      	add	r3, r2
 80024fc:	333f      	adds	r3, #63	; 0x3f
 80024fe:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	78ba      	ldrb	r2, [r7, #2]
 8002508:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800250c:	b2d0      	uxtb	r0, r2
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	333a      	adds	r3, #58	; 0x3a
 800251a:	4602      	mov	r2, r0
 800251c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800251e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002522:	2b00      	cmp	r3, #0
 8002524:	da09      	bge.n	800253a <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	212c      	movs	r1, #44	; 0x2c
 800252c:	fb01 f303 	mul.w	r3, r1, r3
 8002530:	4413      	add	r3, r2
 8002532:	333b      	adds	r3, #59	; 0x3b
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e008      	b.n	800254c <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800253a:	78fb      	ldrb	r3, [r7, #3]
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	212c      	movs	r1, #44	; 0x2c
 8002540:	fb01 f303 	mul.w	r3, r1, r3
 8002544:	4413      	add	r3, r2
 8002546:	333b      	adds	r3, #59	; 0x3b
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	212c      	movs	r1, #44	; 0x2c
 8002552:	fb01 f303 	mul.w	r3, r1, r3
 8002556:	4413      	add	r3, r2
 8002558:	333c      	adds	r3, #60	; 0x3c
 800255a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800255e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6818      	ldr	r0, [r3, #0]
 8002564:	787c      	ldrb	r4, [r7, #1]
 8002566:	78ba      	ldrb	r2, [r7, #2]
 8002568:	78f9      	ldrb	r1, [r7, #3]
 800256a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800256c:	9302      	str	r3, [sp, #8]
 800256e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002572:	9301      	str	r3, [sp, #4]
 8002574:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4623      	mov	r3, r4
 800257c:	f004 fb7c 	bl	8006c78 <USB_HC_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_HCD_HC_Halt+0x1e>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e00f      	b.n	80025d4 <HAL_HCD_HC_Halt+0x3e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	78fa      	ldrb	r2, [r7, #3]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f004 fd6c 	bl	80070a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	4608      	mov	r0, r1
 80025e6:	4611      	mov	r1, r2
 80025e8:	461a      	mov	r2, r3
 80025ea:	4603      	mov	r3, r0
 80025ec:	70fb      	strb	r3, [r7, #3]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70bb      	strb	r3, [r7, #2]
 80025f2:	4613      	mov	r3, r2
 80025f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80025f6:	78fb      	ldrb	r3, [r7, #3]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	212c      	movs	r1, #44	; 0x2c
 80025fc:	fb01 f303 	mul.w	r3, r1, r3
 8002600:	4413      	add	r3, r2
 8002602:	333b      	adds	r3, #59	; 0x3b
 8002604:	78ba      	ldrb	r2, [r7, #2]
 8002606:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	212c      	movs	r1, #44	; 0x2c
 800260e:	fb01 f303 	mul.w	r3, r1, r3
 8002612:	4413      	add	r3, r2
 8002614:	333f      	adds	r3, #63	; 0x3f
 8002616:	787a      	ldrb	r2, [r7, #1]
 8002618:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800261a:	7c3b      	ldrb	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d112      	bne.n	8002646 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3342      	adds	r3, #66	; 0x42
 800262e:	2203      	movs	r2, #3
 8002630:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	212c      	movs	r1, #44	; 0x2c
 8002638:	fb01 f303 	mul.w	r3, r1, r3
 800263c:	4413      	add	r3, r2
 800263e:	333d      	adds	r3, #61	; 0x3d
 8002640:	7f3a      	ldrb	r2, [r7, #28]
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e008      	b.n	8002658 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	212c      	movs	r1, #44	; 0x2c
 800264c:	fb01 f303 	mul.w	r3, r1, r3
 8002650:	4413      	add	r3, r2
 8002652:	3342      	adds	r3, #66	; 0x42
 8002654:	2202      	movs	r2, #2
 8002656:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002658:	787b      	ldrb	r3, [r7, #1]
 800265a:	2b03      	cmp	r3, #3
 800265c:	f200 80c6 	bhi.w	80027ec <HAL_HCD_HC_SubmitRequest+0x210>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	080027d9 	.word	0x080027d9
 8002670:	080026dd 	.word	0x080026dd
 8002674:	0800275b 	.word	0x0800275b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002678:	7c3b      	ldrb	r3, [r7, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	f040 80b8 	bne.w	80027f0 <HAL_HCD_HC_SubmitRequest+0x214>
 8002680:	78bb      	ldrb	r3, [r7, #2]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f040 80b4 	bne.w	80027f0 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002688:	8b3b      	ldrh	r3, [r7, #24]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800268e:	78fb      	ldrb	r3, [r7, #3]
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	212c      	movs	r1, #44	; 0x2c
 8002694:	fb01 f303 	mul.w	r3, r1, r3
 8002698:	4413      	add	r3, r2
 800269a:	3355      	adds	r3, #85	; 0x55
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	212c      	movs	r1, #44	; 0x2c
 80026a6:	fb01 f303 	mul.w	r3, r1, r3
 80026aa:	4413      	add	r3, r2
 80026ac:	3355      	adds	r3, #85	; 0x55
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3342      	adds	r3, #66	; 0x42
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80026c6:	e093      	b.n	80027f0 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	212c      	movs	r1, #44	; 0x2c
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	3342      	adds	r3, #66	; 0x42
 80026d6:	2202      	movs	r2, #2
 80026d8:	701a      	strb	r2, [r3, #0]
      break;
 80026da:	e089      	b.n	80027f0 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80026dc:	78bb      	ldrb	r3, [r7, #2]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d11d      	bne.n	800271e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	212c      	movs	r1, #44	; 0x2c
 80026e8:	fb01 f303 	mul.w	r3, r1, r3
 80026ec:	4413      	add	r3, r2
 80026ee:	3355      	adds	r3, #85	; 0x55
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d109      	bne.n	800270a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026f6:	78fb      	ldrb	r3, [r7, #3]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	212c      	movs	r1, #44	; 0x2c
 80026fc:	fb01 f303 	mul.w	r3, r1, r3
 8002700:	4413      	add	r3, r2
 8002702:	3342      	adds	r3, #66	; 0x42
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002708:	e073      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	212c      	movs	r1, #44	; 0x2c
 8002710:	fb01 f303 	mul.w	r3, r1, r3
 8002714:	4413      	add	r3, r2
 8002716:	3342      	adds	r3, #66	; 0x42
 8002718:	2202      	movs	r2, #2
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e069      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800271e:	78fb      	ldrb	r3, [r7, #3]
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	212c      	movs	r1, #44	; 0x2c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	3354      	adds	r3, #84	; 0x54
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d109      	bne.n	8002746 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3342      	adds	r3, #66	; 0x42
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
      break;
 8002744:	e055      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002746:	78fb      	ldrb	r3, [r7, #3]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3342      	adds	r3, #66	; 0x42
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
      break;
 8002758:	e04b      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800275a:	78bb      	ldrb	r3, [r7, #2]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d11d      	bne.n	800279c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	212c      	movs	r1, #44	; 0x2c
 8002766:	fb01 f303 	mul.w	r3, r1, r3
 800276a:	4413      	add	r3, r2
 800276c:	3355      	adds	r3, #85	; 0x55
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	212c      	movs	r1, #44	; 0x2c
 800277a:	fb01 f303 	mul.w	r3, r1, r3
 800277e:	4413      	add	r3, r2
 8002780:	3342      	adds	r3, #66	; 0x42
 8002782:	2200      	movs	r2, #0
 8002784:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002786:	e034      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002788:	78fb      	ldrb	r3, [r7, #3]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	212c      	movs	r1, #44	; 0x2c
 800278e:	fb01 f303 	mul.w	r3, r1, r3
 8002792:	4413      	add	r3, r2
 8002794:	3342      	adds	r3, #66	; 0x42
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
      break;
 800279a:	e02a      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	212c      	movs	r1, #44	; 0x2c
 80027a2:	fb01 f303 	mul.w	r3, r1, r3
 80027a6:	4413      	add	r3, r2
 80027a8:	3354      	adds	r3, #84	; 0x54
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d109      	bne.n	80027c4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	212c      	movs	r1, #44	; 0x2c
 80027b6:	fb01 f303 	mul.w	r3, r1, r3
 80027ba:	4413      	add	r3, r2
 80027bc:	3342      	adds	r3, #66	; 0x42
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
      break;
 80027c2:	e016      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80027c4:	78fb      	ldrb	r3, [r7, #3]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	212c      	movs	r1, #44	; 0x2c
 80027ca:	fb01 f303 	mul.w	r3, r1, r3
 80027ce:	4413      	add	r3, r2
 80027d0:	3342      	adds	r3, #66	; 0x42
 80027d2:	2202      	movs	r2, #2
 80027d4:	701a      	strb	r2, [r3, #0]
      break;
 80027d6:	e00c      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80027d8:	78fb      	ldrb	r3, [r7, #3]
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	212c      	movs	r1, #44	; 0x2c
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	3342      	adds	r3, #66	; 0x42
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80027ec:	bf00      	nop
 80027ee:	e000      	b.n	80027f2 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80027f0:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3344      	adds	r3, #68	; 0x44
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	8b3a      	ldrh	r2, [r7, #24]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	202c      	movs	r0, #44	; 0x2c
 800280c:	fb00 f303 	mul.w	r3, r0, r3
 8002810:	440b      	add	r3, r1
 8002812:	334c      	adds	r3, #76	; 0x4c
 8002814:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	212c      	movs	r1, #44	; 0x2c
 800281c:	fb01 f303 	mul.w	r3, r1, r3
 8002820:	4413      	add	r3, r2
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002828:	78fb      	ldrb	r3, [r7, #3]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	212c      	movs	r1, #44	; 0x2c
 800282e:	fb01 f303 	mul.w	r3, r1, r3
 8002832:	4413      	add	r3, r2
 8002834:	3350      	adds	r3, #80	; 0x50
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3339      	adds	r3, #57	; 0x39
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	212c      	movs	r1, #44	; 0x2c
 8002852:	fb01 f303 	mul.w	r3, r1, r3
 8002856:	4413      	add	r3, r2
 8002858:	3361      	adds	r3, #97	; 0x61
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	222c      	movs	r2, #44	; 0x2c
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	3338      	adds	r3, #56	; 0x38
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	4413      	add	r3, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f004 fb0d 	bl	8006e90 <USB_HC_StartXfer>
 8002876:	4603      	mov	r3, r0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f004 f863 	bl	8006962 <USB_GetMode>
 800289c:	4603      	mov	r3, r0
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80f6 	bne.w	8002a90 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 f847 	bl	800693c <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 80ec 	beq.w	8002a8e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f004 f83e 	bl	800693c <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ca:	d104      	bne.n	80028d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80028d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f004 f82e 	bl	800693c <USB_ReadInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ea:	d104      	bne.n	80028f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 f81e 	bl	800693c <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002906:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800290a:	d104      	bne.n	8002916 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002914:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f004 f80e 	bl	800693c <USB_ReadInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d103      	bne.n	8002932 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2202      	movs	r2, #2
 8002930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4618      	mov	r0, r3
 8002938:	f004 f800 	bl	800693c <USB_ReadInterrupts>
 800293c:	4603      	mov	r3, r0
 800293e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002942:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002946:	d11c      	bne.n	8002982 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002950:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10f      	bne.n	8002982 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002962:	2110      	movs	r1, #16
 8002964:	6938      	ldr	r0, [r7, #16]
 8002966:	f003 fef3 	bl	8006750 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800296a:	6938      	ldr	r0, [r7, #16]
 800296c:	f003 ff24 	bl	80067b8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f004 f8b8 	bl	8006aec <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f008 f88f 	bl	800aaa0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f003 ffd8 	bl	800693c <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002992:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002996:	d102      	bne.n	800299e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f001 f801 	bl	80039a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f003 ffca 	bl	800693c <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d106      	bne.n	80029c0 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f008 f858 	bl	800aa68 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2208      	movs	r2, #8
 80029be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f003 ffb9 	bl	800693c <USB_ReadInterrupts>
 80029ca:	4603      	mov	r3, r0
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b10      	cmp	r3, #16
 80029d2:	d101      	bne.n	80029d8 <HAL_HCD_IRQHandler+0x158>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <HAL_HCD_IRQHandler+0x15a>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d012      	beq.n	8002a04 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0210 	bic.w	r2, r2, #16
 80029ec:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 ff04 	bl	80037fc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 0210 	orr.w	r2, r2, #16
 8002a02:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f003 ff97 	bl	800693c <USB_ReadInterrupts>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a18:	d13a      	bne.n	8002a90 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f004 fb2e 	bl	8007080 <USB_HC_ReadInterrupt>
 8002a24:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e025      	b.n	8002a78 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	fa22 f303 	lsr.w	r3, r2, r3
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d018      	beq.n	8002a72 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d106      	bne.n	8002a66 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f897 	bl	8002b92 <HCD_HC_IN_IRQHandler>
 8002a64:	e005      	b.n	8002a72 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fbc3 	bl	80031f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	3301      	adds	r3, #1
 8002a76:	617b      	str	r3, [r7, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d3d4      	bcc.n	8002a2c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8a:	615a      	str	r2, [r3, #20]
 8002a8c:	e000      	b.n	8002a90 <HAL_HCD_IRQHandler+0x210>
      return;
 8002a8e:	bf00      	nop
    }
  }
}
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d101      	bne.n	8002aac <HAL_HCD_Start+0x16>
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	e013      	b.n	8002ad4 <HAL_HCD_Start+0x3e>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 f87a 	bl	8006bb4 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f003 fdd5 	bl	8006674 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_HCD_Stop+0x16>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e00d      	b.n	8002b0e <HAL_HCD_Stop+0x32>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f004 fbcb 	bl	800729a <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f004 f81c 	bl	8006b60 <USB_ResetPort>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	781b      	ldrb	r3, [r3, #0]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f004 f874 	bl	8006c54 <USB_GetCurrentFrame>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f004 f84f 	bl	8006c26 <USB_GetHostSpeed>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002ba8:	78fb      	ldrb	r3, [r7, #3]
 8002baa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d11a      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	3361      	adds	r3, #97	; 0x61
 8002be2:	2206      	movs	r2, #6
 8002be4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fa56 	bl	80070a2 <USB_HC_Halt>
 8002bf6:	e0af      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0e:	d11b      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3361      	adds	r3, #97	; 0x61
 8002c32:	2207      	movs	r2, #7
 8002c34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	4611      	mov	r1, r2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f004 fa2e 	bl	80070a2 <USB_HC_Halt>
 8002c46:	e087      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	015a      	lsls	r2, r3, #5
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d109      	bne.n	8002c72 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	2320      	movs	r3, #32
 8002c6e:	6093      	str	r3, [r2, #8]
 8002c70:	e072      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b08      	cmp	r3, #8
 8002c86:	d11a      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c94:	461a      	mov	r2, r3
 8002c96:	2308      	movs	r3, #8
 8002c98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3361      	adds	r3, #97	; 0x61
 8002ca8:	2205      	movs	r2, #5
 8002caa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f004 f9f3 	bl	80070a2 <USB_HC_Halt>
 8002cbc:	e04c      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd4:	d11b      	bne.n	8002d0e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ce8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3361      	adds	r3, #97	; 0x61
 8002cf8:	2208      	movs	r2, #8
 8002cfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f004 f9cb 	bl	80070a2 <USB_HC_Halt>
 8002d0c:	e024      	b.n	8002d58 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d119      	bne.n	8002d58 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	461a      	mov	r2, r3
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	212c      	movs	r1, #44	; 0x2c
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	4413      	add	r3, r2
 8002d42:	3361      	adds	r3, #97	; 0x61
 8002d44:	2206      	movs	r2, #6
 8002d46:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f004 f9a5 	bl	80070a2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6e:	d112      	bne.n	8002d96 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68fa      	ldr	r2, [r7, #12]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f004 f991 	bl	80070a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	015a      	lsls	r2, r3, #5
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4413      	add	r3, r2
 8002d88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d92:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002d94:	e22c      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	f040 80c1 	bne.w	8002f30 <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3361      	adds	r3, #97	; 0x61
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	212c      	movs	r1, #44	; 0x2c
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	335c      	adds	r3, #92	; 0x5c
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	015a      	lsls	r2, r3, #5
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	4413      	add	r3, r2
 8002dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dde:	461a      	mov	r2, r3
 8002de0:	2301      	movs	r3, #1
 8002de2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	333f      	adds	r3, #63	; 0x3f
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d009      	beq.n	8002e0c <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	333f      	adds	r3, #63	; 0x3f
 8002e06:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d111      	bne.n	8002e30 <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f004 f943 	bl	80070a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	6093      	str	r3, [r2, #8]
 8002e2e:	e03a      	b.n	8002ea6 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	333f      	adds	r3, #63	; 0x3f
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d009      	beq.n	8002e58 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	212c      	movs	r1, #44	; 0x2c
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	4413      	add	r3, r2
 8002e50:	333f      	adds	r3, #63	; 0x3f
 8002e52:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d126      	bne.n	8002ea6 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	0151      	lsls	r1, r2, #5
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	440a      	add	r2, r1
 8002e6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e76:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	212c      	movs	r1, #44	; 0x2c
 8002e7e:	fb01 f303 	mul.w	r3, r1, r3
 8002e82:	4413      	add	r3, r2
 8002e84:	3360      	adds	r3, #96	; 0x60
 8002e86:	2201      	movs	r2, #1
 8002e88:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	b2d9      	uxtb	r1, r3
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	202c      	movs	r0, #44	; 0x2c
 8002e94:	fb00 f303 	mul.w	r3, r0, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3360      	adds	r3, #96	; 0x60
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f007 fe0b 	bl	800aabc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d12b      	bne.n	8002f06 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3348      	adds	r3, #72	; 0x48
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	202c      	movs	r0, #44	; 0x2c
 8002ec4:	fb00 f202 	mul.w	r2, r0, r2
 8002ec8:	440a      	add	r2, r1
 8002eca:	3240      	adds	r2, #64	; 0x40
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 818a 	beq.w	80031f0 <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	212c      	movs	r1, #44	; 0x2c
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3354      	adds	r3, #84	; 0x54
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3354      	adds	r3, #84	; 0x54
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
}
 8002f04:	e174      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	212c      	movs	r1, #44	; 0x2c
 8002f0c:	fb01 f303 	mul.w	r3, r1, r3
 8002f10:	4413      	add	r3, r2
 8002f12:	3354      	adds	r3, #84	; 0x54
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	f083 0301 	eor.w	r3, r3, #1
 8002f1a:	b2d8      	uxtb	r0, r3
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	212c      	movs	r1, #44	; 0x2c
 8002f22:	fb01 f303 	mul.w	r3, r1, r3
 8002f26:	4413      	add	r3, r2
 8002f28:	3354      	adds	r3, #84	; 0x54
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	701a      	strb	r2, [r3, #0]
}
 8002f2e:	e15f      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	f040 80f6 	bne.w	8003134 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	212c      	movs	r1, #44	; 0x2c
 8002f4e:	fb01 f303 	mul.w	r3, r1, r3
 8002f52:	4413      	add	r3, r2
 8002f54:	3361      	adds	r3, #97	; 0x61
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d109      	bne.n	8002f70 <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3360      	adds	r3, #96	; 0x60
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e0c9      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3361      	adds	r3, #97	; 0x61
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b05      	cmp	r3, #5
 8002f82:	d109      	bne.n	8002f98 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	3360      	adds	r3, #96	; 0x60
 8002f92:	2205      	movs	r2, #5
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e0b5      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	212c      	movs	r1, #44	; 0x2c
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	3361      	adds	r3, #97	; 0x61
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d009      	beq.n	8002fc0 <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	212c      	movs	r1, #44	; 0x2c
 8002fb2:	fb01 f303 	mul.w	r3, r1, r3
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3361      	adds	r3, #97	; 0x61
 8002fba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d150      	bne.n	8003062 <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	212c      	movs	r1, #44	; 0x2c
 8002fc6:	fb01 f303 	mul.w	r3, r1, r3
 8002fca:	4413      	add	r3, r2
 8002fcc:	335c      	adds	r3, #92	; 0x5c
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	1c5a      	adds	r2, r3, #1
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	202c      	movs	r0, #44	; 0x2c
 8002fd8:	fb00 f303 	mul.w	r3, r0, r3
 8002fdc:	440b      	add	r3, r1
 8002fde:	335c      	adds	r3, #92	; 0x5c
 8002fe0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	212c      	movs	r1, #44	; 0x2c
 8002fe8:	fb01 f303 	mul.w	r3, r1, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	335c      	adds	r3, #92	; 0x5c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d912      	bls.n	800301c <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	212c      	movs	r1, #44	; 0x2c
 8002ffc:	fb01 f303 	mul.w	r3, r1, r3
 8003000:	4413      	add	r3, r2
 8003002:	335c      	adds	r3, #92	; 0x5c
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	212c      	movs	r1, #44	; 0x2c
 800300e:	fb01 f303 	mul.w	r3, r1, r3
 8003012:	4413      	add	r3, r2
 8003014:	3360      	adds	r3, #96	; 0x60
 8003016:	2204      	movs	r2, #4
 8003018:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800301a:	e073      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	212c      	movs	r1, #44	; 0x2c
 8003022:	fb01 f303 	mul.w	r3, r1, r3
 8003026:	4413      	add	r3, r2
 8003028:	3360      	adds	r3, #96	; 0x60
 800302a:	2202      	movs	r2, #2
 800302c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003044:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800304c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	015a      	lsls	r2, r3, #5
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4413      	add	r3, r2
 8003056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305a:	461a      	mov	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003060:	e050      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3361      	adds	r3, #97	; 0x61
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d122      	bne.n	80030bc <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3360      	adds	r3, #96	; 0x60
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800309e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b4:	461a      	mov	r2, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e023      	b.n	8003104 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80030bc:	687a      	ldr	r2, [r7, #4]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	212c      	movs	r1, #44	; 0x2c
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	4413      	add	r3, r2
 80030c8:	3361      	adds	r3, #97	; 0x61
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b07      	cmp	r3, #7
 80030ce:	d119      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	335c      	adds	r3, #92	; 0x5c
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	202c      	movs	r0, #44	; 0x2c
 80030e8:	fb00 f303 	mul.w	r3, r0, r3
 80030ec:	440b      	add	r3, r1
 80030ee:	335c      	adds	r3, #92	; 0x5c
 80030f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3360      	adds	r3, #96	; 0x60
 8003100:	2204      	movs	r2, #4
 8003102:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003110:	461a      	mov	r2, r3
 8003112:	2302      	movs	r3, #2
 8003114:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b2d9      	uxtb	r1, r3
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	202c      	movs	r0, #44	; 0x2c
 8003120:	fb00 f303 	mul.w	r3, r0, r3
 8003124:	4413      	add	r3, r2
 8003126:	3360      	adds	r3, #96	; 0x60
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f007 fcc5 	bl	800aabc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003132:	e05d      	b.n	80031f0 <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4413      	add	r3, r2
 800313c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0310 	and.w	r3, r3, #16
 8003146:	2b10      	cmp	r3, #16
 8003148:	d152      	bne.n	80031f0 <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	333f      	adds	r3, #63	; 0x3f
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b03      	cmp	r3, #3
 800315c:	d111      	bne.n	8003182 <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	212c      	movs	r1, #44	; 0x2c
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	335c      	adds	r3, #92	; 0x5c
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f003 ff91 	bl	80070a2 <USB_HC_Halt>
 8003180:	e02d      	b.n	80031de <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	333f      	adds	r3, #63	; 0x3f
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	212c      	movs	r1, #44	; 0x2c
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	333f      	adds	r3, #63	; 0x3f
 80031a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d119      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	335c      	adds	r3, #92	; 0x5c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	212c      	movs	r1, #44	; 0x2c
 80031c2:	fb01 f303 	mul.w	r3, r1, r3
 80031c6:	4413      	add	r3, r2
 80031c8:	3361      	adds	r3, #97	; 0x61
 80031ca:	2203      	movs	r2, #3
 80031cc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	4611      	mov	r1, r2
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 ff62 	bl	80070a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	461a      	mov	r2, r3
 80031ec:	2310      	movs	r3, #16
 80031ee:	6093      	str	r3, [r2, #8]
}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	460b      	mov	r3, r1
 8003202:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b04      	cmp	r3, #4
 8003226:	d11a      	bne.n	800325e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003234:	461a      	mov	r2, r3
 8003236:	2304      	movs	r3, #4
 8003238:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	3361      	adds	r3, #97	; 0x61
 8003248:	2206      	movs	r2, #6
 800324a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	4611      	mov	r1, r2
 8003256:	4618      	mov	r0, r3
 8003258:	f003 ff23 	bl	80070a2 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 800325c:	e2ca      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 0320 	and.w	r3, r3, #32
 8003270:	2b20      	cmp	r3, #32
 8003272:	d12e      	bne.n	80032d2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	461a      	mov	r2, r3
 8003282:	2320      	movs	r3, #32
 8003284:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	333d      	adds	r3, #61	; 0x3d
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	f040 82ac 	bne.w	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	333d      	adds	r3, #61	; 0x3d
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	212c      	movs	r1, #44	; 0x2c
 80032b4:	fb01 f303 	mul.w	r3, r1, r3
 80032b8:	4413      	add	r3, r2
 80032ba:	3360      	adds	r3, #96	; 0x60
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	4611      	mov	r1, r2
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fee9 	bl	80070a2 <USB_HC_Halt>
}
 80032d0:	e290      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d112      	bne.n	8003310 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032fc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	4611      	mov	r1, r2
 8003308:	4618      	mov	r0, r3
 800330a:	f003 feca 	bl	80070a2 <USB_HC_Halt>
}
 800330e:	e271      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d140      	bne.n	80033a8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	335c      	adds	r3, #92	; 0x5c
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b40      	cmp	r3, #64	; 0x40
 800334c:	d111      	bne.n	8003372 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333d      	adds	r3, #61	; 0x3d
 800335c:	2201      	movs	r2, #1
 800335e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336c:	461a      	mov	r2, r3
 800336e:	2340      	movs	r3, #64	; 0x40
 8003370:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4413      	add	r3, r2
 800337a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800337e:	461a      	mov	r2, r3
 8003380:	2301      	movs	r3, #1
 8003382:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	212c      	movs	r1, #44	; 0x2c
 800338a:	fb01 f303 	mul.w	r3, r1, r3
 800338e:	4413      	add	r3, r2
 8003390:	3361      	adds	r3, #97	; 0x61
 8003392:	2201      	movs	r2, #1
 8003394:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	b2d2      	uxtb	r2, r2
 800339e:	4611      	mov	r1, r2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f003 fe7e 	bl	80070a2 <USB_HC_Halt>
}
 80033a6:	e225      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d12c      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	212c      	movs	r1, #44	; 0x2c
 80033c4:	fb01 f303 	mul.w	r3, r1, r3
 80033c8:	4413      	add	r3, r2
 80033ca:	3361      	adds	r3, #97	; 0x61
 80033cc:	2204      	movs	r2, #4
 80033ce:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	333d      	adds	r3, #61	; 0x3d
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	212c      	movs	r1, #44	; 0x2c
 80033e8:	fb01 f303 	mul.w	r3, r1, r3
 80033ec:	4413      	add	r3, r2
 80033ee:	335c      	adds	r3, #92	; 0x5c
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f003 fe4f 	bl	80070a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	461a      	mov	r2, r3
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	6093      	str	r3, [r2, #8]
}
 8003416:	e1ed      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b08      	cmp	r3, #8
 800342c:	d11a      	bne.n	8003464 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800343a:	461a      	mov	r2, r3
 800343c:	2308      	movs	r3, #8
 800343e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	212c      	movs	r1, #44	; 0x2c
 8003446:	fb01 f303 	mul.w	r3, r1, r3
 800344a:	4413      	add	r3, r2
 800344c:	3361      	adds	r3, #97	; 0x61
 800344e:	2205      	movs	r2, #5
 8003450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	4611      	mov	r1, r2
 800345c:	4618      	mov	r0, r3
 800345e:	f003 fe20 	bl	80070a2 <USB_HC_Halt>
}
 8003462:	e1c7      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	4413      	add	r3, r2
 800346c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	2b10      	cmp	r3, #16
 8003478:	d123      	bne.n	80034c2 <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	212c      	movs	r1, #44	; 0x2c
 8003480:	fb01 f303 	mul.w	r3, r1, r3
 8003484:	4413      	add	r3, r2
 8003486:	335c      	adds	r3, #92	; 0x5c
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	212c      	movs	r1, #44	; 0x2c
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	4413      	add	r3, r2
 8003498:	3361      	adds	r3, #97	; 0x61
 800349a:	2203      	movs	r2, #3
 800349c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f003 fdfa 	bl	80070a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	015a      	lsls	r2, r3, #5
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	4413      	add	r3, r2
 80034b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ba:	461a      	mov	r2, r3
 80034bc:	2310      	movs	r3, #16
 80034be:	6093      	str	r3, [r2, #8]
}
 80034c0:	e198      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d4:	2b80      	cmp	r3, #128	; 0x80
 80034d6:	d11a      	bne.n	800350e <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	212c      	movs	r1, #44	; 0x2c
 80034de:	fb01 f303 	mul.w	r3, r1, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	3361      	adds	r3, #97	; 0x61
 80034e6:	2206      	movs	r2, #6
 80034e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	b2d2      	uxtb	r2, r2
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f003 fdd4 	bl	80070a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003506:	461a      	mov	r2, r3
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	6093      	str	r3, [r2, #8]
}
 800350c:	e172      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	d11b      	bne.n	800355e <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3361      	adds	r3, #97	; 0x61
 8003534:	2208      	movs	r2, #8
 8003536:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f003 fdad 	bl	80070a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	461a      	mov	r2, r3
 8003556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800355a:	6093      	str	r3, [r2, #8]
}
 800355c:	e14a      	b.n	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b02      	cmp	r3, #2
 8003572:	f040 813f 	bne.w	80037f4 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	212c      	movs	r1, #44	; 0x2c
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	4413      	add	r3, r2
 8003582:	3361      	adds	r3, #97	; 0x61
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d17d      	bne.n	8003686 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	212c      	movs	r1, #44	; 0x2c
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	3360      	adds	r3, #96	; 0x60
 8003598:	2201      	movs	r2, #1
 800359a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	212c      	movs	r1, #44	; 0x2c
 80035a2:	fb01 f303 	mul.w	r3, r1, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	333f      	adds	r3, #63	; 0x3f
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d00a      	beq.n	80035c6 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	212c      	movs	r1, #44	; 0x2c
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	4413      	add	r3, r2
 80035bc:	333f      	adds	r3, #63	; 0x3f
 80035be:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	f040 8100 	bne.w	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d113      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3355      	adds	r3, #85	; 0x55
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	f083 0301 	eor.w	r3, r3, #1
 80035e2:	b2d8      	uxtb	r0, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3355      	adds	r3, #85	; 0x55
 80035f2:	4602      	mov	r2, r0
 80035f4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	f040 80e3 	bne.w	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	334c      	adds	r3, #76	; 0x4c
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80d8 	beq.w	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	212c      	movs	r1, #44	; 0x2c
 800361c:	fb01 f303 	mul.w	r3, r1, r3
 8003620:	4413      	add	r3, r2
 8003622:	334c      	adds	r3, #76	; 0x4c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6879      	ldr	r1, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	202c      	movs	r0, #44	; 0x2c
 800362c:	fb00 f202 	mul.w	r2, r0, r2
 8003630:	440a      	add	r2, r1
 8003632:	3240      	adds	r2, #64	; 0x40
 8003634:	8812      	ldrh	r2, [r2, #0]
 8003636:	4413      	add	r3, r2
 8003638:	3b01      	subs	r3, #1
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	202c      	movs	r0, #44	; 0x2c
 8003640:	fb00 f202 	mul.w	r2, r0, r2
 8003644:	440a      	add	r2, r1
 8003646:	3240      	adds	r2, #64	; 0x40
 8003648:	8812      	ldrh	r2, [r2, #0]
 800364a:	fbb3 f3f2 	udiv	r3, r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80b5 	beq.w	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	212c      	movs	r1, #44	; 0x2c
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	4413      	add	r3, r2
 8003668:	3355      	adds	r3, #85	; 0x55
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2d8      	uxtb	r0, r3
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	212c      	movs	r1, #44	; 0x2c
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	4413      	add	r3, r2
 800367e:	3355      	adds	r3, #85	; 0x55
 8003680:	4602      	mov	r2, r0
 8003682:	701a      	strb	r2, [r3, #0]
 8003684:	e09f      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	3361      	adds	r3, #97	; 0x61
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b03      	cmp	r3, #3
 8003698:	d109      	bne.n	80036ae <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3360      	adds	r3, #96	; 0x60
 80036a8:	2202      	movs	r2, #2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	e08b      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	212c      	movs	r1, #44	; 0x2c
 80036b4:	fb01 f303 	mul.w	r3, r1, r3
 80036b8:	4413      	add	r3, r2
 80036ba:	3361      	adds	r3, #97	; 0x61
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d109      	bne.n	80036d6 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	212c      	movs	r1, #44	; 0x2c
 80036c8:	fb01 f303 	mul.w	r3, r1, r3
 80036cc:	4413      	add	r3, r2
 80036ce:	3360      	adds	r3, #96	; 0x60
 80036d0:	2202      	movs	r2, #2
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e077      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	212c      	movs	r1, #44	; 0x2c
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	3361      	adds	r3, #97	; 0x61
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b05      	cmp	r3, #5
 80036e8:	d109      	bne.n	80036fe <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	212c      	movs	r1, #44	; 0x2c
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	4413      	add	r3, r2
 80036f6:	3360      	adds	r3, #96	; 0x60
 80036f8:	2205      	movs	r2, #5
 80036fa:	701a      	strb	r2, [r3, #0]
 80036fc:	e063      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	3361      	adds	r3, #97	; 0x61
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b06      	cmp	r3, #6
 8003710:	d009      	beq.n	8003726 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	212c      	movs	r1, #44	; 0x2c
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	4413      	add	r3, r2
 800371e:	3361      	adds	r3, #97	; 0x61
 8003720:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003722:	2b08      	cmp	r3, #8
 8003724:	d14f      	bne.n	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	212c      	movs	r1, #44	; 0x2c
 800372c:	fb01 f303 	mul.w	r3, r1, r3
 8003730:	4413      	add	r3, r2
 8003732:	335c      	adds	r3, #92	; 0x5c
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	202c      	movs	r0, #44	; 0x2c
 800373e:	fb00 f303 	mul.w	r3, r0, r3
 8003742:	440b      	add	r3, r1
 8003744:	335c      	adds	r3, #92	; 0x5c
 8003746:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	335c      	adds	r3, #92	; 0x5c
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b02      	cmp	r3, #2
 800375a:	d912      	bls.n	8003782 <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	212c      	movs	r1, #44	; 0x2c
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	4413      	add	r3, r2
 8003768:	335c      	adds	r3, #92	; 0x5c
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	3360      	adds	r3, #96	; 0x60
 800377c:	2204      	movs	r2, #4
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	e021      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	3360      	adds	r3, #96	; 0x60
 8003790:	2202      	movs	r2, #2
 8003792:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037aa:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037b2:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	2302      	movs	r3, #2
 80037d6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	b2d9      	uxtb	r1, r3
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	202c      	movs	r0, #44	; 0x2c
 80037e2:	fb00 f303 	mul.w	r3, r0, r3
 80037e6:	4413      	add	r3, r2
 80037e8:	3360      	adds	r3, #96	; 0x60
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f007 f964 	bl	800aabc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80037f4:	bf00      	nop
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	0c5b      	lsrs	r3, r3, #17
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003830:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d004      	beq.n	8003842 <HCD_RXQLVL_IRQHandler+0x46>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b05      	cmp	r3, #5
 800383c:	f000 80a9 	beq.w	8003992 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003840:	e0aa      	b.n	8003998 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a6 	beq.w	8003996 <HCD_RXQLVL_IRQHandler+0x19a>
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	fb01 f303 	mul.w	r3, r1, r3
 8003854:	4413      	add	r3, r2
 8003856:	3344      	adds	r3, #68	; 0x44
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 809b 	beq.w	8003996 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	212c      	movs	r1, #44	; 0x2c
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	4413      	add	r3, r2
 800386c:	3350      	adds	r3, #80	; 0x50
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	441a      	add	r2, r3
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	202c      	movs	r0, #44	; 0x2c
 800387a:	fb00 f303 	mul.w	r3, r0, r3
 800387e:	440b      	add	r3, r1
 8003880:	334c      	adds	r3, #76	; 0x4c
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d87a      	bhi.n	800397e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	212c      	movs	r1, #44	; 0x2c
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	4413      	add	r3, r2
 8003898:	3344      	adds	r3, #68	; 0x44
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	b292      	uxth	r2, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f002 fff3 	bl	800688c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	212c      	movs	r1, #44	; 0x2c
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	4413      	add	r3, r2
 80038b2:	3344      	adds	r3, #68	; 0x44
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	441a      	add	r2, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	202c      	movs	r0, #44	; 0x2c
 80038c0:	fb00 f303 	mul.w	r3, r0, r3
 80038c4:	440b      	add	r3, r1
 80038c6:	3344      	adds	r3, #68	; 0x44
 80038c8:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	3350      	adds	r3, #80	; 0x50
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	441a      	add	r2, r3
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	202c      	movs	r0, #44	; 0x2c
 80038e4:	fb00 f303 	mul.w	r3, r0, r3
 80038e8:	440b      	add	r3, r1
 80038ea:	3350      	adds	r3, #80	; 0x50
 80038ec:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	0cdb      	lsrs	r3, r3, #19
 80038fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003902:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	212c      	movs	r1, #44	; 0x2c
 800390a:	fb01 f303 	mul.w	r3, r1, r3
 800390e:	4413      	add	r3, r2
 8003910:	3340      	adds	r3, #64	; 0x40
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4293      	cmp	r3, r2
 800391a:	d13c      	bne.n	8003996 <HCD_RXQLVL_IRQHandler+0x19a>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d039      	beq.n	8003996 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	4413      	add	r3, r2
 800392a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003938:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003940:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3354      	adds	r3, #84	; 0x54
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f083 0301 	eor.w	r3, r3, #1
 8003968:	b2d8      	uxtb	r0, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	212c      	movs	r1, #44	; 0x2c
 8003970:	fb01 f303 	mul.w	r3, r1, r3
 8003974:	4413      	add	r3, r2
 8003976:	3354      	adds	r3, #84	; 0x54
 8003978:	4602      	mov	r2, r0
 800397a:	701a      	strb	r2, [r3, #0]
      break;
 800397c:	e00b      	b.n	8003996 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	212c      	movs	r1, #44	; 0x2c
 8003984:	fb01 f303 	mul.w	r3, r1, r3
 8003988:	4413      	add	r3, r2
 800398a:	3360      	adds	r3, #96	; 0x60
 800398c:	2204      	movs	r2, #4
 800398e:	701a      	strb	r2, [r3, #0]
      break;
 8003990:	e001      	b.n	8003996 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003996:	bf00      	nop
  }
}
 8003998:	bf00      	nop
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80039cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d10b      	bne.n	80039f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d102      	bne.n	80039e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f007 f84e 	bl	800aa84 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f043 0302 	orr.w	r3, r3, #2
 80039ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d132      	bne.n	8003a60 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d126      	bne.n	8003a5a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d113      	bne.n	8003a3c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003a1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a1e:	d106      	bne.n	8003a2e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2102      	movs	r1, #2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f003 f860 	bl	8006aec <USB_InitFSLSPClkSel>
 8003a2c:	e011      	b.n	8003a52 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2101      	movs	r1, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f003 f859 	bl	8006aec <USB_InitFSLSPClkSel>
 8003a3a:	e00a      	b.n	8003a52 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d106      	bne.n	8003a52 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003a50:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f007 f840 	bl	800aad8 <HAL_HCD_PortEnabled_Callback>
 8003a58:	e002      	b.n	8003a60 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f007 f84a 	bl	800aaf4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d103      	bne.n	8003a72 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	f043 0320 	orr.w	r3, r3, #32
 8003a70:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a78:	461a      	mov	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	6013      	str	r3, [r2, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e081      	b.n	8003b9c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d106      	bne.n	8003ab2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7fd fb0d 	bl	80010cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2224      	movs	r2, #36	; 0x24
 8003ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	e006      	b.n	8003b0e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	689a      	ldr	r2, [r3, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d104      	bne.n	8003b20 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b32:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68da      	ldr	r2, [r3, #12]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	699b      	ldr	r3, [r3, #24]
 8003b54:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69d9      	ldr	r1, [r3, #28]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0201 	orr.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d138      	bne.n	8003c2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e032      	b.n	8003c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2224      	movs	r2, #36	; 0x24
 8003bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0201 	bic.w	r2, r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b085      	sub	sp, #20
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d139      	bne.n	8003cc4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	e033      	b.n	8003cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2224      	movs	r2, #36	; 0x24
 8003c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0201 	bic.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e000      	b.n	8003cc6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc4:	2302      	movs	r3, #2
  }
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce2:	6013      	str	r3, [r2, #0]
}
 8003ce4:	bf00      	nop
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	40007000 	.word	0x40007000

08003cf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <HAL_PWREx_GetVoltageRange+0x18>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	d130      	bne.n	8003d82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d2c:	d038      	beq.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d36:	4a1e      	ldr	r2, [pc, #120]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d3e:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2232      	movs	r2, #50	; 0x32
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	4a1b      	ldr	r2, [pc, #108]	; (8003db8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4e:	0c9b      	lsrs	r3, r3, #18
 8003d50:	3301      	adds	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d54:	e002      	b.n	8003d5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d68:	d102      	bne.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f2      	bne.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d7c:	d110      	bne.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e00f      	b.n	8003da2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8e:	d007      	beq.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d90:	4b07      	ldr	r3, [pc, #28]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d98:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3714      	adds	r7, #20
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000
 8003db4:	20000010 	.word	0x20000010
 8003db8:	431bde83 	.word	0x431bde83

08003dbc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003dc0:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003dc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dca:	6053      	str	r3, [r2, #4]
}
 8003dcc:	bf00      	nop
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40007000 	.word	0x40007000

08003ddc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003de0:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003de6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dea:	6053      	str	r3, [r2, #4]
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	40007000 	.word	0x40007000

08003dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d102      	bne.n	8003e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f000 bc08 	b.w	8004620 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e10:	4b96      	ldr	r3, [pc, #600]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1a:	4b94      	ldr	r3, [pc, #592]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 80e4 	beq.w	8003ffa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d007      	beq.n	8003e48 <HAL_RCC_OscConfig+0x4c>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f040 808b 	bne.w	8003f56 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	f040 8087 	bne.w	8003f56 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e48:	4b88      	ldr	r3, [pc, #544]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_OscConfig+0x64>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e3df      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1a      	ldr	r2, [r3, #32]
 8003e64:	4b81      	ldr	r3, [pc, #516]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0308 	and.w	r3, r3, #8
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d004      	beq.n	8003e7a <HAL_RCC_OscConfig+0x7e>
 8003e70:	4b7e      	ldr	r3, [pc, #504]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e78:	e005      	b.n	8003e86 <HAL_RCC_OscConfig+0x8a>
 8003e7a:	4b7c      	ldr	r3, [pc, #496]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d223      	bcs.n	8003ed2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fd92 	bl	80049b8 <RCC_SetFlashLatencyFromMSIRange>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e3c0      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a72      	ldr	r2, [pc, #456]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ea4:	f043 0308 	orr.w	r3, r3, #8
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b70      	ldr	r3, [pc, #448]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	496d      	ldr	r1, [pc, #436]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebc:	4b6b      	ldr	r3, [pc, #428]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69db      	ldr	r3, [r3, #28]
 8003ec8:	021b      	lsls	r3, r3, #8
 8003eca:	4968      	ldr	r1, [pc, #416]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
 8003ed0:	e025      	b.n	8003f1e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed2:	4b66      	ldr	r3, [pc, #408]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a65      	ldr	r2, [pc, #404]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b63      	ldr	r3, [pc, #396]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4960      	ldr	r1, [pc, #384]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef0:	4b5e      	ldr	r3, [pc, #376]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	495b      	ldr	r1, [pc, #364]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d109      	bne.n	8003f1e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fd52 	bl	80049b8 <RCC_SetFlashLatencyFromMSIRange>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e380      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f1e:	f000 fc87 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8003f22:	4602      	mov	r2, r0
 8003f24:	4b51      	ldr	r3, [pc, #324]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	091b      	lsrs	r3, r3, #4
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	4950      	ldr	r1, [pc, #320]	; (8004070 <HAL_RCC_OscConfig+0x274>)
 8003f30:	5ccb      	ldrb	r3, [r1, r3]
 8003f32:	f003 031f 	and.w	r3, r3, #31
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_RCC_OscConfig+0x278>)
 8003f3c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f3e:	4b4e      	ldr	r3, [pc, #312]	; (8004078 <HAL_RCC_OscConfig+0x27c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fd fcfa 	bl	800193c <HAL_InitTick>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f4c:	7bfb      	ldrb	r3, [r7, #15]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d052      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	e364      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d032      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f5e:	4b43      	ldr	r3, [pc, #268]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a42      	ldr	r2, [pc, #264]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6a:	f7fd fd37 	bl	80019dc <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f72:	f7fd fd33 	bl	80019dc <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e34d      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f84:	4b39      	ldr	r3, [pc, #228]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f90:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a35      	ldr	r2, [pc, #212]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f96:	f043 0308 	orr.w	r3, r3, #8
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4b33      	ldr	r3, [pc, #204]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	4930      	ldr	r1, [pc, #192]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fae:	4b2f      	ldr	r3, [pc, #188]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	021b      	lsls	r3, r3, #8
 8003fbc:	492b      	ldr	r1, [pc, #172]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
 8003fc2:	e01a      	b.n	8003ffa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc4:	4b29      	ldr	r3, [pc, #164]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a28      	ldr	r2, [pc, #160]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd fd04 	bl	80019dc <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd8:	f7fd fd00 	bl	80019dc <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e31a      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fea:	4b20      	ldr	r3, [pc, #128]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1f0      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x1dc>
 8003ff6:	e000      	b.n	8003ffa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ff8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d073      	beq.n	80040ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d005      	beq.n	8004018 <HAL_RCC_OscConfig+0x21c>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b0c      	cmp	r3, #12
 8004010:	d10e      	bne.n	8004030 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b03      	cmp	r3, #3
 8004016:	d10b      	bne.n	8004030 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <HAL_RCC_OscConfig+0x270>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d063      	beq.n	80040ec <HAL_RCC_OscConfig+0x2f0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d15f      	bne.n	80040ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e2f7      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004038:	d106      	bne.n	8004048 <HAL_RCC_OscConfig+0x24c>
 800403a:	4b0c      	ldr	r3, [pc, #48]	; (800406c <HAL_RCC_OscConfig+0x270>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a0b      	ldr	r2, [pc, #44]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8004040:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	e025      	b.n	8004094 <HAL_RCC_OscConfig+0x298>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004050:	d114      	bne.n	800407c <HAL_RCC_OscConfig+0x280>
 8004052:	4b06      	ldr	r3, [pc, #24]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a05      	ldr	r2, [pc, #20]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8004058:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b03      	ldr	r3, [pc, #12]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a02      	ldr	r2, [pc, #8]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e013      	b.n	8004094 <HAL_RCC_OscConfig+0x298>
 800406c:	40021000 	.word	0x40021000
 8004070:	0800d850 	.word	0x0800d850
 8004074:	20000010 	.word	0x20000010
 8004078:	20000014 	.word	0x20000014
 800407c:	4ba0      	ldr	r3, [pc, #640]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a9f      	ldr	r2, [pc, #636]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b9d      	ldr	r3, [pc, #628]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a9c      	ldr	r2, [pc, #624]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800408e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409c:	f7fd fc9e 	bl	80019dc <HAL_GetTick>
 80040a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040a2:	e008      	b.n	80040b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a4:	f7fd fc9a 	bl	80019dc <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b64      	cmp	r3, #100	; 0x64
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e2b4      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040b6:	4b92      	ldr	r3, [pc, #584]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0f0      	beq.n	80040a4 <HAL_RCC_OscConfig+0x2a8>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fd fc8a 	bl	80019dc <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040cc:	f7fd fc86 	bl	80019dc <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b64      	cmp	r3, #100	; 0x64
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e2a0      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040de:	4b88      	ldr	r3, [pc, #544]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x2d0>
 80040ea:	e000      	b.n	80040ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d060      	beq.n	80041bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d005      	beq.n	800410c <HAL_RCC_OscConfig+0x310>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d119      	bne.n	800413a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b02      	cmp	r3, #2
 800410a:	d116      	bne.n	800413a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800410c:	4b7c      	ldr	r3, [pc, #496]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_OscConfig+0x328>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e27d      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004124:	4b76      	ldr	r3, [pc, #472]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	061b      	lsls	r3, r3, #24
 8004132:	4973      	ldr	r1, [pc, #460]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004138:	e040      	b.n	80041bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d023      	beq.n	800418a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004142:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6e      	ldr	r2, [pc, #440]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fd fc45 	bl	80019dc <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004156:	f7fd fc41 	bl	80019dc <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e25b      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004168:	4b65      	ldr	r3, [pc, #404]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	4b62      	ldr	r3, [pc, #392]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	061b      	lsls	r3, r3, #24
 8004182:	495f      	ldr	r1, [pc, #380]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004184:	4313      	orrs	r3, r2
 8004186:	604b      	str	r3, [r1, #4]
 8004188:	e018      	b.n	80041bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418a:	4b5d      	ldr	r3, [pc, #372]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a5c      	ldr	r2, [pc, #368]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fd fc21 	bl	80019dc <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800419e:	f7fd fc1d 	bl	80019dc <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e237      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b0:	4b53      	ldr	r3, [pc, #332]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d03c      	beq.n	8004242 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01c      	beq.n	800420a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d0:	4b4b      	ldr	r3, [pc, #300]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80041d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041d6:	4a4a      	ldr	r2, [pc, #296]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80041d8:	f043 0301 	orr.w	r3, r3, #1
 80041dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e0:	f7fd fbfc 	bl	80019dc <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041e8:	f7fd fbf8 	bl	80019dc <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e212      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fa:	4b41      	ldr	r3, [pc, #260]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80041fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ef      	beq.n	80041e8 <HAL_RCC_OscConfig+0x3ec>
 8004208:	e01b      	b.n	8004242 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420a:	4b3d      	ldr	r3, [pc, #244]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800420c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004210:	4a3b      	ldr	r2, [pc, #236]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004212:	f023 0301 	bic.w	r3, r3, #1
 8004216:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fd fbdf 	bl	80019dc <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fd fbdb 	bl	80019dc <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1f5      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004234:	4b32      	ldr	r3, [pc, #200]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004236:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1ef      	bne.n	8004222 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80a6 	beq.w	800439c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004250:	2300      	movs	r3, #0
 8004252:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004254:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10d      	bne.n	800427c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b27      	ldr	r3, [pc, #156]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004264:	4a26      	ldr	r2, [pc, #152]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6593      	str	r3, [r2, #88]	; 0x58
 800426c:	4b24      	ldr	r3, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 800426e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004278:	2301      	movs	r3, #1
 800427a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800427c:	4b21      	ldr	r3, [pc, #132]	; (8004304 <HAL_RCC_OscConfig+0x508>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d118      	bne.n	80042ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004288:	4b1e      	ldr	r3, [pc, #120]	; (8004304 <HAL_RCC_OscConfig+0x508>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <HAL_RCC_OscConfig+0x508>)
 800428e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004292:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004294:	f7fd fba2 	bl	80019dc <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800429c:	f7fd fb9e 	bl	80019dc <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e1b8      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042ae:	4b15      	ldr	r3, [pc, #84]	; (8004304 <HAL_RCC_OscConfig+0x508>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0f0      	beq.n	800429c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d108      	bne.n	80042d4 <HAL_RCC_OscConfig+0x4d8>
 80042c2:	4b0f      	ldr	r3, [pc, #60]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80042c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c8:	4a0d      	ldr	r2, [pc, #52]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d2:	e029      	b.n	8004328 <HAL_RCC_OscConfig+0x52c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b05      	cmp	r3, #5
 80042da:	d115      	bne.n	8004308 <HAL_RCC_OscConfig+0x50c>
 80042dc:	4b08      	ldr	r3, [pc, #32]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80042de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e2:	4a07      	ldr	r2, [pc, #28]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	4a03      	ldr	r2, [pc, #12]	; (8004300 <HAL_RCC_OscConfig+0x504>)
 80042f4:	f043 0301 	orr.w	r3, r3, #1
 80042f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042fc:	e014      	b.n	8004328 <HAL_RCC_OscConfig+0x52c>
 80042fe:	bf00      	nop
 8004300:	40021000 	.word	0x40021000
 8004304:	40007000 	.word	0x40007000
 8004308:	4b9d      	ldr	r3, [pc, #628]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 800430a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430e:	4a9c      	ldr	r2, [pc, #624]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004310:	f023 0301 	bic.w	r3, r3, #1
 8004314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004318:	4b99      	ldr	r3, [pc, #612]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	4a98      	ldr	r2, [pc, #608]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004320:	f023 0304 	bic.w	r3, r3, #4
 8004324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d016      	beq.n	800435e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fb54 	bl	80019dc <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004336:	e00a      	b.n	800434e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004338:	f7fd fb50 	bl	80019dc <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	f241 3288 	movw	r2, #5000	; 0x1388
 8004346:	4293      	cmp	r3, r2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e168      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800434e:	4b8c      	ldr	r3, [pc, #560]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ed      	beq.n	8004338 <HAL_RCC_OscConfig+0x53c>
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800435e:	f7fd fb3d 	bl	80019dc <HAL_GetTick>
 8004362:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004364:	e00a      	b.n	800437c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fd fb39 	bl	80019dc <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f241 3288 	movw	r2, #5000	; 0x1388
 8004374:	4293      	cmp	r3, r2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e151      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800437c:	4b80      	ldr	r3, [pc, #512]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 800437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1ed      	bne.n	8004366 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438a:	7ffb      	ldrb	r3, [r7, #31]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d105      	bne.n	800439c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004390:	4b7b      	ldr	r3, [pc, #492]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004394:	4a7a      	ldr	r2, [pc, #488]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0320 	and.w	r3, r3, #32
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d03c      	beq.n	8004422 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01c      	beq.n	80043ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80043b0:	4b73      	ldr	r3, [pc, #460]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80043b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043b6:	4a72      	ldr	r2, [pc, #456]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c0:	f7fd fb0c 	bl	80019dc <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c8:	f7fd fb08 	bl	80019dc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e122      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043da:	4b69      	ldr	r3, [pc, #420]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80043dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0ef      	beq.n	80043c8 <HAL_RCC_OscConfig+0x5cc>
 80043e8:	e01b      	b.n	8004422 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043ea:	4b65      	ldr	r3, [pc, #404]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80043ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043f0:	4a63      	ldr	r2, [pc, #396]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fa:	f7fd faef 	bl	80019dc <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004402:	f7fd faeb 	bl	80019dc <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e105      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004414:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ef      	bne.n	8004402 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 80f9 	beq.w	800461e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	2b02      	cmp	r3, #2
 8004432:	f040 80cf 	bne.w	80045d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004436:	4b52      	ldr	r3, [pc, #328]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	429a      	cmp	r2, r3
 8004448:	d12c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004454:	3b01      	subs	r3, #1
 8004456:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d123      	bne.n	80044a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004466:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d11b      	bne.n	80044a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004476:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d113      	bne.n	80044a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d109      	bne.n	80044a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d071      	beq.n	8004588 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	2b0c      	cmp	r3, #12
 80044a8:	d068      	beq.n	800457c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044aa:	4b35      	ldr	r3, [pc, #212]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d105      	bne.n	80044c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044b6:	4b32      	ldr	r3, [pc, #200]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e0ac      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044c6:	4b2e      	ldr	r3, [pc, #184]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a2d      	ldr	r2, [pc, #180]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80044cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044d2:	f7fd fa83 	bl	80019dc <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044da:	f7fd fa7f 	bl	80019dc <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e099      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ec:	4b24      	ldr	r3, [pc, #144]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <HAL_RCC_OscConfig+0x788>)
 80044fe:	4013      	ands	r3, r2
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004508:	3a01      	subs	r2, #1
 800450a:	0112      	lsls	r2, r2, #4
 800450c:	4311      	orrs	r1, r2
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004512:	0212      	lsls	r2, r2, #8
 8004514:	4311      	orrs	r1, r2
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800451a:	0852      	lsrs	r2, r2, #1
 800451c:	3a01      	subs	r2, #1
 800451e:	0552      	lsls	r2, r2, #21
 8004520:	4311      	orrs	r1, r2
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004526:	0852      	lsrs	r2, r2, #1
 8004528:	3a01      	subs	r2, #1
 800452a:	0652      	lsls	r2, r2, #25
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004532:	06d2      	lsls	r2, r2, #27
 8004534:	430a      	orrs	r2, r1
 8004536:	4912      	ldr	r1, [pc, #72]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004538:	4313      	orrs	r3, r2
 800453a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a0f      	ldr	r2, [pc, #60]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004542:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004546:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004548:	4b0d      	ldr	r3, [pc, #52]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	4a0c      	ldr	r2, [pc, #48]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 800454e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004552:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004554:	f7fd fa42 	bl	80019dc <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fa3e 	bl	80019dc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e058      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800456e:	4b04      	ldr	r3, [pc, #16]	; (8004580 <HAL_RCC_OscConfig+0x784>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800457a:	e050      	b.n	800461e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e04f      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
 8004580:	40021000 	.word	0x40021000
 8004584:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004588:	4b27      	ldr	r3, [pc, #156]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d144      	bne.n	800461e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004594:	4b24      	ldr	r3, [pc, #144]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a0:	4b21      	ldr	r3, [pc, #132]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a20      	ldr	r2, [pc, #128]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 80045a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ac:	f7fd fa16 	bl	80019dc <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fa12 	bl	80019dc <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e02c      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x7b8>
 80045d2:	e024      	b.n	800461e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d01f      	beq.n	800461a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 80045e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e6:	f7fd f9f9 	bl	80019dc <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045ec:	e008      	b.n	8004600 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ee:	f7fd f9f5 	bl	80019dc <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d901      	bls.n	8004600 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80045fc:	2303      	movs	r3, #3
 80045fe:	e00f      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d1f0      	bne.n	80045ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	4905      	ldr	r1, [pc, #20]	; (8004628 <HAL_RCC_OscConfig+0x82c>)
 8004612:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_OscConfig+0x830>)
 8004614:	4013      	ands	r3, r2
 8004616:	60cb      	str	r3, [r1, #12]
 8004618:	e001      	b.n	800461e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000
 800462c:	feeefffc 	.word	0xfeeefffc

08004630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0e7      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004644:	4b75      	ldr	r3, [pc, #468]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0307 	and.w	r3, r3, #7
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	429a      	cmp	r2, r3
 8004650:	d910      	bls.n	8004674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 0207 	bic.w	r2, r3, #7
 800465a:	4970      	ldr	r1, [pc, #448]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	4313      	orrs	r3, r2
 8004660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b6e      	ldr	r3, [pc, #440]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0cf      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d010      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	4b66      	ldr	r3, [pc, #408]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	429a      	cmp	r2, r3
 800468e:	d908      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004690:	4b63      	ldr	r3, [pc, #396]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4960      	ldr	r1, [pc, #384]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d04c      	beq.n	8004748 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d107      	bne.n	80046c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046b6:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0a6      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d107      	bne.n	80046de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046ce:	4b54      	ldr	r3, [pc, #336]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d115      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e09a      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d107      	bne.n	80046f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046e6:	4b4e      	ldr	r3, [pc, #312]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e08e      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046f6:	4b4a      	ldr	r3, [pc, #296]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e086      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004706:	4b46      	ldr	r3, [pc, #280]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f023 0203 	bic.w	r2, r3, #3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	4943      	ldr	r1, [pc, #268]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004714:	4313      	orrs	r3, r2
 8004716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fd f960 	bl	80019dc <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800471e:	e00a      	b.n	8004736 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fd f95c 	bl	80019dc <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e06e      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004736:	4b3a      	ldr	r3, [pc, #232]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 020c 	and.w	r2, r3, #12
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	429a      	cmp	r2, r3
 8004746:	d1eb      	bne.n	8004720 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	4b31      	ldr	r3, [pc, #196]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004760:	429a      	cmp	r2, r3
 8004762:	d208      	bcs.n	8004776 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004764:	4b2e      	ldr	r3, [pc, #184]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	492b      	ldr	r1, [pc, #172]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004776:	4b29      	ldr	r3, [pc, #164]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0307 	and.w	r3, r3, #7
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d210      	bcs.n	80047a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004784:	4b25      	ldr	r3, [pc, #148]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f023 0207 	bic.w	r2, r3, #7
 800478c:	4923      	ldr	r1, [pc, #140]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	4313      	orrs	r3, r2
 8004792:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <HAL_RCC_ClockConfig+0x1ec>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0307 	and.w	r3, r3, #7
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d001      	beq.n	80047a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e036      	b.n	8004814 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b2:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	4918      	ldr	r1, [pc, #96]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d009      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d0:	4b13      	ldr	r3, [pc, #76]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	4910      	ldr	r1, [pc, #64]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047e4:	f000 f824 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80047e8:	4602      	mov	r2, r0
 80047ea:	4b0d      	ldr	r3, [pc, #52]	; (8004820 <HAL_RCC_ClockConfig+0x1f0>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	091b      	lsrs	r3, r3, #4
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	490b      	ldr	r1, [pc, #44]	; (8004824 <HAL_RCC_ClockConfig+0x1f4>)
 80047f6:	5ccb      	ldrb	r3, [r1, r3]
 80047f8:	f003 031f 	and.w	r3, r3, #31
 80047fc:	fa22 f303 	lsr.w	r3, r2, r3
 8004800:	4a09      	ldr	r2, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1f8>)
 8004802:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004804:	4b09      	ldr	r3, [pc, #36]	; (800482c <HAL_RCC_ClockConfig+0x1fc>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f7fd f897 	bl	800193c <HAL_InitTick>
 800480e:	4603      	mov	r3, r0
 8004810:	72fb      	strb	r3, [r7, #11]

  return status;
 8004812:	7afb      	ldrb	r3, [r7, #11]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40022000 	.word	0x40022000
 8004820:	40021000 	.word	0x40021000
 8004824:	0800d850 	.word	0x0800d850
 8004828:	20000010 	.word	0x20000010
 800482c:	20000014 	.word	0x20000014

08004830 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004830:	b480      	push	{r7}
 8004832:	b089      	sub	sp, #36	; 0x24
 8004834:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800483e:	4b3e      	ldr	r3, [pc, #248]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004848:	4b3b      	ldr	r3, [pc, #236]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <HAL_RCC_GetSysClockFreq+0x34>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d121      	bne.n	80048a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d11e      	bne.n	80048a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004864:	4b34      	ldr	r3, [pc, #208]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0308 	and.w	r3, r3, #8
 800486c:	2b00      	cmp	r3, #0
 800486e:	d107      	bne.n	8004880 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004870:	4b31      	ldr	r3, [pc, #196]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004876:	0a1b      	lsrs	r3, r3, #8
 8004878:	f003 030f 	and.w	r3, r3, #15
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e005      	b.n	800488c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004880:	4b2d      	ldr	r3, [pc, #180]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <HAL_RCC_GetSysClockFreq+0x10c>)
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004894:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10d      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048a0:	e00a      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d102      	bne.n	80048ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048a8:	4b25      	ldr	r3, [pc, #148]	; (8004940 <HAL_RCC_GetSysClockFreq+0x110>)
 80048aa:	61bb      	str	r3, [r7, #24]
 80048ac:	e004      	b.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d101      	bne.n	80048b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048b4:	4b23      	ldr	r3, [pc, #140]	; (8004944 <HAL_RCC_GetSysClockFreq+0x114>)
 80048b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b0c      	cmp	r3, #12
 80048bc:	d134      	bne.n	8004928 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d003      	beq.n	80048d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d003      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0xac>
 80048d4:	e005      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048d6:	4b1a      	ldr	r3, [pc, #104]	; (8004940 <HAL_RCC_GetSysClockFreq+0x110>)
 80048d8:	617b      	str	r3, [r7, #20]
      break;
 80048da:	e005      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_GetSysClockFreq+0x114>)
 80048de:	617b      	str	r3, [r7, #20]
      break;
 80048e0:	e002      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	617b      	str	r3, [r7, #20]
      break;
 80048e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 0307 	and.w	r3, r3, #7
 80048f2:	3301      	adds	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004900:	697a      	ldr	r2, [r7, #20]
 8004902:	fb03 f202 	mul.w	r2, r3, r2
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCC_GetSysClockFreq+0x108>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	0e5b      	lsrs	r3, r3, #25
 8004914:	f003 0303 	and.w	r3, r3, #3
 8004918:	3301      	adds	r3, #1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004928:	69bb      	ldr	r3, [r7, #24]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3724      	adds	r7, #36	; 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	0800d868 	.word	0x0800d868
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000010 	.word	0x20000010

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b06      	ldr	r3, [pc, #24]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4904      	ldr	r1, [pc, #16]	; (8004988 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	f003 031f 	and.w	r3, r3, #31
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004980:	4618      	mov	r0, r3
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40021000 	.word	0x40021000
 8004988:	0800d860 	.word	0x0800d860

0800498c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004990:	f7ff ffda 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004994:	4602      	mov	r2, r0
 8004996:	4b06      	ldr	r3, [pc, #24]	; (80049b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	0adb      	lsrs	r3, r3, #11
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	4904      	ldr	r1, [pc, #16]	; (80049b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049a2:	5ccb      	ldrb	r3, [r1, r3]
 80049a4:	f003 031f 	and.w	r3, r3, #31
 80049a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	0800d860 	.word	0x0800d860

080049b8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049c4:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049d0:	f7ff f990 	bl	8003cf4 <HAL_PWREx_GetVoltageRange>
 80049d4:	6178      	str	r0, [r7, #20]
 80049d6:	e014      	b.n	8004a02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049d8:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049dc:	4a24      	ldr	r2, [pc, #144]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e2:	6593      	str	r3, [r2, #88]	; 0x58
 80049e4:	4b22      	ldr	r3, [pc, #136]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049f0:	f7ff f980 	bl	8003cf4 <HAL_PWREx_GetVoltageRange>
 80049f4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fa:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a08:	d10b      	bne.n	8004a22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b80      	cmp	r3, #128	; 0x80
 8004a0e:	d919      	bls.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2ba0      	cmp	r3, #160	; 0xa0
 8004a14:	d902      	bls.n	8004a1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a16:	2302      	movs	r3, #2
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	e013      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e010      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b80      	cmp	r3, #128	; 0x80
 8004a26:	d902      	bls.n	8004a2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a28:	2303      	movs	r3, #3
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	e00a      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b80      	cmp	r3, #128	; 0x80
 8004a32:	d102      	bne.n	8004a3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a34:	2302      	movs	r3, #2
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e004      	b.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b70      	cmp	r3, #112	; 0x70
 8004a3e:	d101      	bne.n	8004a44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a40:	2301      	movs	r3, #1
 8004a42:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a44:	4b0b      	ldr	r3, [pc, #44]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f023 0207 	bic.w	r2, r3, #7
 8004a4c:	4909      	ldr	r1, [pc, #36]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a54:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d001      	beq.n	8004a66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e000      	b.n	8004a68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40022000 	.word	0x40022000

08004a78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a80:	2300      	movs	r3, #0
 8004a82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a84:	2300      	movs	r3, #0
 8004a86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d041      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a9c:	d02a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004aa2:	d824      	bhi.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa8:	d008      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004aaa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aae:	d81e      	bhi.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ab4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ab8:	d010      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004aba:	e018      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004abc:	4b86      	ldr	r3, [pc, #536]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4a85      	ldr	r2, [pc, #532]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ac8:	e015      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 fadd 	bl	8005090 <RCCEx_PLLSAI1_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ada:	e00c      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3320      	adds	r3, #32
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fbc6 	bl	8005274 <RCCEx_PLLSAI2_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aec:	e003      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	74fb      	strb	r3, [r7, #19]
      break;
 8004af2:	e000      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004af4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af6:	7cfb      	ldrb	r3, [r7, #19]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004afc:	4b76      	ldr	r3, [pc, #472]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b0a:	4973      	ldr	r1, [pc, #460]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b12:	e001      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d041      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b2c:	d02a      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b32:	d824      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b38:	d008      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b3e:	d81e      	bhi.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b48:	d010      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b4a:	e018      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b4c:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	4a61      	ldr	r2, [pc, #388]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b56:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b58:	e015      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fa95 	bl	8005090 <RCCEx_PLLSAI1_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b6a:	e00c      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	3320      	adds	r3, #32
 8004b70:	2100      	movs	r1, #0
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb7e 	bl	8005274 <RCCEx_PLLSAI2_Config>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b7c:	e003      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	74fb      	strb	r3, [r7, #19]
      break;
 8004b82:	e000      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b86:	7cfb      	ldrb	r3, [r7, #19]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b8c:	4b52      	ldr	r3, [pc, #328]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b9a:	494f      	ldr	r1, [pc, #316]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ba2:	e001      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba4:	7cfb      	ldrb	r3, [r7, #19]
 8004ba6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 80a0 	beq.w	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bba:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd0:	4b41      	ldr	r3, [pc, #260]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	4a40      	ldr	r2, [pc, #256]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bda:	6593      	str	r3, [r2, #88]	; 0x58
 8004bdc:	4b3e      	ldr	r3, [pc, #248]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be8:	2301      	movs	r3, #1
 8004bea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bec:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a3a      	ldr	r2, [pc, #232]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bf8:	f7fc fef0 	bl	80019dc <HAL_GetTick>
 8004bfc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bfe:	e009      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c00:	f7fc feec 	bl	80019dc <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d902      	bls.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	74fb      	strb	r3, [r7, #19]
        break;
 8004c12:	e005      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004c14:	4b31      	ldr	r3, [pc, #196]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0ef      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d15c      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c26:	4b2c      	ldr	r3, [pc, #176]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01f      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d019      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c44:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	4a20      	ldr	r2, [pc, #128]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c66:	4a1c      	ldr	r2, [pc, #112]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c70:	4a19      	ldr	r2, [pc, #100]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d016      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c82:	f7fc feab 	bl	80019dc <HAL_GetTick>
 8004c86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c88:	e00b      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fea7 	bl	80019dc <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d902      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	74fb      	strb	r3, [r7, #19]
            break;
 8004ca0:	e006      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0ec      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10c      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc6:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cce:	e009      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cd0:	7cfb      	ldrb	r3, [r7, #19]
 8004cd2:	74bb      	strb	r3, [r7, #18]
 8004cd4:	e006      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ce4:	7c7b      	ldrb	r3, [r7, #17]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d105      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cea:	4ba6      	ldr	r3, [pc, #664]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cee:	4aa5      	ldr	r2, [pc, #660]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d02:	4ba0      	ldr	r3, [pc, #640]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d08:	f023 0203 	bic.w	r2, r3, #3
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d10:	499c      	ldr	r1, [pc, #624]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00a      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d24:	4b97      	ldr	r3, [pc, #604]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2a:	f023 020c 	bic.w	r2, r3, #12
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d32:	4994      	ldr	r1, [pc, #592]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d46:	4b8f      	ldr	r3, [pc, #572]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	498b      	ldr	r1, [pc, #556]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00a      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d68:	4b86      	ldr	r3, [pc, #536]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	4983      	ldr	r1, [pc, #524]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0310 	and.w	r3, r3, #16
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00a      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d8a:	4b7e      	ldr	r3, [pc, #504]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d98:	497a      	ldr	r1, [pc, #488]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dac:	4b75      	ldr	r3, [pc, #468]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dba:	4972      	ldr	r1, [pc, #456]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dce:	4b6d      	ldr	r3, [pc, #436]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	4969      	ldr	r1, [pc, #420]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004df0:	4b64      	ldr	r3, [pc, #400]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfe:	4961      	ldr	r1, [pc, #388]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e12:	4b5c      	ldr	r3, [pc, #368]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e18:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e20:	4958      	ldr	r1, [pc, #352]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e34:	4b53      	ldr	r3, [pc, #332]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e42:	4950      	ldr	r1, [pc, #320]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e56:	4b4b      	ldr	r3, [pc, #300]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e64:	4947      	ldr	r1, [pc, #284]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e78:	4b42      	ldr	r3, [pc, #264]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e86:	493f      	ldr	r1, [pc, #252]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d028      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e9a:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4936      	ldr	r1, [pc, #216]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eba:	4b32      	ldr	r3, [pc, #200]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4a31      	ldr	r2, [pc, #196]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec4:	60d3      	str	r3, [r2, #12]
 8004ec6:	e011      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f8d9 	bl	8005090 <RCCEx_PLLSAI1_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d028      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	491f      	ldr	r1, [pc, #124]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f16:	d106      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a19      	ldr	r2, [pc, #100]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
 8004f24:	e011      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3304      	adds	r3, #4
 8004f34:	2101      	movs	r1, #1
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 f8aa 	bl	8005090 <RCCEx_PLLSAI1_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f40:	7cfb      	ldrb	r3, [r7, #19]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d02a      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f56:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f64:	4907      	ldr	r1, [pc, #28]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f74:	d108      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f76:	4b03      	ldr	r3, [pc, #12]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	4a02      	ldr	r2, [pc, #8]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8004f7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f80:	60d3      	str	r3, [r2, #12]
 8004f82:	e013      	b.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x534>
 8004f84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f90:	d10c      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	2101      	movs	r1, #1
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f000 f879 	bl	8005090 <RCCEx_PLLSAI1_Config>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fa2:	7cfb      	ldrb	r3, [r7, #19]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d02f      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004fb8:	4b2c      	ldr	r3, [pc, #176]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc6:	4929      	ldr	r1, [pc, #164]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3304      	adds	r3, #4
 8004fdc:	2102      	movs	r1, #2
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 f856 	bl	8005090 <RCCEx_PLLSAI1_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fe8:	7cfb      	ldrb	r3, [r7, #19]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d014      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8004fee:	7cfb      	ldrb	r3, [r7, #19]
 8004ff0:	74bb      	strb	r3, [r7, #18]
 8004ff2:	e011      	b.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ffc:	d10c      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	3320      	adds	r3, #32
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 f935 	bl	8005274 <RCCEx_PLLSAI2_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d001      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005014:	7cfb      	ldrb	r3, [r7, #19]
 8005016:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005024:	4b11      	ldr	r3, [pc, #68]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005034:	490d      	ldr	r1, [pc, #52]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005048:	4b08      	ldr	r3, [pc, #32]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005058:	4904      	ldr	r1, [pc, #16]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005060:	7cbb      	ldrb	r3, [r7, #18]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3718      	adds	r7, #24
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40021000 	.word	0x40021000

08005070 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a04      	ldr	r2, [pc, #16]	; (800508c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800507a:	f043 0304 	orr.w	r3, r3, #4
 800507e:	6013      	str	r3, [r2, #0]
}
 8005080:	bf00      	nop
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000

08005090 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800509e:	4b74      	ldr	r3, [pc, #464]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80050aa:	4b71      	ldr	r3, [pc, #452]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10d      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
       ||
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80050c2:	4b6b      	ldr	r3, [pc, #428]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
       ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d047      	beq.n	8005166 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e044      	b.n	8005166 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d018      	beq.n	8005116 <RCCEx_PLLSAI1_Config+0x86>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d825      	bhi.n	8005134 <RCCEx_PLLSAI1_Config+0xa4>
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d002      	beq.n	80050f2 <RCCEx_PLLSAI1_Config+0x62>
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d009      	beq.n	8005104 <RCCEx_PLLSAI1_Config+0x74>
 80050f0:	e020      	b.n	8005134 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050f2:	4b5f      	ldr	r3, [pc, #380]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11d      	bne.n	800513a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005102:	e01a      	b.n	800513a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005104:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800510c:	2b00      	cmp	r3, #0
 800510e:	d116      	bne.n	800513e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005114:	e013      	b.n	800513e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005116:	4b56      	ldr	r3, [pc, #344]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10f      	bne.n	8005142 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005122:	4b53      	ldr	r3, [pc, #332]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005132:	e006      	b.n	8005142 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      break;
 8005138:	e004      	b.n	8005144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800513a:	bf00      	nop
 800513c:	e002      	b.n	8005144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005142:	bf00      	nop
    }

    if(status == HAL_OK)
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800514a:	4b49      	ldr	r3, [pc, #292]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	3b01      	subs	r3, #1
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	430b      	orrs	r3, r1
 8005160:	4943      	ldr	r1, [pc, #268]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d17c      	bne.n	8005266 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800516c:	4b40      	ldr	r3, [pc, #256]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a3f      	ldr	r2, [pc, #252]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005172:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005178:	f7fc fc30 	bl	80019dc <HAL_GetTick>
 800517c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800517e:	e009      	b.n	8005194 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005180:	f7fc fc2c 	bl	80019dc <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d902      	bls.n	8005194 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	73fb      	strb	r3, [r7, #15]
        break;
 8005192:	e005      	b.n	80051a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005194:	4b36      	ldr	r3, [pc, #216]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1ef      	bne.n	8005180 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d15f      	bne.n	8005266 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d110      	bne.n	80051ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051ac:	4b30      	ldr	r3, [pc, #192]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80051b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	0211      	lsls	r1, r2, #8
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68d2      	ldr	r2, [r2, #12]
 80051c2:	06d2      	lsls	r2, r2, #27
 80051c4:	430a      	orrs	r2, r1
 80051c6:	492a      	ldr	r1, [pc, #168]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	610b      	str	r3, [r1, #16]
 80051cc:	e027      	b.n	800521e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d112      	bne.n	80051fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051d4:	4b26      	ldr	r3, [pc, #152]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80051dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	6892      	ldr	r2, [r2, #8]
 80051e4:	0211      	lsls	r1, r2, #8
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6912      	ldr	r2, [r2, #16]
 80051ea:	0852      	lsrs	r2, r2, #1
 80051ec:	3a01      	subs	r2, #1
 80051ee:	0552      	lsls	r2, r2, #21
 80051f0:	430a      	orrs	r2, r1
 80051f2:	491f      	ldr	r1, [pc, #124]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	610b      	str	r3, [r1, #16]
 80051f8:	e011      	b.n	800521e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051fa:	4b1d      	ldr	r3, [pc, #116]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005202:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	6892      	ldr	r2, [r2, #8]
 800520a:	0211      	lsls	r1, r2, #8
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	6952      	ldr	r2, [r2, #20]
 8005210:	0852      	lsrs	r2, r2, #1
 8005212:	3a01      	subs	r2, #1
 8005214:	0652      	lsls	r2, r2, #25
 8005216:	430a      	orrs	r2, r1
 8005218:	4915      	ldr	r1, [pc, #84]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800521a:	4313      	orrs	r3, r2
 800521c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800521e:	4b14      	ldr	r3, [pc, #80]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a13      	ldr	r2, [pc, #76]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005224:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005228:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fc fbd7 	bl	80019dc <HAL_GetTick>
 800522e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005230:	e009      	b.n	8005246 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005232:	f7fc fbd3 	bl	80019dc <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d902      	bls.n	8005246 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	73fb      	strb	r3, [r7, #15]
          break;
 8005244:	e005      	b.n	8005252 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005246:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800524e:	2b00      	cmp	r3, #0
 8005250:	d0ef      	beq.n	8005232 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d106      	bne.n	8005266 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005258:	4b05      	ldr	r3, [pc, #20]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 800525a:	691a      	ldr	r2, [r3, #16]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	4903      	ldr	r1, [pc, #12]	; (8005270 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005262:	4313      	orrs	r3, r2
 8005264:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005266:	7bfb      	ldrb	r3, [r7, #15]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40021000 	.word	0x40021000

08005274 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005282:	4b69      	ldr	r3, [pc, #420]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800528e:	4b66      	ldr	r3, [pc, #408]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0203 	and.w	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d10d      	bne.n	80052ba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
       ||
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80052a6:	4b60      	ldr	r3, [pc, #384]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	091b      	lsrs	r3, r3, #4
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
       ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d047      	beq.n	800534a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
 80052be:	e044      	b.n	800534a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b03      	cmp	r3, #3
 80052c6:	d018      	beq.n	80052fa <RCCEx_PLLSAI2_Config+0x86>
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d825      	bhi.n	8005318 <RCCEx_PLLSAI2_Config+0xa4>
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d002      	beq.n	80052d6 <RCCEx_PLLSAI2_Config+0x62>
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d009      	beq.n	80052e8 <RCCEx_PLLSAI2_Config+0x74>
 80052d4:	e020      	b.n	8005318 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052d6:	4b54      	ldr	r3, [pc, #336]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d11d      	bne.n	800531e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e6:	e01a      	b.n	800531e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052e8:	4b4f      	ldr	r3, [pc, #316]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d116      	bne.n	8005322 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f8:	e013      	b.n	8005322 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052fa:	4b4b      	ldr	r3, [pc, #300]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10f      	bne.n	8005326 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005306:	4b48      	ldr	r3, [pc, #288]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d109      	bne.n	8005326 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005316:	e006      	b.n	8005326 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e004      	b.n	8005328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800531e:	bf00      	nop
 8005320:	e002      	b.n	8005328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005326:	bf00      	nop
    }

    if(status == HAL_OK)
 8005328:	7bfb      	ldrb	r3, [r7, #15]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10d      	bne.n	800534a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800532e:	4b3e      	ldr	r3, [pc, #248]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6819      	ldr	r1, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	3b01      	subs	r3, #1
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	430b      	orrs	r3, r1
 8005344:	4938      	ldr	r1, [pc, #224]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005346:	4313      	orrs	r3, r2
 8005348:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d166      	bne.n	800541e <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a34      	ldr	r2, [pc, #208]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800535a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800535c:	f7fc fb3e 	bl	80019dc <HAL_GetTick>
 8005360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005362:	e009      	b.n	8005378 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005364:	f7fc fb3a 	bl	80019dc <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d902      	bls.n	8005378 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	73fb      	strb	r3, [r7, #15]
        break;
 8005376:	e005      	b.n	8005384 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005378:	4b2b      	ldr	r3, [pc, #172]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ef      	bne.n	8005364 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d149      	bne.n	800541e <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d110      	bne.n	80053b2 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005398:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	6892      	ldr	r2, [r2, #8]
 80053a0:	0211      	lsls	r1, r2, #8
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68d2      	ldr	r2, [r2, #12]
 80053a6:	06d2      	lsls	r2, r2, #27
 80053a8:	430a      	orrs	r2, r1
 80053aa:	491f      	ldr	r1, [pc, #124]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	614b      	str	r3, [r1, #20]
 80053b0:	e011      	b.n	80053d6 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053b2:	4b1d      	ldr	r3, [pc, #116]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80053ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6892      	ldr	r2, [r2, #8]
 80053c2:	0211      	lsls	r1, r2, #8
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6912      	ldr	r2, [r2, #16]
 80053c8:	0852      	lsrs	r2, r2, #1
 80053ca:	3a01      	subs	r2, #1
 80053cc:	0652      	lsls	r2, r2, #25
 80053ce:	430a      	orrs	r2, r1
 80053d0:	4915      	ldr	r1, [pc, #84]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053d6:	4b14      	ldr	r3, [pc, #80]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a13      	ldr	r2, [pc, #76]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 80053dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7fc fafb 	bl	80019dc <HAL_GetTick>
 80053e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053e8:	e009      	b.n	80053fe <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053ea:	f7fc faf7 	bl	80019dc <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d902      	bls.n	80053fe <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	73fb      	strb	r3, [r7, #15]
          break;
 80053fc:	e005      	b.n	800540a <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0ef      	beq.n	80053ea <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 8005412:	695a      	ldr	r2, [r3, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	4903      	ldr	r1, [pc, #12]	; (8005428 <RCCEx_PLLSAI2_Config+0x1b4>)
 800541a:	4313      	orrs	r3, r2
 800541c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40021000 	.word	0x40021000

0800542c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e040      	b.n	80054c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005442:	2b00      	cmp	r3, #0
 8005444:	d106      	bne.n	8005454 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fc f90a 	bl	8001668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2224      	movs	r2, #36	; 0x24
 8005458:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0201 	bic.w	r2, r2, #1
 8005468:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fbc2 	bl	8005bf4 <UART_SetConfig>
 8005470:	4603      	mov	r3, r0
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e022      	b.n	80054c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fe6e 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fef5 	bl	80062a8 <UART_CheckIdleState>
 80054be:	4603      	mov	r3, r0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3708      	adds	r7, #8
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af02      	add	r7, sp, #8
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	603b      	str	r3, [r7, #0]
 80054d4:	4613      	mov	r3, r2
 80054d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054dc:	2b20      	cmp	r3, #32
 80054de:	f040 8082 	bne.w	80055e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_Transmit+0x26>
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e07a      	b.n	80055e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_UART_Transmit+0x38>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e073      	b.n	80055e8 <HAL_UART_Transmit+0x120>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2221      	movs	r2, #33	; 0x21
 8005514:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005516:	f7fc fa61 	bl	80019dc <HAL_GetTick>
 800551a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	88fa      	ldrh	r2, [r7, #6]
 8005520:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	88fa      	ldrh	r2, [r7, #6]
 8005528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005534:	d108      	bne.n	8005548 <HAL_UART_Transmit+0x80>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d104      	bne.n	8005548 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	e003      	b.n	8005550 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005558:	e02d      	b.n	80055b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	2200      	movs	r2, #0
 8005562:	2180      	movs	r1, #128	; 0x80
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fee8 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e039      	b.n	80055e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10b      	bne.n	8005592 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	881a      	ldrh	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005586:	b292      	uxth	r2, r2
 8005588:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	3302      	adds	r3, #2
 800558e:	61bb      	str	r3, [r7, #24]
 8005590:	e008      	b.n	80055a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	b292      	uxth	r2, r2
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	3301      	adds	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	3b01      	subs	r3, #1
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1cb      	bne.n	800555a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	2140      	movs	r1, #64	; 0x40
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 feb4 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e005      	b.n	80055e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3720      	adds	r7, #32
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b0ba      	sub	sp, #232	; 0xe8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800561a:	f640 030f 	movw	r3, #2063	; 0x80f
 800561e:	4013      	ands	r3, r2
 8005620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005628:	2b00      	cmp	r3, #0
 800562a:	d115      	bne.n	8005658 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800562c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005630:	f003 0320 	and.w	r3, r3, #32
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00f      	beq.n	8005658 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d009      	beq.n	8005658 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 82a6 	beq.w	8005b9a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
      }
      return;
 8005656:	e2a0      	b.n	8005b9a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005658:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 8117 	beq.w	8005890 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800566e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005672:	4b85      	ldr	r3, [pc, #532]	; (8005888 <HAL_UART_IRQHandler+0x298>)
 8005674:	4013      	ands	r3, r2
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 810a 	beq.w	8005890 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800567c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <HAL_UART_IRQHandler+0xbc>
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2201      	movs	r2, #1
 800569a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d011      	beq.n	80056dc <HAL_UART_IRQHandler+0xec>
 80056b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2202      	movs	r2, #2
 80056ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d2:	f043 0204 	orr.w	r2, r3, #4
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d011      	beq.n	800570c <HAL_UART_IRQHandler+0x11c>
 80056e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2204      	movs	r2, #4
 80056fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005702:	f043 0202 	orr.w	r2, r3, #2
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800570c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005710:	f003 0308 	and.w	r3, r3, #8
 8005714:	2b00      	cmp	r3, #0
 8005716:	d017      	beq.n	8005748 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571c:	f003 0320 	and.w	r3, r3, #32
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005728:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00b      	beq.n	8005748 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2208      	movs	r2, #8
 8005736:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800573e:	f043 0208 	orr.w	r2, r3, #8
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800574c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005750:	2b00      	cmp	r3, #0
 8005752:	d012      	beq.n	800577a <HAL_UART_IRQHandler+0x18a>
 8005754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005758:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00c      	beq.n	800577a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005768:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005770:	f043 0220 	orr.w	r2, r3, #32
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 820c 	beq.w	8005b9e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b40      	cmp	r3, #64	; 0x40
 80057c4:	d005      	beq.n	80057d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04f      	beq.n	8005872 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fe75 	bl	80064c2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d141      	bne.n	800586a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3308      	adds	r3, #8
 80057ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057f4:	e853 3f00 	ldrex	r3, [r3]
 80057f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80057fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005804:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3308      	adds	r3, #8
 800580e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005812:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005816:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800581e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005822:	e841 2300 	strex	r3, r2, [r1]
 8005826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800582a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1d9      	bne.n	80057e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005836:	2b00      	cmp	r3, #0
 8005838:	d013      	beq.n	8005862 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	4a13      	ldr	r2, [pc, #76]	; (800588c <HAL_UART_IRQHandler+0x29c>)
 8005840:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4618      	mov	r0, r3
 8005848:	f7fc fb00 	bl	8001e4c <HAL_DMA_Abort_IT>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d017      	beq.n	8005882 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800585c:	4610      	mov	r0, r2
 800585e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005860:	e00f      	b.n	8005882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f9b0 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005868:	e00b      	b.n	8005882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9ac 	bl	8005bc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005870:	e007      	b.n	8005882 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9a8 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005880:	e18d      	b.n	8005b9e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005882:	bf00      	nop
    return;
 8005884:	e18b      	b.n	8005b9e <HAL_UART_IRQHandler+0x5ae>
 8005886:	bf00      	nop
 8005888:	04000120 	.word	0x04000120
 800588c:	08006589 	.word	0x08006589

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005894:	2b01      	cmp	r3, #1
 8005896:	f040 8146 	bne.w	8005b26 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800589a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 813f 	beq.w	8005b26 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f000 8138 	beq.w	8005b26 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2210      	movs	r2, #16
 80058bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c8:	2b40      	cmp	r3, #64	; 0x40
 80058ca:	f040 80b4 	bne.w	8005a36 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 815f 	beq.w	8005ba2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80058ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058ee:	429a      	cmp	r2, r3
 80058f0:	f080 8157 	bcs.w	8005ba2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80058fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	f040 8085 	bne.w	8005a1a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005924:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800593a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800593e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005946:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005952:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1da      	bne.n	8005910 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800596a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800597e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005982:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005986:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005990:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e1      	bne.n	800595a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	f023 0310 	bic.w	r3, r3, #16
 80059ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80059fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e4      	bne.n	80059da <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fc f9db 	bl	8001dd0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8d4 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a34:	e0b5      	b.n	8005ba2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80a7 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005a58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80a2 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6a:	e853 3f00 	ldrex	r3, [r3]
 8005a6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
 8005a86:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a88:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a8c:	e841 2300 	strex	r3, r2, [r1]
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e4      	bne.n	8005a62 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3308      	adds	r3, #8
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f023 0301 	bic.w	r3, r3, #1
 8005aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005abc:	633a      	str	r2, [r7, #48]	; 0x30
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e3      	bne.n	8005a98 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	e853 3f00 	ldrex	r3, [r3]
 8005aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0310 	bic.w	r3, r3, #16
 8005af6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b04:	61fb      	str	r3, [r7, #28]
 8005b06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	69b9      	ldr	r1, [r7, #24]
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	617b      	str	r3, [r7, #20]
   return(result);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e4      	bne.n	8005ae2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f85c 	bl	8005bdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b24:	e03f      	b.n	8005ba6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00e      	beq.n	8005b50 <HAL_UART_IRQHandler+0x560>
 8005b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d008      	beq.n	8005b50 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fd5d 	bl	8006608 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b4e:	e02d      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00e      	beq.n	8005b7a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d008      	beq.n	8005b7a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d01c      	beq.n	8005baa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
    }
    return;
 8005b78:	e017      	b.n	8005baa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d012      	beq.n	8005bac <HAL_UART_IRQHandler+0x5bc>
 8005b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00c      	beq.n	8005bac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fd0e 	bl	80065b4 <UART_EndTransmit_IT>
    return;
 8005b98:	e008      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
      return;
 8005b9a:	bf00      	nop
 8005b9c:	e006      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
    return;
 8005b9e:	bf00      	nop
 8005ba0:	e004      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ba2:	bf00      	nop
 8005ba4:	e002      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
      return;
 8005ba6:	bf00      	nop
 8005ba8:	e000      	b.n	8005bac <HAL_UART_IRQHandler+0x5bc>
    return;
 8005baa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005bac:	37e8      	adds	r7, #232	; 0xe8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop

08005bb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf8:	b08a      	sub	sp, #40	; 0x28
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	431a      	orrs	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4ba4      	ldr	r3, [pc, #656]	; (8005eb4 <UART_SetConfig+0x2c0>)
 8005c24:	4013      	ands	r3, r2
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a99      	ldr	r2, [pc, #612]	; (8005eb8 <UART_SetConfig+0x2c4>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c70:	430a      	orrs	r2, r1
 8005c72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a90      	ldr	r2, [pc, #576]	; (8005ebc <UART_SetConfig+0x2c8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d126      	bne.n	8005ccc <UART_SetConfig+0xd8>
 8005c7e:	4b90      	ldr	r3, [pc, #576]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	2b03      	cmp	r3, #3
 8005c8a:	d81b      	bhi.n	8005cc4 <UART_SetConfig+0xd0>
 8005c8c:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <UART_SetConfig+0xa0>)
 8005c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c92:	bf00      	nop
 8005c94:	08005ca5 	.word	0x08005ca5
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	08005cad 	.word	0x08005cad
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005caa:	e116      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cac:	2302      	movs	r3, #2
 8005cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cb2:	e112      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cba:	e10e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cbc:	2308      	movs	r3, #8
 8005cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cc2:	e10a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005cca:	e106      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a7c      	ldr	r2, [pc, #496]	; (8005ec4 <UART_SetConfig+0x2d0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d138      	bne.n	8005d48 <UART_SetConfig+0x154>
 8005cd6:	4b7a      	ldr	r3, [pc, #488]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	d82d      	bhi.n	8005d40 <UART_SetConfig+0x14c>
 8005ce4:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <UART_SetConfig+0xf8>)
 8005ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cea:	bf00      	nop
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005d41 	.word	0x08005d41
 8005cf4:	08005d41 	.word	0x08005d41
 8005cf8:	08005d41 	.word	0x08005d41
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	08005d41 	.word	0x08005d41
 8005d08:	08005d41 	.word	0x08005d41
 8005d0c:	08005d29 	.word	0x08005d29
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005d41 	.word	0x08005d41
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	2300      	movs	r3, #0
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e0d8      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e0d4      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d30:	2304      	movs	r3, #4
 8005d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d36:	e0d0      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d38:	2308      	movs	r3, #8
 8005d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d3e:	e0cc      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d40:	2310      	movs	r3, #16
 8005d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d46:	e0c8      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5e      	ldr	r2, [pc, #376]	; (8005ec8 <UART_SetConfig+0x2d4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d125      	bne.n	8005d9e <UART_SetConfig+0x1aa>
 8005d52:	4b5b      	ldr	r3, [pc, #364]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d5c:	2b30      	cmp	r3, #48	; 0x30
 8005d5e:	d016      	beq.n	8005d8e <UART_SetConfig+0x19a>
 8005d60:	2b30      	cmp	r3, #48	; 0x30
 8005d62:	d818      	bhi.n	8005d96 <UART_SetConfig+0x1a2>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d00a      	beq.n	8005d7e <UART_SetConfig+0x18a>
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	d814      	bhi.n	8005d96 <UART_SetConfig+0x1a2>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d002      	beq.n	8005d76 <UART_SetConfig+0x182>
 8005d70:	2b10      	cmp	r3, #16
 8005d72:	d008      	beq.n	8005d86 <UART_SetConfig+0x192>
 8005d74:	e00f      	b.n	8005d96 <UART_SetConfig+0x1a2>
 8005d76:	2300      	movs	r3, #0
 8005d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d7c:	e0ad      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d84:	e0a9      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d86:	2304      	movs	r3, #4
 8005d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8c:	e0a5      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d94:	e0a1      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d96:	2310      	movs	r3, #16
 8005d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9c:	e09d      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4a      	ldr	r2, [pc, #296]	; (8005ecc <UART_SetConfig+0x2d8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d125      	bne.n	8005df4 <UART_SetConfig+0x200>
 8005da8:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005db2:	2bc0      	cmp	r3, #192	; 0xc0
 8005db4:	d016      	beq.n	8005de4 <UART_SetConfig+0x1f0>
 8005db6:	2bc0      	cmp	r3, #192	; 0xc0
 8005db8:	d818      	bhi.n	8005dec <UART_SetConfig+0x1f8>
 8005dba:	2b80      	cmp	r3, #128	; 0x80
 8005dbc:	d00a      	beq.n	8005dd4 <UART_SetConfig+0x1e0>
 8005dbe:	2b80      	cmp	r3, #128	; 0x80
 8005dc0:	d814      	bhi.n	8005dec <UART_SetConfig+0x1f8>
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d002      	beq.n	8005dcc <UART_SetConfig+0x1d8>
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d008      	beq.n	8005ddc <UART_SetConfig+0x1e8>
 8005dca:	e00f      	b.n	8005dec <UART_SetConfig+0x1f8>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dd2:	e082      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dda:	e07e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de2:	e07a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005de4:	2308      	movs	r3, #8
 8005de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dea:	e076      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005dec:	2310      	movs	r3, #16
 8005dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df2:	e072      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a35      	ldr	r2, [pc, #212]	; (8005ed0 <UART_SetConfig+0x2dc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d12a      	bne.n	8005e54 <UART_SetConfig+0x260>
 8005dfe:	4b30      	ldr	r3, [pc, #192]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e0c:	d01a      	beq.n	8005e44 <UART_SetConfig+0x250>
 8005e0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e12:	d81b      	bhi.n	8005e4c <UART_SetConfig+0x258>
 8005e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e18:	d00c      	beq.n	8005e34 <UART_SetConfig+0x240>
 8005e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e1e:	d815      	bhi.n	8005e4c <UART_SetConfig+0x258>
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <UART_SetConfig+0x238>
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e28:	d008      	beq.n	8005e3c <UART_SetConfig+0x248>
 8005e2a:	e00f      	b.n	8005e4c <UART_SetConfig+0x258>
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e32:	e052      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e34:	2302      	movs	r3, #2
 8005e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3a:	e04e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e3c:	2304      	movs	r3, #4
 8005e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e42:	e04a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e44:	2308      	movs	r3, #8
 8005e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4a:	e046      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e4c:	2310      	movs	r3, #16
 8005e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e52:	e042      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a17      	ldr	r2, [pc, #92]	; (8005eb8 <UART_SetConfig+0x2c4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d13a      	bne.n	8005ed4 <UART_SetConfig+0x2e0>
 8005e5e:	4b18      	ldr	r3, [pc, #96]	; (8005ec0 <UART_SetConfig+0x2cc>)
 8005e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e6c:	d01a      	beq.n	8005ea4 <UART_SetConfig+0x2b0>
 8005e6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e72:	d81b      	bhi.n	8005eac <UART_SetConfig+0x2b8>
 8005e74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e78:	d00c      	beq.n	8005e94 <UART_SetConfig+0x2a0>
 8005e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7e:	d815      	bhi.n	8005eac <UART_SetConfig+0x2b8>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <UART_SetConfig+0x298>
 8005e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e88:	d008      	beq.n	8005e9c <UART_SetConfig+0x2a8>
 8005e8a:	e00f      	b.n	8005eac <UART_SetConfig+0x2b8>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e022      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e01e      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea2:	e01a      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eaa:	e016      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e012      	b.n	8005eda <UART_SetConfig+0x2e6>
 8005eb4:	efff69f3 	.word	0xefff69f3
 8005eb8:	40008000 	.word	0x40008000
 8005ebc:	40013800 	.word	0x40013800
 8005ec0:	40021000 	.word	0x40021000
 8005ec4:	40004400 	.word	0x40004400
 8005ec8:	40004800 	.word	0x40004800
 8005ecc:	40004c00 	.word	0x40004c00
 8005ed0:	40005000 	.word	0x40005000
 8005ed4:	2310      	movs	r3, #16
 8005ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a9f      	ldr	r2, [pc, #636]	; (800615c <UART_SetConfig+0x568>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d17a      	bne.n	8005fda <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ee8:	2b08      	cmp	r3, #8
 8005eea:	d824      	bhi.n	8005f36 <UART_SetConfig+0x342>
 8005eec:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <UART_SetConfig+0x300>)
 8005eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef2:	bf00      	nop
 8005ef4:	08005f19 	.word	0x08005f19
 8005ef8:	08005f37 	.word	0x08005f37
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f37 	.word	0x08005f37
 8005f04:	08005f27 	.word	0x08005f27
 8005f08:	08005f37 	.word	0x08005f37
 8005f0c:	08005f37 	.word	0x08005f37
 8005f10:	08005f37 	.word	0x08005f37
 8005f14:	08005f2f 	.word	0x08005f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f18:	f7fe fd22 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8005f1c:	61f8      	str	r0, [r7, #28]
        break;
 8005f1e:	e010      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f20:	4b8f      	ldr	r3, [pc, #572]	; (8006160 <UART_SetConfig+0x56c>)
 8005f22:	61fb      	str	r3, [r7, #28]
        break;
 8005f24:	e00d      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f26:	f7fe fc83 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8005f2a:	61f8      	str	r0, [r7, #28]
        break;
 8005f2c:	e009      	b.n	8005f42 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f32:	61fb      	str	r3, [r7, #28]
        break;
 8005f34:	e005      	b.n	8005f42 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f000 80fb 	beq.w	8006140 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	4413      	add	r3, r2
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d305      	bcc.n	8005f66 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d903      	bls.n	8005f6e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f6c:	e0e8      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	2200      	movs	r2, #0
 8005f72:	461c      	mov	r4, r3
 8005f74:	4615      	mov	r5, r2
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	022b      	lsls	r3, r5, #8
 8005f80:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f84:	0222      	lsls	r2, r4, #8
 8005f86:	68f9      	ldr	r1, [r7, #12]
 8005f88:	6849      	ldr	r1, [r1, #4]
 8005f8a:	0849      	lsrs	r1, r1, #1
 8005f8c:	2000      	movs	r0, #0
 8005f8e:	4688      	mov	r8, r1
 8005f90:	4681      	mov	r9, r0
 8005f92:	eb12 0a08 	adds.w	sl, r2, r8
 8005f96:	eb43 0b09 	adc.w	fp, r3, r9
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	603b      	str	r3, [r7, #0]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa8:	4650      	mov	r0, sl
 8005faa:	4659      	mov	r1, fp
 8005fac:	f7fa fe0c 	bl	8000bc8 <__aeabi_uldivmod>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fbe:	d308      	bcc.n	8005fd2 <UART_SetConfig+0x3de>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fc6:	d204      	bcs.n	8005fd2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	60da      	str	r2, [r3, #12]
 8005fd0:	e0b6      	b.n	8006140 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fd8:	e0b2      	b.n	8006140 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe2:	d15e      	bne.n	80060a2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d828      	bhi.n	800603e <UART_SetConfig+0x44a>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <UART_SetConfig+0x400>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006019 	.word	0x08006019
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006029 	.word	0x08006029
 8006000:	0800603f 	.word	0x0800603f
 8006004:	0800602f 	.word	0x0800602f
 8006008:	0800603f 	.word	0x0800603f
 800600c:	0800603f 	.word	0x0800603f
 8006010:	0800603f 	.word	0x0800603f
 8006014:	08006037 	.word	0x08006037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006018:	f7fe fca2 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 800601c:	61f8      	str	r0, [r7, #28]
        break;
 800601e:	e014      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006020:	f7fe fcb4 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 8006024:	61f8      	str	r0, [r7, #28]
        break;
 8006026:	e010      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006028:	4b4d      	ldr	r3, [pc, #308]	; (8006160 <UART_SetConfig+0x56c>)
 800602a:	61fb      	str	r3, [r7, #28]
        break;
 800602c:	e00d      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602e:	f7fe fbff 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 8006032:	61f8      	str	r0, [r7, #28]
        break;
 8006034:	e009      	b.n	800604a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603a:	61fb      	str	r3, [r7, #28]
        break;
 800603c:	e005      	b.n	800604a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800603e:	2300      	movs	r3, #0
 8006040:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006048:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d077      	beq.n	8006140 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005a      	lsls	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	441a      	add	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	fbb2 f3f3 	udiv	r3, r2, r3
 8006064:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b0f      	cmp	r3, #15
 800606a:	d916      	bls.n	800609a <UART_SetConfig+0x4a6>
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006072:	d212      	bcs.n	800609a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	b29b      	uxth	r3, r3
 8006078:	f023 030f 	bic.w	r3, r3, #15
 800607c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	f003 0307 	and.w	r3, r3, #7
 8006088:	b29a      	uxth	r2, r3
 800608a:	8afb      	ldrh	r3, [r7, #22]
 800608c:	4313      	orrs	r3, r2
 800608e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	8afa      	ldrh	r2, [r7, #22]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	e052      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060a0:	e04e      	b.n	8006140 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d827      	bhi.n	80060fa <UART_SetConfig+0x506>
 80060aa:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x4bc>)
 80060ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060dd 	.word	0x080060dd
 80060b8:	080060e5 	.word	0x080060e5
 80060bc:	080060fb 	.word	0x080060fb
 80060c0:	080060eb 	.word	0x080060eb
 80060c4:	080060fb 	.word	0x080060fb
 80060c8:	080060fb 	.word	0x080060fb
 80060cc:	080060fb 	.word	0x080060fb
 80060d0:	080060f3 	.word	0x080060f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fe fc44 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e014      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe fc56 	bl	800498c <HAL_RCC_GetPCLK2Freq>
 80060e0:	61f8      	str	r0, [r7, #28]
        break;
 80060e2:	e010      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <UART_SetConfig+0x56c>)
 80060e6:	61fb      	str	r3, [r7, #28]
        break;
 80060e8:	e00d      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ea:	f7fe fba1 	bl	8004830 <HAL_RCC_GetSysClockFreq>
 80060ee:	61f8      	str	r0, [r7, #28]
        break;
 80060f0:	e009      	b.n	8006106 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060f6:	61fb      	str	r3, [r7, #28]
        break;
 80060f8:	e005      	b.n	8006106 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006104:	bf00      	nop
    }

    if (pclk != 0U)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d019      	beq.n	8006140 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	085a      	lsrs	r2, r3, #1
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	fbb2 f3f3 	udiv	r3, r2, r3
 800611e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	2b0f      	cmp	r3, #15
 8006124:	d909      	bls.n	800613a <UART_SetConfig+0x546>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800612c:	d205      	bcs.n	800613a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	b29a      	uxth	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	60da      	str	r2, [r3, #12]
 8006138:	e002      	b.n	8006140 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2200      	movs	r2, #0
 8006144:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800614c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006150:	4618      	mov	r0, r3
 8006152:	3728      	adds	r7, #40	; 0x28
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	40008000 	.word	0x40008000
 8006160:	00f42400 	.word	0x00f42400

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062b8:	f7fb fb90 	bl	80019dc <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f82d 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e023      	b.n	8006332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d10e      	bne.n	8006316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f817 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00d      	b.n	8006332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b09c      	sub	sp, #112	; 0x70
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634a:	e0a5      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	f000 80a1 	beq.w	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fb fb41 	bl	80019dc <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <UART_WaitOnFlagUntilTimeout+0x32>
 8006366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006368:	2b00      	cmp	r3, #0
 800636a:	d13e      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	663b      	str	r3, [r7, #96]	; 0x60
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063be:	64ba      	str	r2, [r7, #72]	; 0x48
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e067      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d04f      	beq.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006406:	d147      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006410:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006464:	623a      	str	r2, [r7, #32]
 8006466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	61bb      	str	r3, [r7, #24]
   return(result);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e010      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	f43f af4a 	beq.w	800634c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3770      	adds	r7, #112	; 0x70
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b095      	sub	sp, #84	; 0x54
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	e853 3f00 	ldrex	r3, [r3]
 80064d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	461a      	mov	r2, r3
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	643b      	str	r3, [r7, #64]	; 0x40
 80064ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f0:	e841 2300 	strex	r3, r2, [r1]
 80064f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1e6      	bne.n	80064ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3308      	adds	r3, #8
 8006502:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	e853 3f00 	ldrex	r3, [r3]
 800650a:	61fb      	str	r3, [r7, #28]
   return(result);
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	64bb      	str	r3, [r7, #72]	; 0x48
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3308      	adds	r3, #8
 800651a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006524:	e841 2300 	strex	r3, r2, [r1]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1e5      	bne.n	80064fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006534:	2b01      	cmp	r3, #1
 8006536:	d118      	bne.n	800656a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	60bb      	str	r3, [r7, #8]
   return(result);
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f023 0310 	bic.w	r3, r3, #16
 800654c:	647b      	str	r3, [r7, #68]	; 0x44
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006556:	61bb      	str	r3, [r7, #24]
 8006558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655a:	6979      	ldr	r1, [r7, #20]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	e841 2300 	strex	r3, r2, [r1]
 8006562:	613b      	str	r3, [r7, #16]
   return(result);
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d1e6      	bne.n	8006538 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2220      	movs	r2, #32
 800656e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800657c:	bf00      	nop
 800657e:	3754      	adds	r7, #84	; 0x54
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff fb0e 	bl	8005bc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065ac:	bf00      	nop
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	61bb      	str	r3, [r7, #24]
 80065dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	69ba      	ldr	r2, [r7, #24]
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	613b      	str	r3, [r7, #16]
   return(result);
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e6      	bne.n	80065bc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7ff fada 	bl	8005bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006600:	bf00      	nop
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800661c:	b084      	sub	sp, #16
 800661e:	b580      	push	{r7, lr}
 8006620:	b084      	sub	sp, #16
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	f107 001c 	add.w	r0, r7, #28
 800662a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f9a0 	bl	8006980 <USB_CoreReset>
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d106      	bne.n	8006658 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	639a      	str	r2, [r3, #56]	; 0x38
 8006656:	e005      	b.n	8006664 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006670:	b004      	add	sp, #16
 8006672:	4770      	bx	lr

08006674 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f043 0201 	orr.w	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr

08006696 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f023 0201 	bic.w	r2, r3, #1
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d115      	bne.n	8006706 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066e6:	2001      	movs	r0, #1
 80066e8:	f7fb f984 	bl	80019f4 <HAL_Delay>
      ms++;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3301      	adds	r3, #1
 80066f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f935 	bl	8006962 <USB_GetMode>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d01e      	beq.n	800673c <USB_SetCurrentMode+0x84>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2b31      	cmp	r3, #49	; 0x31
 8006702:	d9f0      	bls.n	80066e6 <USB_SetCurrentMode+0x2e>
 8006704:	e01a      	b.n	800673c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d115      	bne.n	8006738 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006718:	2001      	movs	r0, #1
 800671a:	f7fb f96b 	bl	80019f4 <HAL_Delay>
      ms++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f91c 	bl	8006962 <USB_GetMode>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d005      	beq.n	800673c <USB_SetCurrentMode+0x84>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2b31      	cmp	r3, #49	; 0x31
 8006734:	d9f0      	bls.n	8006718 <USB_SetCurrentMode+0x60>
 8006736:	e001      	b.n	800673c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e005      	b.n	8006748 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b32      	cmp	r3, #50	; 0x32
 8006740:	d101      	bne.n	8006746 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3301      	adds	r3, #1
 8006762:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	4a13      	ldr	r2, [pc, #76]	; (80067b4 <USB_FlushTxFifo+0x64>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d901      	bls.n	8006770 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	e01b      	b.n	80067a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	daf2      	bge.n	800675e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006778:	2300      	movs	r3, #0
 800677a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	019b      	lsls	r3, r3, #6
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3301      	adds	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	4a08      	ldr	r2, [pc, #32]	; (80067b4 <USB_FlushTxFifo+0x64>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d901      	bls.n	800679a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e006      	b.n	80067a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0320 	and.w	r3, r3, #32
 80067a2:	2b20      	cmp	r3, #32
 80067a4:	d0f0      	beq.n	8006788 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	00030d40 	.word	0x00030d40

080067b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3301      	adds	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a11      	ldr	r2, [pc, #68]	; (8006814 <USB_FlushRxFifo+0x5c>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d901      	bls.n	80067d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e018      	b.n	8006808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	daf2      	bge.n	80067c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2210      	movs	r2, #16
 80067e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	3301      	adds	r3, #1
 80067ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <USB_FlushRxFifo+0x5c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d901      	bls.n	80067fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e006      	b.n	8006808 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	f003 0310 	and.w	r3, r3, #16
 8006802:	2b10      	cmp	r3, #16
 8006804:	d0f0      	beq.n	80067e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	00030d40 	.word	0x00030d40

08006818 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006818:	b480      	push	{r7}
 800681a:	b089      	sub	sp, #36	; 0x24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	460b      	mov	r3, r1
 8006828:	71fb      	strb	r3, [r7, #7]
 800682a:	4613      	mov	r3, r2
 800682c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006836:	88bb      	ldrh	r3, [r7, #4]
 8006838:	3303      	adds	r3, #3
 800683a:	089b      	lsrs	r3, r3, #2
 800683c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800683e:	2300      	movs	r3, #0
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e018      	b.n	8006876 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	031a      	lsls	r2, r3, #12
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006850:	461a      	mov	r2, r3
 8006852:	69fb      	ldr	r3, [r7, #28]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	3301      	adds	r3, #1
 800685c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	3301      	adds	r3, #1
 8006862:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	3301      	adds	r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	3301      	adds	r3, #1
 8006874:	61bb      	str	r3, [r7, #24]
 8006876:	69ba      	ldr	r2, [r7, #24]
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	429a      	cmp	r2, r3
 800687c:	d3e2      	bcc.n	8006844 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3724      	adds	r7, #36	; 0x24
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800688c:	b480      	push	{r7}
 800688e:	b08b      	sub	sp, #44	; 0x2c
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	4613      	mov	r3, r2
 8006898:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068a2:	88fb      	ldrh	r3, [r7, #6]
 80068a4:	089b      	lsrs	r3, r3, #2
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068aa:	88fb      	ldrh	r3, [r7, #6]
 80068ac:	f003 0303 	and.w	r3, r3, #3
 80068b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068b2:	2300      	movs	r3, #0
 80068b4:	623b      	str	r3, [r7, #32]
 80068b6:	e014      	b.n	80068e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	3301      	adds	r3, #1
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	3301      	adds	r3, #1
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	3301      	adds	r3, #1
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	3301      	adds	r3, #1
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	3301      	adds	r3, #1
 80068e0:	623b      	str	r3, [r7, #32]
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d3e6      	bcc.n	80068b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068ea:	8bfb      	ldrh	r3, [r7, #30]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d01e      	beq.n	800692e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fa:	461a      	mov	r2, r3
 80068fc:	f107 0310 	add.w	r3, r7, #16
 8006900:	6812      	ldr	r2, [r2, #0]
 8006902:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	b2db      	uxtb	r3, r3
 800690a:	00db      	lsls	r3, r3, #3
 800690c:	fa22 f303 	lsr.w	r3, r2, r3
 8006910:	b2da      	uxtb	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	701a      	strb	r2, [r3, #0]
      i++;
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	3301      	adds	r3, #1
 800691a:	623b      	str	r3, [r7, #32]
      pDest++;
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	3301      	adds	r3, #1
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006922:	8bfb      	ldrh	r3, [r7, #30]
 8006924:	3b01      	subs	r3, #1
 8006926:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006928:	8bfb      	ldrh	r3, [r7, #30]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d1ea      	bne.n	8006904 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006930:	4618      	mov	r0, r3
 8006932:	372c      	adds	r7, #44	; 0x2c
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	695b      	ldr	r3, [r3, #20]
 8006948:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4013      	ands	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006954:	68fb      	ldr	r3, [r7, #12]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006962:	b480      	push	{r7}
 8006964:	b083      	sub	sp, #12
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	f003 0301 	and.w	r3, r3, #1
}
 8006972:	4618      	mov	r0, r3
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	3301      	adds	r3, #1
 8006990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <USB_CoreReset+0x64>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d901      	bls.n	800699e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e01b      	b.n	80069d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	daf2      	bge.n	800698c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f043 0201 	orr.w	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <USB_CoreReset+0x64>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e006      	b.n	80069d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d0f0      	beq.n	80069b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	00030d40 	.word	0x00030d40

080069e8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069e8:	b084      	sub	sp, #16
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b086      	sub	sp, #24
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80069f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a08:	461a      	mov	r2, r3
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a3a:	2110      	movs	r1, #16
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff fe87 	bl	8006750 <USB_FlushTxFifo>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7ff feb3 	bl	80067b8 <USB_FlushRxFifo>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
 8006a60:	e015      	b.n	8006a8e <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f04f 33ff 	mov.w	r3, #4294967295
 8006a74:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	015a      	lsls	r2, r3, #5
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a82:	461a      	mov	r2, r3
 8006a84:	2300      	movs	r3, #0
 8006a86:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	613b      	str	r3, [r7, #16]
 8006a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d3e5      	bcc.n	8006a62 <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa2:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2280      	movs	r2, #128	; 0x80
 8006aa8:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a0c      	ldr	r2, [pc, #48]	; (8006ae0 <USB_HostInit+0xf8>)
 8006aae:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <USB_HostInit+0xfc>)
 8006ab4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f043 0210 	orr.w	r2, r3, #16
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	699a      	ldr	r2, [r3, #24]
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <USB_HostInit+0x100>)
 8006aca:	4313      	orrs	r3, r2
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006adc:	b004      	add	sp, #16
 8006ade:	4770      	bx	lr
 8006ae0:	00600080 	.word	0x00600080
 8006ae4:	004000e0 	.word	0x004000e0
 8006ae8:	a3200008 	.word	0xa3200008

08006aec <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	460b      	mov	r3, r1
 8006af6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006b24:	4313      	orrs	r3, r2
 8006b26:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d107      	bne.n	8006b3e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b34:	461a      	mov	r2, r3
 8006b36:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b3a:	6053      	str	r3, [r2, #4]
 8006b3c:	e009      	b.n	8006b52 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d106      	bne.n	8006b52 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f241 7370 	movw	r3, #6000	; 0x1770
 8006b50:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006b80:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b8e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006b90:	2064      	movs	r0, #100	; 0x64
 8006b92:	f7fa ff2f 	bl	80019f4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006ba4:	200a      	movs	r0, #10
 8006ba6:	f7fa ff25 	bl	80019f4 <HAL_Delay>

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3710      	adds	r7, #16
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006bd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <USB_DriveVbus+0x44>
 8006be4:	78fb      	ldrb	r3, [r7, #3]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d106      	bne.n	8006bf8 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006bf2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bf6:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c02:	d109      	bne.n	8006c18 <USB_DriveVbus+0x64>
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c16:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b085      	sub	sp, #20
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	0c5b      	lsrs	r3, r3, #17
 8006c44:	f003 0303 	and.w	r3, r3, #3
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	b29b      	uxth	r3, r3
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
	...

08006c78 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	4608      	mov	r0, r1
 8006c82:	4611      	mov	r1, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4603      	mov	r3, r0
 8006c88:	70fb      	strb	r3, [r7, #3]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70bb      	strb	r3, [r7, #2]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c92:	2300      	movs	r3, #0
 8006c94:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006c9a:	78fb      	ldrb	r3, [r7, #3]
 8006c9c:	015a      	lsls	r2, r3, #5
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cac:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006cae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d867      	bhi.n	8006d86 <USB_HC_Init+0x10e>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <USB_HC_Init+0x44>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006ccd 	.word	0x08006ccd
 8006cc0:	08006d49 	.word	0x08006d49
 8006cc4:	08006ccd 	.word	0x08006ccd
 8006cc8:	08006d0b 	.word	0x08006d0b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ccc:	78fb      	ldrb	r3, [r7, #3]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cd8:	461a      	mov	r2, r3
 8006cda:	f240 439d 	movw	r3, #1181	; 0x49d
 8006cde:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006ce0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	da51      	bge.n	8006d8c <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf4:	68db      	ldr	r3, [r3, #12]
 8006cf6:	78fa      	ldrb	r2, [r7, #3]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d06:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d08:	e040      	b.n	8006d8c <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d16:	461a      	mov	r2, r3
 8006d18:	f240 639d 	movw	r3, #1693	; 0x69d
 8006d1c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d1e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	da34      	bge.n	8006d90 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006d26:	78fb      	ldrb	r3, [r7, #3]
 8006d28:	015a      	lsls	r2, r3, #5
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	78fa      	ldrb	r2, [r7, #3]
 8006d36:	0151      	lsls	r1, r2, #5
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	440a      	add	r2, r1
 8006d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d44:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006d46:	e023      	b.n	8006d90 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d54:	461a      	mov	r2, r3
 8006d56:	f240 2325 	movw	r3, #549	; 0x225
 8006d5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006d5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	da17      	bge.n	8006d94 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006d64:	78fb      	ldrb	r3, [r7, #3]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	78fa      	ldrb	r2, [r7, #3]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d7e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006d82:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006d84:	e006      	b.n	8006d94 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	77fb      	strb	r3, [r7, #31]
      break;
 8006d8a:	e004      	b.n	8006d96 <USB_HC_Init+0x11e>
      break;
 8006d8c:	bf00      	nop
 8006d8e:	e002      	b.n	8006d96 <USB_HC_Init+0x11e>
      break;
 8006d90:	bf00      	nop
 8006d92:	e000      	b.n	8006d96 <USB_HC_Init+0x11e>
      break;
 8006d94:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006d96:	78fb      	ldrb	r3, [r7, #3]
 8006d98:	015a      	lsls	r2, r3, #5
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	78fa      	ldrb	r2, [r7, #3]
 8006da6:	0151      	lsls	r1, r2, #5
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	440a      	add	r2, r1
 8006dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006db0:	f043 0302 	orr.w	r3, r3, #2
 8006db4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	78fb      	ldrb	r3, [r7, #3]
 8006dc0:	f003 030f 	and.w	r3, r3, #15
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dca:	6939      	ldr	r1, [r7, #16]
 8006dcc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006de0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	da03      	bge.n	8006df0 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	e001      	b.n	8006df4 <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff ff16 	bl	8006c26 <USB_GetHostSpeed>
 8006dfa:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006dfc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e00:	2b02      	cmp	r3, #2
 8006e02:	d106      	bne.n	8006e12 <USB_HC_Init+0x19a>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d003      	beq.n	8006e12 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006e0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	e001      	b.n	8006e16 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e16:	787b      	ldrb	r3, [r7, #1]
 8006e18:	059b      	lsls	r3, r3, #22
 8006e1a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e1e:	78bb      	ldrb	r3, [r7, #2]
 8006e20:	02db      	lsls	r3, r3, #11
 8006e22:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e26:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e2c:	049b      	lsls	r3, r3, #18
 8006e2e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006e32:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e34:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e36:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006e3a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e40:	78fb      	ldrb	r3, [r7, #3]
 8006e42:	0159      	lsls	r1, r3, #5
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	440b      	add	r3, r1
 8006e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e4c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006e52:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006e54:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d003      	beq.n	8006e64 <USB_HC_Init+0x1ec>
 8006e5c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d10f      	bne.n	8006e84 <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e82:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3720      	adds	r7, #32
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop

08006e90 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b088      	sub	sp, #32
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ea8:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d018      	beq.n	8006ee4 <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	695b      	ldr	r3, [r3, #20]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	8912      	ldrh	r2, [r2, #8]
 8006eba:	4413      	add	r3, r2
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	8912      	ldrh	r2, [r2, #8]
 8006ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec6:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006ec8:	8bfa      	ldrh	r2, [r7, #30]
 8006eca:	8a7b      	ldrh	r3, [r7, #18]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d90b      	bls.n	8006ee8 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006ed0:	8a7b      	ldrh	r3, [r7, #18]
 8006ed2:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ed4:	8bfb      	ldrh	r3, [r7, #30]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	8912      	ldrh	r2, [r2, #8]
 8006eda:	fb03 f202 	mul.w	r2, r3, r2
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	611a      	str	r2, [r3, #16]
 8006ee2:	e001      	b.n	8006ee8 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	78db      	ldrb	r3, [r3, #3]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d007      	beq.n	8006f00 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ef0:	8bfb      	ldrh	r3, [r7, #30]
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	8912      	ldrh	r2, [r2, #8]
 8006ef6:	fb03 f202 	mul.w	r2, r3, r2
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	611a      	str	r2, [r3, #16]
 8006efe:	e003      	b.n	8006f08 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	695a      	ldr	r2, [r3, #20]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f10:	8bfb      	ldrh	r3, [r7, #30]
 8006f12:	04d9      	lsls	r1, r3, #19
 8006f14:	4b59      	ldr	r3, [pc, #356]	; (800707c <USB_HC_StartXfer+0x1ec>)
 8006f16:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f18:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	7a9b      	ldrb	r3, [r3, #10]
 8006f1e:	075b      	lsls	r3, r3, #29
 8006f20:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f24:	6979      	ldr	r1, [r7, #20]
 8006f26:	0148      	lsls	r0, r1, #5
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	4401      	add	r1, r0
 8006f2c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006f30:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006f32:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bf0c      	ite	eq
 8006f44:	2301      	moveq	r3, #1
 8006f46:	2300      	movne	r3, #0
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006f6a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	7c7b      	ldrb	r3, [r7, #17]
 8006f7c:	075b      	lsls	r3, r3, #29
 8006f7e:	6979      	ldr	r1, [r7, #20]
 8006f80:	0148      	lsls	r0, r1, #5
 8006f82:	69b9      	ldr	r1, [r7, #24]
 8006f84:	4401      	add	r1, r0
 8006f86:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fa4:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d004      	beq.n	8006fb8 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fb4:	60bb      	str	r3, [r7, #8]
 8006fb6:	e003      	b.n	8006fc0 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006fbe:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fc6:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	78db      	ldrb	r3, [r3, #3]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d147      	bne.n	8007072 <USB_HC_StartXfer+0x1e2>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	695b      	ldr	r3, [r3, #20]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d043      	beq.n	8007072 <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	79db      	ldrb	r3, [r3, #7]
 8006fee:	2b03      	cmp	r3, #3
 8006ff0:	d830      	bhi.n	8007054 <USB_HC_StartXfer+0x1c4>
 8006ff2:	a201      	add	r2, pc, #4	; (adr r2, 8006ff8 <USB_HC_StartXfer+0x168>)
 8006ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff8:	08007009 	.word	0x08007009
 8006ffc:	0800702d 	.word	0x0800702d
 8007000:	08007009 	.word	0x08007009
 8007004:	0800702d 	.word	0x0800702d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	3303      	adds	r3, #3
 800700e:	089b      	lsrs	r3, r3, #2
 8007010:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007012:	89fa      	ldrh	r2, [r7, #14]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	b29b      	uxth	r3, r3
 800701a:	429a      	cmp	r2, r3
 800701c:	d91c      	bls.n	8007058 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f043 0220 	orr.w	r2, r3, #32
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	619a      	str	r2, [r3, #24]
        }
        break;
 800702a:	e015      	b.n	8007058 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	3303      	adds	r3, #3
 8007032:	089b      	lsrs	r3, r3, #2
 8007034:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007036:	89fa      	ldrh	r2, [r7, #14]
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	b29b      	uxth	r3, r3
 8007042:	429a      	cmp	r2, r3
 8007044:	d90a      	bls.n	800705c <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	619a      	str	r2, [r3, #24]
        }
        break;
 8007052:	e003      	b.n	800705c <USB_HC_StartXfer+0x1cc>

      default:
        break;
 8007054:	bf00      	nop
 8007056:	e002      	b.n	800705e <USB_HC_StartXfer+0x1ce>
        break;
 8007058:	bf00      	nop
 800705a:	e000      	b.n	800705e <USB_HC_StartXfer+0x1ce>
        break;
 800705c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68d9      	ldr	r1, [r3, #12]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	785a      	ldrb	r2, [r3, #1]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	b29b      	uxth	r3, r3
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fbd3 	bl	8006818 <USB_WritePacket>
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3720      	adds	r7, #32
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	1ff80000 	.word	0x1ff80000

08007080 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007092:	695b      	ldr	r3, [r3, #20]
 8007094:	b29b      	uxth	r3, r3
}
 8007096:	4618      	mov	r0, r3
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b089      	sub	sp, #36	; 0x24
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80070b2:	78fb      	ldrb	r3, [r7, #3]
 80070b4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	015a      	lsls	r2, r3, #5
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0c9b      	lsrs	r3, r3, #18
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	0fdb      	lsrs	r3, r3, #31
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d104      	bne.n	80070fc <USB_HC_Halt+0x5a>
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80070f8:	2300      	movs	r3, #0
 80070fa:	e0c8      	b.n	800728e <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <USB_HC_Halt+0x66>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d163      	bne.n	80071d0 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	4413      	add	r3, r2
 8007110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69ba      	ldr	r2, [r7, #24]
 8007118:	0151      	lsls	r1, r2, #5
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	440a      	add	r2, r1
 800711e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007122:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007126:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 0320 	and.w	r3, r3, #32
 8007130:	2b00      	cmp	r3, #0
 8007132:	f040 80ab 	bne.w	800728c <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800713a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800713e:	2b00      	cmp	r3, #0
 8007140:	d133      	bne.n	80071aa <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	4413      	add	r3, r2
 800714a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	69fa      	ldr	r2, [r7, #28]
 8007156:	440a      	add	r2, r1
 8007158:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800715c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007160:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	69fa      	ldr	r2, [r7, #28]
 8007176:	440a      	add	r2, r1
 8007178:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800717c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007180:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718e:	d81d      	bhi.n	80071cc <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007190:	69bb      	ldr	r3, [r7, #24]
 8007192:	015a      	lsls	r2, r3, #5
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	4413      	add	r3, r2
 8007198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071a6:	d0ec      	beq.n	8007182 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071a8:	e070      	b.n	800728c <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	0151      	lsls	r1, r2, #5
 80071bc:	69fa      	ldr	r2, [r7, #28]
 80071be:	440a      	add	r2, r1
 80071c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ca:	e05f      	b.n	800728c <USB_HC_Halt+0x1ea>
            break;
 80071cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071ce:	e05d      	b.n	800728c <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	0151      	lsls	r1, r2, #5
 80071e2:	69fa      	ldr	r2, [r7, #28]
 80071e4:	440a      	add	r2, r1
 80071e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80071ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071f6:	691b      	ldr	r3, [r3, #16]
 80071f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d133      	bne.n	8007268 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	440a      	add	r2, r1
 8007216:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800721a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800721e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	440a      	add	r2, r1
 8007236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800723a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800723e:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800724c:	d81d      	bhi.n	800728a <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800724e:	69bb      	ldr	r3, [r7, #24]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007264:	d0ec      	beq.n	8007240 <USB_HC_Halt+0x19e>
 8007266:	e011      	b.n	800728c <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	015a      	lsls	r2, r3, #5
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	4413      	add	r3, r2
 8007270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	0151      	lsls	r1, r2, #5
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	440a      	add	r2, r1
 800727e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007282:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e000      	b.n	800728c <USB_HC_Halt+0x1ea>
          break;
 800728a:	bf00      	nop
    }
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3724      	adds	r7, #36	; 0x24
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b088      	sub	sp, #32
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff f9f1 	bl	8006696 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072b4:	2110      	movs	r1, #16
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fa4a 	bl	8006750 <USB_FlushTxFifo>
 80072bc:	4603      	mov	r3, r0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d001      	beq.n	80072c6 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff fa76 	bl	80067b8 <USB_FlushRxFifo>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80072d6:	2300      	movs	r3, #0
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	e01f      	b.n	800731c <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	015a      	lsls	r2, r3, #5
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80072f2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072fa:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007302:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	4413      	add	r3, r2
 800730c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007310:	461a      	mov	r2, r3
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007316:	69bb      	ldr	r3, [r7, #24]
 8007318:	3301      	adds	r3, #1
 800731a:	61bb      	str	r3, [r7, #24]
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	2b0f      	cmp	r3, #15
 8007320:	d9dc      	bls.n	80072dc <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007322:	2300      	movs	r3, #0
 8007324:	61bb      	str	r3, [r7, #24]
 8007326:	e034      	b.n	8007392 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	4413      	add	r3, r2
 8007330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007346:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800734e:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	015a      	lsls	r2, r3, #5
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	4413      	add	r3, r2
 8007358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800735c:	461a      	mov	r2, r3
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800736e:	d80c      	bhi.n	800738a <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	4413      	add	r3, r2
 8007378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007386:	d0ec      	beq.n	8007362 <USB_StopHost+0xc8>
 8007388:	e000      	b.n	800738c <USB_StopHost+0xf2>
        break;
 800738a:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	3301      	adds	r3, #1
 8007390:	61bb      	str	r3, [r7, #24]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	2b0f      	cmp	r3, #15
 8007396:	d9c7      	bls.n	8007328 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800739e:	461a      	mov	r2, r3
 80073a0:	f04f 33ff 	mov.w	r3, #4294967295
 80073a4:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f04f 32ff 	mov.w	r2, #4294967295
 80073ac:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7ff f960 	bl	8006674 <USB_EnableGlobalInt>

  return ret;
 80073b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3720      	adds	r7, #32
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80073be:	b590      	push	{r4, r7, lr}
 80073c0:	b08b      	sub	sp, #44	; 0x2c
 80073c2:	af04      	add	r7, sp, #16
 80073c4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 80073ca:	2300      	movs	r3, #0
 80073cc:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 80073ce:	2300      	movs	r3, #0
 80073d0:	2201      	movs	r2, #1
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f001 ff9e 	bl	8009316 <USBH_FindInterface>
 80073da:	4603      	mov	r3, r0
 80073dc:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 80073de:	7c7b      	ldrb	r3, [r7, #17]
 80073e0:	2bff      	cmp	r3, #255	; 0xff
 80073e2:	d101      	bne.n	80073e8 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073e4:	2302      	movs	r3, #2
 80073e6:	e1a5      	b.n	8007734 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 444c 	ldr.w	r4, [r3, #1100]	; 0x44c
 80073ee:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 80073f2:	f003 fd6d 	bl	800aed0 <malloc>
 80073f6:	4603      	mov	r3, r0
 80073f8:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800740a:	2302      	movs	r3, #2
 800740c:	e192      	b.n	8007734 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 800740e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007412:	2100      	movs	r1, #0
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f004 fb70 	bl	800bafa <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f000 fc0f 	bl	8007c3e <USBH_AUDIO_FindAudioStreamingIN>
 8007420:	4603      	mov	r3, r0
 8007422:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fcc9 	bl	8007dbc <USBH_AUDIO_FindAudioStreamingOUT>
 800742a:	4603      	mov	r3, r0
 800742c:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	2b02      	cmp	r3, #2
 8007432:	d104      	bne.n	800743e <USBH_AUDIO_InterfaceInit+0x80>
 8007434:	7abb      	ldrb	r3, [r7, #10]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d101      	bne.n	800743e <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800743a:	2302      	movs	r3, #2
 800743c:	e17a      	b.n	8007734 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]
 8007442:	e0c6      	b.n	80075d2 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8007444:	7dfa      	ldrb	r2, [r7, #23]
 8007446:	68f9      	ldr	r1, [r7, #12]
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	440b      	add	r3, r1
 8007452:	333e      	adds	r3, #62	; 0x3e
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d156      	bne.n	8007508 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 800745a:	7dfa      	ldrb	r2, [r7, #23]
 800745c:	68f9      	ldr	r1, [r7, #12]
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	005b      	lsls	r3, r3, #1
 8007466:	440b      	add	r3, r1
 8007468:	333a      	adds	r3, #58	; 0x3a
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	8aba      	ldrh	r2, [r7, #20]
 800746e:	429a      	cmp	r2, r3
 8007470:	d24a      	bcs.n	8007508 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 8007472:	7dfa      	ldrb	r2, [r7, #23]
 8007474:	68f9      	ldr	r1, [r7, #12]
 8007476:	4613      	mov	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	440b      	add	r3, r1
 8007480:	333a      	adds	r3, #58	; 0x3a
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 8007486:	7dfa      	ldrb	r2, [r7, #23]
 8007488:	68f9      	ldr	r1, [r7, #12]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	440b      	add	r3, r1
 8007494:	333d      	adds	r3, #61	; 0x3d
 8007496:	781a      	ldrb	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 800749e:	7dfa      	ldrb	r2, [r7, #23]
 80074a0:	68f9      	ldr	r1, [r7, #12]
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	440b      	add	r3, r1
 80074ac:	333c      	adds	r3, #60	; 0x3c
 80074ae:	781a      	ldrb	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 80074b6:	7dfa      	ldrb	r2, [r7, #23]
 80074b8:	68f9      	ldr	r1, [r7, #12]
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	440b      	add	r3, r1
 80074c4:	3338      	adds	r3, #56	; 0x38
 80074c6:	781a      	ldrb	r2, [r3, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80074ce:	7dfa      	ldrb	r2, [r7, #23]
 80074d0:	68f9      	ldr	r1, [r7, #12]
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	440b      	add	r3, r1
 80074dc:	333a      	adds	r3, #58	; 0x3a
 80074de:	881a      	ldrh	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80074e6:	7dfa      	ldrb	r2, [r7, #23]
 80074e8:	68f9      	ldr	r1, [r7, #12]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	440b      	add	r3, r1
 80074f4:	3340      	adds	r3, #64	; 0x40
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 8007508:	7dfa      	ldrb	r2, [r7, #23]
 800750a:	68f9      	ldr	r1, [r7, #12]
 800750c:	4613      	mov	r3, r2
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	440b      	add	r3, r1
 8007516:	330c      	adds	r3, #12
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d156      	bne.n	80075cc <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 800751e:	7dfa      	ldrb	r2, [r7, #23]
 8007520:	68f9      	ldr	r1, [r7, #12]
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	005b      	lsls	r3, r3, #1
 800752a:	440b      	add	r3, r1
 800752c:	3308      	adds	r3, #8
 800752e:	881b      	ldrh	r3, [r3, #0]
 8007530:	8a7a      	ldrh	r2, [r7, #18]
 8007532:	429a      	cmp	r2, r3
 8007534:	d24a      	bcs.n	80075cc <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 8007536:	7dfa      	ldrb	r2, [r7, #23]
 8007538:	68f9      	ldr	r1, [r7, #12]
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	005b      	lsls	r3, r3, #1
 8007542:	440b      	add	r3, r1
 8007544:	3308      	adds	r3, #8
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800754a:	7dfa      	ldrb	r2, [r7, #23]
 800754c:	68f9      	ldr	r1, [r7, #12]
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	005b      	lsls	r3, r3, #1
 8007556:	440b      	add	r3, r1
 8007558:	330b      	adds	r3, #11
 800755a:	781a      	ldrb	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 8007562:	7dfa      	ldrb	r2, [r7, #23]
 8007564:	68f9      	ldr	r1, [r7, #12]
 8007566:	4613      	mov	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	4413      	add	r3, r2
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	440b      	add	r3, r1
 8007570:	330a      	adds	r3, #10
 8007572:	781a      	ldrb	r2, [r3, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 800757a:	7dfa      	ldrb	r2, [r7, #23]
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	4613      	mov	r3, r2
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	440b      	add	r3, r1
 8007588:	3306      	adds	r3, #6
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 8007592:	7dfa      	ldrb	r2, [r7, #23]
 8007594:	68f9      	ldr	r1, [r7, #12]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	005b      	lsls	r3, r3, #1
 800759e:	440b      	add	r3, r1
 80075a0:	3308      	adds	r3, #8
 80075a2:	881a      	ldrh	r2, [r3, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80075aa:	7dfa      	ldrb	r2, [r7, #23]
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	005b      	lsls	r3, r3, #1
 80075b6:	440b      	add	r3, r1
 80075b8:	3340      	adds	r3, #64	; 0x40
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
        AUDIO_Handle->microphone.supported = 1U;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80075cc:	7dfb      	ldrb	r3, [r7, #23]
 80075ce:	3301      	adds	r3, #1
 80075d0:	75fb      	strb	r3, [r7, #23]
 80075d2:	7dfb      	ldrb	r3, [r7, #23]
 80075d4:	2b04      	cmp	r3, #4
 80075d6:	f67f af35 	bls.w	8007444 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fcad 	bl	8007f3a <USBH_AUDIO_FindHIDControl>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d103      	bne.n	80075ee <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  USBH_AUDIO_ParseCSDescriptors(phost);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fd25 	bl	800803e <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d12e      	bne.n	800765c <USBH_AUDIO_InterfaceInit+0x29e>
  {
    USBH_AUDIO_BuildHeadphonePath(phost);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 ff66 	bl	80084d0 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 800760a:	4619      	mov	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f003 f8d3 	bl	800a7b8 <USBH_AllocPipe>
 8007612:	4603      	mov	r3, r0
 8007614:	461a      	mov	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f893 10fb 	ldrb.w	r1, [r3, #251]	; 0xfb
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f893 00f4 	ldrb.w	r0, [r3, #244]	; 0xf4
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800763a:	9202      	str	r2, [sp, #8]
 800763c:	2201      	movs	r2, #1
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	4623      	mov	r3, r4
 8007644:	4602      	mov	r2, r0
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f003 f887 	bl	800a75a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->headphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007652:	2200      	movs	r2, #0
 8007654:	4619      	mov	r1, r3
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f003 fbb7 	bl	800adca <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007662:	2b01      	cmp	r3, #1
 8007664:	d12e      	bne.n	80076c4 <USBH_AUDIO_InterfaceInit+0x306>
  {
    USBH_AUDIO_BuildMicrophonePath(phost);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 feaa 	bl	80083c0 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8007672:	4619      	mov	r1, r3
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f003 f89f 	bl	800a7b8 <USBH_AllocPipe>
 800767a:	4603      	mov	r3, r0
 800767c:	461a      	mov	r2, r3
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 013c 	ldrb.w	r0, [r3, #316]	; 0x13c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	f8b2 213e 	ldrh.w	r2, [r2, #318]	; 0x13e
 80076a2:	9202      	str	r2, [sp, #8]
 80076a4:	2201      	movs	r2, #1
 80076a6:	9201      	str	r2, [sp, #4]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	4623      	mov	r3, r4
 80076ac:	4602      	mov	r2, r0
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f003 f853 	bl	800a75a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_ISOC,
                  AUDIO_Handle->microphone.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 80076ba:	2200      	movs	r2, #0
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f003 fb83 	bl	800adca <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d12b      	bne.n	8007726 <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f893 3184 	ldrb.w	r3, [r3, #388]	; 0x184
 80076d4:	4619      	mov	r1, r3
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f003 f86e 	bl	800a7b8 <USBH_AllocPipe>
 80076dc:	4603      	mov	r3, r0
 80076de:	461a      	mov	r2, r3
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a

    /* Open pipe for IN endpoint */
    USBH_OpenPipe(phost,
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f893 118a 	ldrb.w	r1, [r3, #394]	; 0x18a
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 0184 	ldrb.w	r0, [r3, #388]	; 0x184
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f8b2 2186 	ldrh.w	r2, [r2, #390]	; 0x186
 8007704:	9202      	str	r2, [sp, #8]
 8007706:	2203      	movs	r2, #3
 8007708:	9201      	str	r2, [sp, #4]
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	4623      	mov	r3, r4
 800770e:	4602      	mov	r2, r0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f003 f822 	bl	800a75a <USBH_OpenPipe>
                  phost->device.address,
                  phost->device.speed,
                  USB_EP_TYPE_INTR,
                  AUDIO_Handle->control.EpSize);

    USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 800771c:	2200      	movs	r2, #0
 800771e:	4619      	mov	r1, r3
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f003 fb52 	bl	800adca <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2201      	movs	r2, #1
 8007730:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8007732:	2300      	movs	r3, #0
}
 8007734:	4618      	mov	r0, r3
 8007736:	371c      	adds	r7, #28
 8007738:	46bd      	mov	sp, r7
 800773a:	bd90      	pop	{r4, r7, pc}

0800773c <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 8007754:	2b00      	cmp	r3, #0
 8007756:	d011      	beq.n	800777c <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800775e:	4619      	mov	r1, r3
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f003 f819 	bl	800a798 <USBH_ClosePipe>
    USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f893 3143 	ldrb.w	r3, [r3, #323]	; 0x143
 800776c:	4619      	mov	r1, r3
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f003 f844 	bl	800a7fc <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8007782:	2b00      	cmp	r3, #0
 8007784:	d011      	beq.n	80077aa <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f003 f802 	bl	800a798 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f003 f82d 	bl	800a7fc <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d011      	beq.n	80077d8 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f002 ffeb 	bl	800a798 <USBH_ClosePipe>
    USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 80077c8:	4619      	mov	r1, r3
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f003 f816 	bl	800a7fc <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 218a 	strb.w	r2, [r3, #394]	; 0x18a
  }

  if (phost->pActiveClass->pData)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077de:	69db      	ldr	r3, [r3, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00b      	beq.n	80077fc <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f003 fb77 	bl	800aee0 <free>
    phost->pActiveClass->pData = 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80077f8:	2200      	movs	r2, #0
 80077fa:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK ;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 800781a:	2301      	movs	r3, #1
 800781c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	3b01      	subs	r3, #1
 8007828:	2b06      	cmp	r3, #6
 800782a:	f200 80be 	bhi.w	80079aa <USBH_AUDIO_ClassRequest+0x1a2>
 800782e:	a201      	add	r2, pc, #4	; (adr r2, 8007834 <USBH_AUDIO_ClassRequest+0x2c>)
 8007830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007834:	08007851 	.word	0x08007851
 8007838:	08007993 	.word	0x08007993
 800783c:	08007851 	.word	0x08007851
 8007840:	08007893 	.word	0x08007893
 8007844:	0800790b 	.word	0x0800790b
 8007848:	0800794f 	.word	0x0800794f
 800784c:	080078f7 	.word	0x080078f7
  {
  case AUDIO_REQ_INIT:
  case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007856:	2b01      	cmp	r3, #1
 8007858:	d117      	bne.n	800788a <USBH_AUDIO_ClassRequest+0x82>
    {
      req_status = USBH_SetInterface(phost,
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8007860:	2200      	movs	r2, #0
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f002 fb28 	bl	8009eba <USBH_SetInterface>
 800786a:	4603      	mov	r3, r0
 800786c:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <USBH_AUDIO_ClassRequest+0x74>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2204      	movs	r2, #4
 8007878:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800787a:	e098      	b.n	80079ae <USBH_AUDIO_ClassRequest+0x1a6>
      else if (req_status == USBH_NOT_SUPPORTED)
 800787c:	7bfb      	ldrb	r3, [r7, #15]
 800787e:	2b03      	cmp	r3, #3
 8007880:	f040 8095 	bne.w	80079ae <USBH_AUDIO_ClassRequest+0x1a6>
        status = USBH_FAIL;
 8007884:	2302      	movs	r3, #2
 8007886:	75fb      	strb	r3, [r7, #23]
    break;
 8007888:	e091      	b.n	80079ae <USBH_AUDIO_ClassRequest+0x1a6>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2204      	movs	r2, #4
 800788e:	701a      	strb	r2, [r3, #0]
    break;
 8007890:	e08d      	b.n	80079ae <USBH_AUDIO_ClassRequest+0x1a6>

  case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007898:	2b01      	cmp	r3, #1
 800789a:	d125      	bne.n	80078e8 <USBH_AUDIO_ClassRequest+0xe0>
    {
      req_status = USBH_SetInterface(phost,
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80078a2:	2200      	movs	r2, #0
 80078a4:	4619      	mov	r1, r3
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f002 fb07 	bl	8009eba <USBH_SetInterface>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     0U);

      if (req_status == USBH_OK)
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d112      	bne.n	80078dc <USBH_AUDIO_ClassRequest+0xd4>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2207      	movs	r2, #7
 80078ba:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2206      	movs	r2, #6
 80078c0:	705a      	strb	r2, [r3, #1]

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80078da:	e06a      	b.n	80079b2 <USBH_AUDIO_ClassRequest+0x1aa>
      else if (req_status == USBH_NOT_SUPPORTED)
 80078dc:	7bfb      	ldrb	r3, [r7, #15]
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d167      	bne.n	80079b2 <USBH_AUDIO_ClassRequest+0x1aa>
        status = USBH_FAIL;
 80078e2:	2302      	movs	r3, #2
 80078e4:	75fb      	strb	r3, [r7, #23]
    break;
 80078e6:	e064      	b.n	80079b2 <USBH_AUDIO_ClassRequest+0x1aa>
      AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	2207      	movs	r2, #7
 80078ec:	701a      	strb	r2, [r3, #0]
      AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2206      	movs	r2, #6
 80078f2:	705a      	strb	r2, [r3, #1]
    break;
 80078f4:	e05d      	b.n	80079b2 <USBH_AUDIO_ClassRequest+0x1aa>

  case AUDIO_REQ_CS_REQUESTS:
    if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f938 	bl	8007b6c <USBH_AUDIO_HandleCSRequest>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d159      	bne.n	80079b6 <USBH_AUDIO_ClassRequest+0x1ae>
    {
      AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	2205      	movs	r2, #5
 8007906:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007908:	e055      	b.n	80079b6 <USBH_AUDIO_ClassRequest+0x1ae>

  case AUDIO_REQ_SET_IN_INTERFACE:
    if (AUDIO_Handle->microphone.supported == 1U)
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007910:	2b01      	cmp	r3, #1
 8007912:	d118      	bne.n	8007946 <USBH_AUDIO_ClassRequest+0x13e>
    {
      req_status = USBH_SetInterface(phost,
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	f893 3141 	ldrb.w	r3, [r3, #321]	; 0x141
 8007920:	461a      	mov	r2, r3
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f002 fac9 	bl	8009eba <USBH_SetInterface>
 8007928:	4603      	mov	r3, r0
 800792a:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->microphone.interface,
                                     AUDIO_Handle->microphone.AltSettings);

      if (req_status == USBH_OK)
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d103      	bne.n	800793a <USBH_AUDIO_ClassRequest+0x132>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2206      	movs	r2, #6
 8007936:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007938:	e03f      	b.n	80079ba <USBH_AUDIO_ClassRequest+0x1b2>
      else if (req_status == USBH_NOT_SUPPORTED)
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d13c      	bne.n	80079ba <USBH_AUDIO_ClassRequest+0x1b2>
        status = USBH_FAIL;
 8007940:	2302      	movs	r3, #2
 8007942:	75fb      	strb	r3, [r7, #23]
    break;
 8007944:	e039      	b.n	80079ba <USBH_AUDIO_ClassRequest+0x1b2>
      AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2206      	movs	r2, #6
 800794a:	701a      	strb	r2, [r3, #0]
    break;
 800794c:	e035      	b.n	80079ba <USBH_AUDIO_ClassRequest+0x1b2>
  case AUDIO_REQ_SET_OUT_INTERFACE:
    if (AUDIO_Handle->headphone.supported == 1U)
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007954:	2b01      	cmp	r3, #1
 8007956:	d118      	bne.n	800798a <USBH_AUDIO_ClassRequest+0x182>
    {
      req_status = USBH_SetInterface(phost,
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	f893 30f9 	ldrb.w	r3, [r3, #249]	; 0xf9
 8007964:	461a      	mov	r2, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f002 faa7 	bl	8009eba <USBH_SetInterface>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]
                                     AUDIO_Handle->headphone.interface,
                                     AUDIO_Handle->headphone.AltSettings);

      if (req_status == USBH_OK)
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d103      	bne.n	800797e <USBH_AUDIO_ClassRequest+0x176>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2202      	movs	r2, #2
 800797a:	701a      	strb	r2, [r3, #0]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800797c:	e01f      	b.n	80079be <USBH_AUDIO_ClassRequest+0x1b6>
      else if (req_status == USBH_NOT_SUPPORTED)
 800797e:	7bfb      	ldrb	r3, [r7, #15]
 8007980:	2b03      	cmp	r3, #3
 8007982:	d11c      	bne.n	80079be <USBH_AUDIO_ClassRequest+0x1b6>
        status = USBH_FAIL;
 8007984:	2302      	movs	r3, #2
 8007986:	75fb      	strb	r3, [r7, #23]
    break;
 8007988:	e019      	b.n	80079be <USBH_AUDIO_ClassRequest+0x1b6>
      AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2202      	movs	r2, #2
 800798e:	701a      	strb	r2, [r3, #0]
    break;
 8007990:	e015      	b.n	80079be <USBH_AUDIO_ClassRequest+0x1b6>
  case AUDIO_REQ_IDLE:
    AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	2201      	movs	r2, #1
 8007996:	709a      	strb	r2, [r3, #2]
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800799e:	2102      	movs	r1, #2
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	4798      	blx	r3
    status  = USBH_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	75fb      	strb	r3, [r7, #23]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80079a8:	e00a      	b.n	80079c0 <USBH_AUDIO_ClassRequest+0x1b8>

  default:
    break;
 80079aa:	bf00      	nop
 80079ac:	e008      	b.n	80079c0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079ae:	bf00      	nop
 80079b0:	e006      	b.n	80079c0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079b2:	bf00      	nop
 80079b4:	e004      	b.n	80079c0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079b6:	bf00      	nop
 80079b8:	e002      	b.n	80079c0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079ba:	bf00      	nop
 80079bc:	e000      	b.n	80079c0 <USBH_AUDIO_ClassRequest+0x1b8>
    break;
 80079be:	bf00      	nop
  }
  return status;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop

080079cc <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b088      	sub	sp, #32
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
 80079d8:	4613      	mov	r3, r2
 80079da:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80079e2:	69db      	ldr	r3, [r3, #28]
 80079e4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 80079e6:	2301      	movs	r3, #1
 80079e8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 80079ea:	2301      	movs	r3, #1
 80079ec:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	785b      	ldrb	r3, [r3, #1]
 80079f2:	3b04      	subs	r3, #4
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	f200 80aa 	bhi.w	8007b4e <USBH_AUDIO_CSRequest+0x182>
 80079fa:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <USBH_AUDIO_CSRequest+0x34>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a5d 	.word	0x08007a5d
 8007a04:	08007aa3 	.word	0x08007aa3
 8007a08:	08007a15 	.word	0x08007a15
 8007a0c:	08007b03 	.word	0x08007b03
 8007a10:	08007b49 	.word	0x08007b49
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8007a14:	78fa      	ldrb	r2, [r7, #3]
 8007a16:	2302      	movs	r3, #2
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	78bb      	ldrb	r3, [r7, #2]
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	2302      	movs	r3, #2
 8007a20:	2106      	movs	r1, #6
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fe92 	bl	800874c <USBH_AC_GetCur>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	f000 808f 	beq.w	8007b52 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	2204      	movs	r2, #4
 8007a38:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007a46:	3302      	adds	r3, #2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	021b      	lsls	r3, r3, #8
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8007a52:	897a      	ldrh	r2, [r7, #10]
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      }
      break;
 8007a5a:	e07a      	b.n	8007b52 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8007a5c:	78fa      	ldrb	r2, [r7, #3]
 8007a5e:	2302      	movs	r3, #2
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	78bb      	ldrb	r3, [r7, #2]
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	2302      	movs	r3, #2
 8007a68:	2106      	movs	r1, #6
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f001 f833 	bl	8008ad6 <USBH_AC_GetMin>
 8007a70:	4603      	mov	r3, r0
 8007a72:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d06d      	beq.n	8007b56 <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	2205      	movs	r2, #5
 8007a7e:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007a8c:	3302      	adds	r3, #2
 8007a8e:	881b      	ldrh	r3, [r3, #0]
 8007a90:	021b      	lsls	r3, r3, #8
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	4313      	orrs	r3, r2
 8007a96:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8007a98:	897a      	ldrh	r2, [r7, #10]
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      }
      break;
 8007aa0:	e059      	b.n	8007b56 <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	9301      	str	r3, [sp, #4]
 8007aa8:	78bb      	ldrb	r3, [r7, #2]
 8007aaa:	9300      	str	r3, [sp, #0]
 8007aac:	2302      	movs	r3, #2
 8007aae:	2106      	movs	r1, #6
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fee2 	bl	800887a <USBH_AC_GetMax>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d04c      	beq.n	8007b5a <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2207      	movs	r2, #7
 8007ac4:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007ad2:	3302      	adds	r3, #2
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	021b      	lsls	r3, r3, #8
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8007ade:	897a      	ldrh	r2, [r7, #10]
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d231      	bcs.n	8007b5a <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8007afc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
        }
      }
      break;
 8007b00:	e02b      	b.n	8007b5a <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8007b02:	78fa      	ldrb	r2, [r7, #3]
 8007b04:	2302      	movs	r3, #2
 8007b06:	9301      	str	r3, [sp, #4]
 8007b08:	78bb      	ldrb	r3, [r7, #2]
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	2106      	movs	r1, #6
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 ff49 	bl	80089a8 <USBH_AC_GetRes>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d01e      	beq.n	8007b5e <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	2208      	movs	r2, #8
 8007b24:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8007b32:	3302      	adds	r3, #2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	021b      	lsls	r3, r3, #8
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8007b3e:	89ba      	ldrh	r2, [r7, #12]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      }
      break;
 8007b46:	e00a      	b.n	8007b5e <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4c:	e008      	b.n	8007b60 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8007b4e:	bf00      	nop
 8007b50:	e006      	b.n	8007b60 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b52:	bf00      	nop
 8007b54:	e004      	b.n	8007b60 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b56:	bf00      	nop
 8007b58:	e002      	b.n	8007b60 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b5a:	bf00      	nop
 8007b5c:	e000      	b.n	8007b60 <USBH_AUDIO_CSRequest+0x194>
      break;
 8007b5e:	bf00      	nop
  }
  return status;
 8007b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop

08007b6c <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007b92:	461a      	mov	r2, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff ff19 	bl	80079cc <USBH_AUDIO_CSRequest>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d01c      	beq.n	8007bde <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d10c      	bne.n	8007bc8 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	73fb      	strb	r3, [r7, #15]
 8007bc6:	e007      	b.n	8007bd8 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2206      	movs	r2, #6
 8007bdc:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
  }

  return status;
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007bfa:	69db      	ldr	r3, [r3, #28]
 8007bfc:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d102      	bne.n	8007c0e <USBH_AUDIO_Process+0x26>
  {
    USBH_AUDIO_OutputStream(phost);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f8e5 	bl	8008dd8 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d102      	bne.n	8007c1e <USBH_AUDIO_Process+0x36>
  {
    USBH_AUDIO_InputStream(phost);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f001 f81b 	bl	8008c54 <USBH_AUDIO_InputStream>
  }

  return status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007c46:	2302      	movs	r3, #2
 8007c48:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	e09e      	b.n	8007d9c <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	211a      	movs	r1, #26
 8007c64:	fb01 f303 	mul.w	r3, r1, r3
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	f040 8090 	bne.w	8007d96 <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	211a      	movs	r1, #26
 8007c7c:	fb01 f303 	mul.w	r3, r1, r3
 8007c80:	4413      	add	r3, r2
 8007c82:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007c86:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f040 8084 	bne.w	8007d96 <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	211a      	movs	r1, #26
 8007c94:	fb01 f303 	mul.w	r3, r1, r3
 8007c98:	4413      	add	r3, r2
 8007c9a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	b25b      	sxtb	r3, r3
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	da77      	bge.n	8007d96 <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007ca6:	7bfb      	ldrb	r3, [r7, #15]
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	211a      	movs	r1, #26
 8007cac:	fb01 f303 	mul.w	r3, r1, r3
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007cb6:	881b      	ldrh	r3, [r3, #0]
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) &&
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d06c      	beq.n	8007d96 <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	7bba      	ldrb	r2, [r7, #14]
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	201a      	movs	r0, #26
 8007cc4:	fb00 f303 	mul.w	r3, r0, r3
 8007cc8:	440b      	add	r3, r1
 8007cca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007cce:	7818      	ldrb	r0, [r3, #0]
 8007cd0:	68b9      	ldr	r1, [r7, #8]
 8007cd2:	4613      	mov	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4413      	add	r3, r2
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	440b      	add	r3, r1
 8007cdc:	3306      	adds	r3, #6
 8007cde:	4602      	mov	r2, r0
 8007ce0:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ce2:	7bfb      	ldrb	r3, [r7, #15]
 8007ce4:	7bba      	ldrb	r2, [r7, #14]
 8007ce6:	6879      	ldr	r1, [r7, #4]
 8007ce8:	201a      	movs	r0, #26
 8007cea:	fb00 f303 	mul.w	r3, r0, r3
 8007cee:	440b      	add	r3, r1
 8007cf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007cf4:	8818      	ldrh	r0, [r3, #0]
 8007cf6:	68b9      	ldr	r1, [r7, #8]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	440b      	add	r3, r1
 8007d02:	3308      	adds	r3, #8
 8007d04:	4602      	mov	r2, r0
 8007d06:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007d08:	7bfb      	ldrb	r3, [r7, #15]
 8007d0a:	7bba      	ldrb	r2, [r7, #14]
 8007d0c:	6879      	ldr	r1, [r7, #4]
 8007d0e:	201a      	movs	r0, #26
 8007d10:	fb00 f303 	mul.w	r3, r0, r3
 8007d14:	440b      	add	r3, r1
 8007d16:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007d1a:	7818      	ldrb	r0, [r3, #0]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	005b      	lsls	r3, r3, #1
 8007d26:	440b      	add	r3, r1
 8007d28:	330b      	adds	r3, #11
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	7bba      	ldrb	r2, [r7, #14]
 8007d32:	6879      	ldr	r1, [r7, #4]
 8007d34:	201a      	movs	r0, #26
 8007d36:	fb00 f303 	mul.w	r3, r0, r3
 8007d3a:	440b      	add	r3, r1
 8007d3c:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007d40:	7818      	ldrb	r0, [r3, #0]
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	005b      	lsls	r3, r3, #1
 8007d4c:	440b      	add	r3, r1
 8007d4e:	330a      	adds	r3, #10
 8007d50:	4602      	mov	r2, r0
 8007d52:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	211a      	movs	r1, #26
 8007d5a:	fb01 f303 	mul.w	r3, r1, r3
 8007d5e:	4413      	add	r3, r2
 8007d60:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	7bba      	ldrb	r2, [r7, #14]
 8007d68:	b298      	uxth	r0, r3
 8007d6a:	68b9      	ldr	r1, [r7, #8]
 8007d6c:	4613      	mov	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	4413      	add	r3, r2
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	440b      	add	r3, r1
 8007d76:	330e      	adds	r3, #14
 8007d78:	4602      	mov	r2, r0
 8007d7a:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8007d7c:	7bba      	ldrb	r2, [r7, #14]
 8007d7e:	68b9      	ldr	r1, [r7, #8]
 8007d80:	4613      	mov	r3, r2
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	440b      	add	r3, r1
 8007d8a:	330c      	adds	r3, #12
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	3301      	adds	r3, #1
 8007d94:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	3301      	adds	r3, #1
 8007d9a:	73fb      	strb	r3, [r7, #15]
 8007d9c:	7bfb      	ldrb	r3, [r7, #15]
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	f67f af5d 	bls.w	8007c5e <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007da4:	7bbb      	ldrb	r3, [r7, #14]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d001      	beq.n	8007dae <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007dae:	7b7b      	ldrb	r3, [r7, #13]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3714      	adds	r7, #20
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	73fb      	strb	r3, [r7, #15]
 8007dda:	e09e      	b.n	8007f1a <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	211a      	movs	r1, #26
 8007de2:	fb01 f303 	mul.w	r3, r1, r3
 8007de6:	4413      	add	r3, r2
 8007de8:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	f040 8090 	bne.w	8007f14 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	211a      	movs	r1, #26
 8007dfa:	fb01 f303 	mul.w	r3, r1, r3
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8007e04:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	f040 8084 	bne.w	8007f14 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	211a      	movs	r1, #26
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	b25b      	sxtb	r3, r3
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	db77      	blt.n	8007f14 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	211a      	movs	r1, #26
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e34:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d06c      	beq.n	8007f14 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	7bba      	ldrb	r2, [r7, #14]
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	201a      	movs	r0, #26
 8007e42:	fb00 f303 	mul.w	r3, r0, r3
 8007e46:	440b      	add	r3, r1
 8007e48:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e4c:	7818      	ldrb	r0, [r3, #0]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	440b      	add	r3, r1
 8007e5a:	3338      	adds	r3, #56	; 0x38
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	7bba      	ldrb	r2, [r7, #14]
 8007e64:	6879      	ldr	r1, [r7, #4]
 8007e66:	201a      	movs	r0, #26
 8007e68:	fb00 f303 	mul.w	r3, r0, r3
 8007e6c:	440b      	add	r3, r1
 8007e6e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e72:	8818      	ldrh	r0, [r3, #0]
 8007e74:	68b9      	ldr	r1, [r7, #8]
 8007e76:	4613      	mov	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	440b      	add	r3, r1
 8007e80:	333a      	adds	r3, #58	; 0x3a
 8007e82:	4602      	mov	r2, r0
 8007e84:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007e86:	7bfb      	ldrb	r3, [r7, #15]
 8007e88:	7bba      	ldrb	r2, [r7, #14]
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	201a      	movs	r0, #26
 8007e8e:	fb00 f303 	mul.w	r3, r0, r3
 8007e92:	440b      	add	r3, r1
 8007e94:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007e98:	7818      	ldrb	r0, [r3, #0]
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	005b      	lsls	r3, r3, #1
 8007ea4:	440b      	add	r3, r1
 8007ea6:	333d      	adds	r3, #61	; 0x3d
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	7bba      	ldrb	r2, [r7, #14]
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	201a      	movs	r0, #26
 8007eb4:	fb00 f303 	mul.w	r3, r0, r3
 8007eb8:	440b      	add	r3, r1
 8007eba:	f203 3345 	addw	r3, r3, #837	; 0x345
 8007ebe:	7818      	ldrb	r0, [r3, #0]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	440b      	add	r3, r1
 8007ecc:	333c      	adds	r3, #60	; 0x3c
 8007ece:	4602      	mov	r2, r0
 8007ed0:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	211a      	movs	r1, #26
 8007ed8:	fb01 f303 	mul.w	r3, r1, r3
 8007edc:	4413      	add	r3, r2
 8007ede:	f203 3352 	addw	r3, r3, #850	; 0x352
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	7bba      	ldrb	r2, [r7, #14]
 8007ee6:	b298      	uxth	r0, r3
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	4613      	mov	r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	4413      	add	r3, r2
 8007ef0:	005b      	lsls	r3, r3, #1
 8007ef2:	440b      	add	r3, r1
 8007ef4:	3340      	adds	r3, #64	; 0x40
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 8007efa:	7bba      	ldrb	r2, [r7, #14]
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	4613      	mov	r3, r2
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	4413      	add	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	440b      	add	r3, r1
 8007f08:	333e      	adds	r3, #62	; 0x3e
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	3301      	adds	r3, #1
 8007f12:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007f14:	7bfb      	ldrb	r3, [r7, #15]
 8007f16:	3301      	adds	r3, #1
 8007f18:	73fb      	strb	r3, [r7, #15]
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b09      	cmp	r3, #9
 8007f1e:	f67f af5d 	bls.w	8007ddc <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007f22:	7bbb      	ldrb	r3, [r7, #14]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d001      	beq.n	8007f2c <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007f2c:	7b7b      	ldrb	r3, [r7, #13]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b084      	sub	sp, #16
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8007f42:	2302      	movs	r3, #2
 8007f44:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8007f50:	23ff      	movs	r3, #255	; 0xff
 8007f52:	2201      	movs	r2, #1
 8007f54:	2101      	movs	r1, #1
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 f9dd 	bl	8009316 <USBH_FindInterface>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	2bff      	cmp	r3, #255	; 0xff
 8007f64:	d002      	beq.n	8007f6c <USBH_AUDIO_FindHIDControl+0x32>
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	2b09      	cmp	r3, #9
 8007f6a:	d901      	bls.n	8007f70 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e062      	b.n	8008036 <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007f70:	2300      	movs	r3, #0
 8007f72:	73fb      	strb	r3, [r7, #15]
 8007f74:	e05b      	b.n	800802e <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	211a      	movs	r1, #26
 8007f7c:	fb01 f303 	mul.w	r3, r1, r3
 8007f80:	4413      	add	r3, r2
 8007f82:	f203 3347 	addw	r3, r3, #839	; 0x347
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b03      	cmp	r3, #3
 8007f8a:	d14d      	bne.n	8008028 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	211a      	movs	r1, #26
 8007f92:	fb01 f303 	mul.w	r3, r1, r3
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f9c:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d042      	beq.n	8008028 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	211a      	movs	r1, #26
 8007fa8:	fb01 f303 	mul.w	r3, r1, r3
 8007fac:	4413      	add	r3, r2
 8007fae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	b25b      	sxtb	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	da36      	bge.n	8008028 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	687a      	ldr	r2, [r7, #4]
 8007fbe:	211a      	movs	r1, #26
 8007fc0:	fb01 f303 	mul.w	r3, r1, r3
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007fca:	781a      	ldrb	r2, [r3, #0]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f883 2184 	strb.w	r2, [r3, #388]	; 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	211a      	movs	r1, #26
 8007fd8:	fb01 f303 	mul.w	r3, r1, r3
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007fe2:	881a      	ldrh	r2, [r3, #0]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	f8a3 2186 	strh.w	r2, [r3, #390]	; 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	211a      	movs	r1, #26
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	4413      	add	r3, r2
 8007ff6:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8007ffa:	781a      	ldrb	r2, [r3, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	f883 2188 	strb.w	r2, [r3, #392]	; 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008002:	7bfb      	ldrb	r3, [r7, #15]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	211a      	movs	r1, #26
 8008008:	fb01 f303 	mul.w	r3, r1, r3
 800800c:	4413      	add	r3, r2
 800800e:	f203 3352 	addw	r3, r3, #850	; 0x352
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	f883 218b 	strb.w	r2, [r3, #395]	; 0x18b
        AUDIO_Handle->control.supported = 1U;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2189 	strb.w	r2, [r3, #393]	; 0x189
        status = USBH_OK;
 8008022:	2300      	movs	r3, #0
 8008024:	73bb      	strb	r3, [r7, #14]
        break;
 8008026:	e005      	b.n	8008034 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	3301      	adds	r3, #1
 800802c:	73fb      	strb	r3, [r7, #15]
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b09      	cmp	r3, #9
 8008032:	d9a0      	bls.n	8007f76 <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8008034:	7bbb      	ldrb	r3, [r7, #14]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b088      	sub	sp, #32
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 800804e:	2300      	movs	r3, #0
 8008050:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	331c      	adds	r3, #28
 8008060:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 8008062:	2309      	movs	r3, #9
 8008064:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	2200      	movs	r2, #0
 800806a:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2200      	movs	r2, #0
 8008072:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2200      	movs	r2, #0
 800807a:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	2200      	movs	r2, #0
 8008082:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 8008086:	e03d      	b.n	8008104 <USBH_AUDIO_ParseCSDescriptors+0xc6>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	4619      	mov	r1, r3
 800808e:	69b8      	ldr	r0, [r7, #24]
 8008090:	f002 f8ff 	bl	800a292 <USBH_GetNextDesc>
 8008094:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	785b      	ldrb	r3, [r3, #1]
 800809a:	2b04      	cmp	r3, #4
 800809c:	d002      	beq.n	80080a4 <USBH_AUDIO_ParseCSDescriptors+0x66>
 800809e:	2b24      	cmp	r3, #36	; 0x24
 80080a0:	d00f      	beq.n	80080c2 <USBH_AUDIO_ParseCSDescriptors+0x84>
 80080a2:	e02e      	b.n	8008102 <USBH_AUDIO_ParseCSDescriptors+0xc4>
    {

      case USB_DESC_TYPE_INTERFACE:
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	789b      	ldrb	r3, [r3, #2]
 80080a8:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	78db      	ldrb	r3, [r3, #3]
 80080ae:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 80080b0:	7bfa      	ldrb	r2, [r7, #15]
 80080b2:	7dbb      	ldrb	r3, [r7, #22]
 80080b4:	4619      	mov	r1, r3
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f001 f973 	bl	80093a2 <USBH_FindInterfaceIndex>
 80080bc:	4603      	mov	r3, r0
 80080be:	75fb      	strb	r3, [r7, #23]
        break;
 80080c0:	e020      	b.n	8008104 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      case USB_DESC_TYPE_CS_INTERFACE:
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80080c8:	7dba      	ldrb	r2, [r7, #22]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d81a      	bhi.n	8008104 <USBH_AUDIO_ParseCSDescriptors+0xc6>
        {
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	2bff      	cmp	r3, #255	; 0xff
 80080d2:	d002      	beq.n	80080da <USBH_AUDIO_ParseCSDescriptors+0x9c>
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b09      	cmp	r3, #9
 80080d8:	d902      	bls.n	80080e0 <USBH_AUDIO_ParseCSDescriptors+0xa2>
          {
            USBH_DbgLog("Cannot Find the audio interface index for %s class.", phost->pActiveClass->Name);
            status = USBH_FAIL;
 80080da:	2302      	movs	r3, #2
 80080dc:	77fb      	strb	r3, [r7, #31]
 80080de:	e00f      	b.n	8008100 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          }
          else
          {

            ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	211a      	movs	r1, #26
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 7352 	add.w	r3, r3, #840	; 0x348
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	69ba      	ldr	r2, [r7, #24]
 80080fa:	4619      	mov	r1, r3
 80080fc:	f000 f80e 	bl	800811c <ParseCSDescriptors>
                               phost->device.CfgDesc.Itf_Desc[itf_index].bInterfaceSubClass,
                               (uint8_t *)pdesc);
          }
        }
        break;
 8008100:	e000      	b.n	8008104 <USBH_AUDIO_ParseCSDescriptors+0xc6>

      default:
        break;
 8008102:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8b3 233a 	ldrh.w	r2, [r3, #826]	; 0x33a
 800810a:	89bb      	ldrh	r3, [r7, #12]
 800810c:	429a      	cmp	r2, r3
 800810e:	d8bb      	bhi.n	8008088 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8008110:	7ffb      	ldrb	r3, [r7, #31]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3720      	adds	r7, #32
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
	...

0800811c <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	460b      	mov	r3, r1
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800812a:	7afb      	ldrb	r3, [r7, #11]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d163      	bne.n	80081f8 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3302      	adds	r3, #2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	3b01      	subs	r3, #1
 8008138:	2b05      	cmp	r3, #5
 800813a:	f200 8081 	bhi.w	8008240 <ParseCSDescriptors+0x124>
 800813e:	a201      	add	r2, pc, #4	; (adr r2, 8008144 <ParseCSDescriptors+0x28>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	0800815d 	.word	0x0800815d
 8008148:	08008165 	.word	0x08008165
 800814c:	08008181 	.word	0x08008181
 8008150:	080081db 	.word	0x080081db
 8008154:	080081bd 	.word	0x080081bd
 8008158:	0800819f 	.word	0x0800819f
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	601a      	str	r2, [r3, #0]
        break;
 8008162:	e06e      	b.n	8008242 <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	b291      	uxth	r1, r2
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	f8a2 107e 	strh.w	r1, [r2, #126]	; 0x7e
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	605a      	str	r2, [r3, #4]
        break;
 800817e:	e060      	b.n	8008242 <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8008186:	1c5a      	adds	r2, r3, #1
 8008188:	b291      	uxth	r1, r2
 800818a:	68fa      	ldr	r2, [r7, #12]
 800818c:	f8a2 1080 	strh.w	r1, [r2, #128]	; 0x80
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	3304      	adds	r3, #4
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	605a      	str	r2, [r3, #4]
        break;
 800819c:	e051      	b.n	8008242 <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 80081a4:	1c5a      	adds	r2, r3, #1
 80081a6:	b291      	uxth	r1, r2
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	f8a2 1082 	strh.w	r1, [r2, #130]	; 0x82
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	3308      	adds	r3, #8
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	605a      	str	r2, [r3, #4]
        break;
 80081ba:	e042      	b.n	8008242 <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	b291      	uxth	r1, r2
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	3310      	adds	r3, #16
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	605a      	str	r2, [r3, #4]
        break;
 80081d8:	e033      	b.n	8008242 <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	b291      	uxth	r1, r2
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	f8a2 1086 	strh.w	r1, [r2, #134]	; 0x86
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	330c      	adds	r3, #12
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	605a      	str	r2, [r3, #4]
        break;
 80081f6:	e024      	b.n	8008242 <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80081f8:	7afb      	ldrb	r3, [r7, #11]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d121      	bne.n	8008242 <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3302      	adds	r3, #2
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b01      	cmp	r3, #1
 8008206:	d002      	beq.n	800820e <ParseCSDescriptors+0xf2>
 8008208:	2b02      	cmp	r3, #2
 800820a:	d00a      	beq.n	8008222 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 800820c:	e019      	b.n	8008242 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	330a      	adds	r3, #10
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4413      	add	r3, r2
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	605a      	str	r2, [r3, #4]
          break;
 8008220:	e00f      	b.n	8008242 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	b291      	uxth	r1, r2
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	f8a2 107c 	strh.w	r1, [r2, #124]	; 0x7c
 8008232:	68fa      	ldr	r2, [r7, #12]
 8008234:	330a      	adds	r3, #10
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	609a      	str	r2, [r3, #8]
          break;
 800823e:	e000      	b.n	8008242 <ParseCSDescriptors+0x126>
        break;
 8008240:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3714      	adds	r7, #20
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifer
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008262:	69db      	ldr	r3, [r3, #28]
 8008264:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
 800826a:	e01b      	b.n	80082a4 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	3322      	adds	r3, #34	; 0x22
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	78fa      	ldrb	r2, [r7, #3]
 800827c:	429a      	cmp	r2, r3
 800827e:	d10e      	bne.n	800829e <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	3322      	adds	r3, #34	; 0x22
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	78db      	ldrb	r3, [r3, #3]
 800828e:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	041a      	lsls	r2, r3, #16
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	4313      	orrs	r3, r2
 8008298:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800829c:	e089      	b.n	80083b2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	3301      	adds	r3, #1
 80082a2:	73fb      	strb	r3, [r7, #15]
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	; 0xee
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d3dc      	bcc.n	800826c <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
 80082b6:	e026      	b.n	8008306 <USBH_AUDIO_FindLinkedUnit+0xb6>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	68ba      	ldr	r2, [r7, #8]
 80082bc:	3326      	adds	r3, #38	; 0x26
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	795b      	ldrb	r3, [r3, #5]
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	429a      	cmp	r2, r3
 80082ca:	d009      	beq.n	80082e0 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	3326      	adds	r3, #38	; 0x26
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d10f      	bne.n	8008300 <USBH_AUDIO_FindLinkedUnit+0xb0>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80082e0:	7bfb      	ldrb	r3, [r7, #15]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	3326      	adds	r3, #38	; 0x26
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	78db      	ldrb	r3, [r3, #3]
 80082ee:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	461a      	mov	r2, r3
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082fe:	e058      	b.n	80083b2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	3301      	adds	r3, #1
 8008304:	73fb      	strb	r3, [r7, #15]
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	b29a      	uxth	r2, r3
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8008310:	429a      	cmp	r2, r3
 8008312:	d3d1      	bcc.n	80082b8 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e01c      	b.n	8008354 <USBH_AUDIO_FindLinkedUnit+0x104>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	332a      	adds	r3, #42	; 0x2a
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	795b      	ldrb	r3, [r3, #5]
 8008328:	78fa      	ldrb	r2, [r7, #3]
 800832a:	429a      	cmp	r2, r3
 800832c:	d10f      	bne.n	800834e <USBH_AUDIO_FindLinkedUnit+0xfe>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	332a      	adds	r3, #42	; 0x2a
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	78db      	ldrb	r3, [r3, #3]
 800833c:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	041b      	lsls	r3, r3, #16
 8008342:	461a      	mov	r2, r3
 8008344:	7bfb      	ldrb	r3, [r7, #15]
 8008346:	4313      	orrs	r3, r2
 8008348:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800834c:	e031      	b.n	80083b2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	3301      	adds	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
 8008354:	7bfb      	ldrb	r3, [r7, #15]
 8008356:	b29a      	uxth	r2, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 800835e:	429a      	cmp	r2, r3
 8008360:	d3db      	bcc.n	800831a <USBH_AUDIO_FindLinkedUnit+0xca>
    }
  }

  /* Find OT Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
 8008366:	e01c      	b.n	80083a2 <USBH_AUDIO_FindLinkedUnit+0x152>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	331e      	adds	r3, #30
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	79db      	ldrb	r3, [r3, #7]
 8008376:	78fa      	ldrb	r2, [r7, #3]
 8008378:	429a      	cmp	r2, r3
 800837a:	d10f      	bne.n	800839c <USBH_AUDIO_FindLinkedUnit+0x14c>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	331e      	adds	r3, #30
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	78db      	ldrb	r3, [r3, #3]
 800838a:	70fb      	strb	r3, [r7, #3]

      return ((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800838c:	78fb      	ldrb	r3, [r7, #3]
 800838e:	041b      	lsls	r3, r3, #16
 8008390:	461a      	mov	r2, r3
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	4313      	orrs	r3, r2
 8008396:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800839a:	e00a      	b.n	80083b2 <USBH_AUDIO_FindLinkedUnit+0x162>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800839c:	7bfb      	ldrb	r3, [r7, #15]
 800839e:	3301      	adds	r3, #1
 80083a0:	73fb      	strb	r3, [r7, #15]
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	; 0xec
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d3db      	bcc.n	8008368 <USBH_AUDIO_FindLinkedUnit+0x118>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80083c8:	2300      	movs	r3, #0
 80083ca:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80083da:	2300      	movs	r3, #0
 80083dc:	75bb      	strb	r3, [r7, #22]
 80083de:	e02c      	b.n	800843a <USBH_AUDIO_BuildMicrophonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201)
 80083e0:	7dbb      	ldrb	r3, [r7, #22]
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	331a      	adds	r3, #26
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	4413      	add	r3, r2
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	4619      	mov	r1, r3
 80083f0:	7dbb      	ldrb	r3, [r7, #22]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	331a      	adds	r3, #26
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	795b      	ldrb	r3, [r3, #5]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	b29b      	uxth	r3, r3
 8008404:	430b      	orrs	r3, r1
 8008406:	f240 2201 	movw	r2, #513	; 0x201
 800840a:	4293      	cmp	r3, r2
 800840c:	d112      	bne.n	8008434 <USBH_AUDIO_BuildMicrophonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800840e:	7dbb      	ldrb	r3, [r7, #22]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	331a      	adds	r3, #26
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	78db      	ldrb	r3, [r3, #3]
 800841c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800841e:	7dbb      	ldrb	r3, [r7, #22]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	331a      	adds	r3, #26
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	79da      	ldrb	r2, [r3, #7]
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
      break;
 8008432:	e009      	b.n	8008448 <USBH_AUDIO_BuildMicrophonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8008434:	7dbb      	ldrb	r3, [r7, #22]
 8008436:	3301      	adds	r3, #1
 8008438:	75bb      	strb	r3, [r7, #22]
 800843a:	7dbb      	ldrb	r3, [r7, #22]
 800843c:	b29a      	uxth	r2, r3
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8008444:	429a      	cmp	r2, r3
 8008446:	d3cb      	bcc.n	80083e0 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8008448:	7dfb      	ldrb	r3, [r7, #23]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff feff 	bl	8008250 <USBH_AUDIO_FindLinkedUnit>
 8008452:	60f8      	str	r0, [r7, #12]

    if (!value)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <USBH_AUDIO_BuildMicrophonePath+0x9e>
    {
      return USBH_FAIL;
 800845a:	2302      	movs	r3, #2
 800845c:	e034      	b.n	80084c8 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	0a1b      	lsrs	r3, r3, #8
 8008466:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	0c1b      	lsrs	r3, r3, #16
 800846c:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 800846e:	7abb      	ldrb	r3, [r7, #10]
 8008470:	3b03      	subs	r3, #3
 8008472:	2b03      	cmp	r3, #3
 8008474:	d81e      	bhi.n	80084b4 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084ab 	.word	0x080084ab
 8008480:	08008497 	.word	0x08008497
 8008484:	080084a1 	.word	0x080084a1
 8008488:	0800848d 	.word	0x0800848d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	7afa      	ldrb	r2, [r7, #11]
 8008490:	f883 214f 	strb.w	r2, [r3, #335]	; 0x14f
        break;
 8008494:	e011      	b.n	80084ba <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	7afa      	ldrb	r2, [r7, #11]
 800849a:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
        break;
 800849e:	e00c      	b.n	80084ba <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	7afa      	ldrb	r2, [r7, #11]
 80084a4:	f883 214e 	strb.w	r2, [r3, #334]	; 0x14e
        break;
 80084a8:	e007      	b.n	80084ba <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	7afa      	ldrb	r2, [r7, #11]
 80084ae:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
        break;
 80084b2:	e002      	b.n	80084ba <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 80084b4:	2302      	movs	r3, #2
 80084b6:	757b      	strb	r3, [r7, #21]
        break;
 80084b8:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 80084ba:	7abb      	ldrb	r3, [r7, #10]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d002      	beq.n	80084c6 <USBH_AUDIO_BuildMicrophonePath+0x106>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1c0      	bne.n	8008448 <USBH_AUDIO_BuildMicrophonePath+0x88>

  return ret;
 80084c6:	7d7b      	ldrb	r3, [r7, #21]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80084d8:	2300      	movs	r3, #0
 80084da:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80084dc:	2300      	movs	r3, #0
 80084de:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	757b      	strb	r3, [r7, #21]
 80084ee:	e02c      	b.n	800854a <USBH_AUDIO_BuildHeadphonePath+0x7a>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101)
 80084f0:	7d7b      	ldrb	r3, [r7, #21]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	331a      	adds	r3, #26
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	791b      	ldrb	r3, [r3, #4]
 80084fe:	4619      	mov	r1, r3
 8008500:	7d7b      	ldrb	r3, [r7, #21]
 8008502:	693a      	ldr	r2, [r7, #16]
 8008504:	331a      	adds	r3, #26
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	795b      	ldrb	r3, [r3, #5]
 800850e:	b29b      	uxth	r3, r3
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	b29b      	uxth	r3, r3
 8008514:	430b      	orrs	r3, r1
 8008516:	f240 1201 	movw	r2, #257	; 0x101
 800851a:	4293      	cmp	r3, r2
 800851c:	d112      	bne.n	8008544 <USBH_AUDIO_BuildHeadphonePath+0x74>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 800851e:	7d7b      	ldrb	r3, [r7, #21]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	331a      	adds	r3, #26
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	78db      	ldrb	r3, [r3, #3]
 800852c:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 800852e:	7d7b      	ldrb	r3, [r7, #21]
 8008530:	693a      	ldr	r2, [r7, #16]
 8008532:	331a      	adds	r3, #26
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	79da      	ldrb	r2, [r3, #7]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
      break;
 8008542:	e009      	b.n	8008558 <USBH_AUDIO_BuildHeadphonePath+0x88>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8008544:	7d7b      	ldrb	r3, [r7, #21]
 8008546:	3301      	adds	r3, #1
 8008548:	757b      	strb	r3, [r7, #21]
 800854a:	7d7b      	ldrb	r3, [r7, #21]
 800854c:	b29a      	uxth	r2, r3
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	; 0xea
 8008554:	429a      	cmp	r2, r3
 8008556:	d3cb      	bcc.n	80084f0 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8008558:	2300      	movs	r3, #0
 800855a:	75bb      	strb	r3, [r7, #22]
 800855c:	e011      	b.n	8008582 <USBH_AUDIO_BuildHeadphonePath+0xb2>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 800855e:	7dbb      	ldrb	r3, [r7, #22]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	3317      	adds	r3, #23
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	4413      	add	r3, r2
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	78db      	ldrb	r3, [r3, #3]
 800856c:	7dfa      	ldrb	r2, [r7, #23]
 800856e:	429a      	cmp	r2, r3
 8008570:	d104      	bne.n	800857c <USBH_AUDIO_BuildHeadphonePath+0xac>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	7dba      	ldrb	r2, [r7, #22]
 8008576:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
      break;
 800857a:	e009      	b.n	8008590 <USBH_AUDIO_BuildHeadphonePath+0xc0>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800857c:	7dbb      	ldrb	r3, [r7, #22]
 800857e:	3301      	adds	r3, #1
 8008580:	75bb      	strb	r3, [r7, #22]
 8008582:	7dbb      	ldrb	r3, [r7, #22]
 8008584:	b29a      	uxth	r2, r3
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	; 0xe8
 800858c:	429a      	cmp	r2, r3
 800858e:	d3e6      	bcc.n	800855e <USBH_AUDIO_BuildHeadphonePath+0x8e>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	4619      	mov	r1, r3
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f7ff fe5b 	bl	8008250 <USBH_AUDIO_FindLinkedUnit>
 800859a:	60f8      	str	r0, [r7, #12]

    if (!value)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <USBH_AUDIO_BuildHeadphonePath+0xd6>
    {
      return USBH_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	e053      	b.n	800864e <USBH_AUDIO_BuildHeadphonePath+0x17e>
    }

    Index = (uint8_t)(value & 0xFFU);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	0c1b      	lsrs	r3, r3, #16
 80085b4:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80085b6:	7afb      	ldrb	r3, [r7, #11]
 80085b8:	3b03      	subs	r3, #3
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d83c      	bhi.n	8008638 <USBH_AUDIO_BuildHeadphonePath+0x168>
 80085be:	a201      	add	r2, pc, #4	; (adr r2, 80085c4 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 80085c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085c4:	080085f3 	.word	0x080085f3
 80085c8:	080085df 	.word	0x080085df
 80085cc:	080085e9 	.word	0x080085e9
 80085d0:	080085d5 	.word	0x080085d5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	7dba      	ldrb	r2, [r7, #22]
 80085d8:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
        break;
 80085dc:	e030      	b.n	8008640 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	7dba      	ldrb	r2, [r7, #22]
 80085e2:	f883 2105 	strb.w	r2, [r3, #261]	; 0x105
        break;
 80085e6:	e02b      	b.n	8008640 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	7dba      	ldrb	r2, [r7, #22]
 80085ec:	f883 2106 	strb.w	r2, [r3, #262]	; 0x106
        break;
 80085f0:	e026      	b.n	8008640 <USBH_AUDIO_BuildHeadphonePath+0x170>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	7dba      	ldrb	r2, [r7, #22]
 80085f6:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 80085fa:	7dbb      	ldrb	r3, [r7, #22]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d818      	bhi.n	8008632 <USBH_AUDIO_BuildHeadphonePath+0x162>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103)
 8008600:	7dbb      	ldrb	r3, [r7, #22]
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	331e      	adds	r3, #30
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	4619      	mov	r1, r3
 8008610:	7dbb      	ldrb	r3, [r7, #22]
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	331e      	adds	r3, #30
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	795b      	ldrb	r3, [r3, #5]
 800861e:	b29b      	uxth	r3, r3
 8008620:	021b      	lsls	r3, r3, #8
 8008622:	b29b      	uxth	r3, r3
 8008624:	430b      	orrs	r3, r1
 8008626:	f240 1203 	movw	r2, #259	; 0x103
 800862a:	4293      	cmp	r3, r2
 800862c:	d007      	beq.n	800863e <USBH_AUDIO_BuildHeadphonePath+0x16e>
          {
            return  USBH_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	e00d      	b.n	800864e <USBH_AUDIO_BuildHeadphonePath+0x17e>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8008632:	2302      	movs	r3, #2
 8008634:	753b      	strb	r3, [r7, #20]
        }
        break;
 8008636:	e002      	b.n	800863e <USBH_AUDIO_BuildHeadphonePath+0x16e>

      default:
        ret = USBH_FAIL;
 8008638:	2302      	movs	r3, #2
 800863a:	753b      	strb	r3, [r7, #20]
        break;
 800863c:	e000      	b.n	8008640 <USBH_AUDIO_BuildHeadphonePath+0x170>
        break;
 800863e:	bf00      	nop
    }
  }
  while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	2b03      	cmp	r3, #3
 8008644:	d002      	beq.n	800864c <USBH_AUDIO_BuildHeadphonePath+0x17c>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1a1      	bne.n	8008590 <USBH_AUDIO_BuildHeadphonePath+0xc0>

  return ret;
 800864c:	7d3b      	ldrb	r3, [r7, #20]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop

08008658 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	4608      	mov	r0, r1
 8008662:	4611      	mov	r1, r2
 8008664:	461a      	mov	r2, r3
 8008666:	4603      	mov	r3, r0
 8008668:	70fb      	strb	r3, [r7, #3]
 800866a:	460b      	mov	r3, r1
 800866c:	70bb      	strb	r3, [r7, #2]
 800866e:	4613      	mov	r3, r2
 8008670:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008672:	2300      	movs	r3, #0
 8008674:	82fb      	strh	r3, [r7, #22]
 8008676:	2300      	movs	r3, #0
 8008678:	82bb      	strh	r3, [r7, #20]
 800867a:	2300      	movs	r3, #0
 800867c:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	2b02      	cmp	r3, #2
 8008690:	d002      	beq.n	8008698 <USBH_AC_SetCur+0x40>
 8008692:	2b06      	cmp	r3, #6
 8008694:	d018      	beq.n	80086c8 <USBH_AC_SetCur+0x70>
 8008696:	e035      	b.n	8008704 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	78db      	ldrb	r3, [r3, #3]
 800869e:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80086a0:	2300      	movs	r3, #0
 80086a2:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80086a4:	7afb      	ldrb	r3, [r7, #11]
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	021b      	lsls	r3, r3, #8
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	7abb      	ldrb	r3, [r7, #10]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	4313      	orrs	r3, r2
 80086b2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80086b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086b8:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80086c2:	2301      	movs	r3, #1
 80086c4:	827b      	strh	r3, [r7, #18]
      break;
 80086c6:	e020      	b.n	800870a <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80086c8:	78bb      	ldrb	r3, [r7, #2]
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	3322      	adds	r3, #34	; 0x22
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	78db      	ldrb	r3, [r3, #3]
 80086d6:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80086d8:	2300      	movs	r3, #0
 80086da:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 80086dc:	7afb      	ldrb	r3, [r7, #11]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	021b      	lsls	r3, r3, #8
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	7abb      	ldrb	r3, [r7, #10]
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4313      	orrs	r3, r2
 80086ea:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80086ec:	787b      	ldrb	r3, [r7, #1]
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4313      	orrs	r3, r2
 80086fc:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 80086fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008700:	827b      	strh	r3, [r7, #18]
      break;
 8008702:	e002      	b.n	800870a <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8008704:	2302      	movs	r3, #2
 8008706:	747b      	strb	r3, [r7, #17]
      break;
 8008708:	bf00      	nop
  }

  if (ret != USBH_OK)
 800870a:	7c7b      	ldrb	r3, [r7, #17]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8008710:	7c7b      	ldrb	r3, [r7, #17]
 8008712:	e017      	b.n	8008744 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2221      	movs	r2, #33	; 0x21
 8008718:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	8afa      	ldrh	r2, [r7, #22]
 8008724:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8aba      	ldrh	r2, [r7, #20]
 800872a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	8a7a      	ldrh	r2, [r7, #18]
 8008730:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008738:	8a7a      	ldrh	r2, [r7, #18]
 800873a:	4619      	mov	r1, r3
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f001 fdc3 	bl	800a2c8 <USBH_CtlReq>
 8008742:	4603      	mov	r3, r0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	4608      	mov	r0, r1
 8008756:	4611      	mov	r1, r2
 8008758:	461a      	mov	r2, r3
 800875a:	4603      	mov	r3, r0
 800875c:	70fb      	strb	r3, [r7, #3]
 800875e:	460b      	mov	r3, r1
 8008760:	70bb      	strb	r3, [r7, #2]
 8008762:	4613      	mov	r3, r2
 8008764:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008766:	2300      	movs	r3, #0
 8008768:	82fb      	strh	r3, [r7, #22]
 800876a:	2300      	movs	r3, #0
 800876c:	82bb      	strh	r3, [r7, #20]
 800876e:	2300      	movs	r3, #0
 8008770:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	743b      	strb	r3, [r7, #16]
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008788:	78fb      	ldrb	r3, [r7, #3]
 800878a:	2b06      	cmp	r3, #6
 800878c:	d01e      	beq.n	80087cc <USBH_AC_GetCur+0x80>
 800878e:	2b06      	cmp	r3, #6
 8008790:	dc4f      	bgt.n	8008832 <USBH_AC_GetCur+0xe6>
 8008792:	2b02      	cmp	r3, #2
 8008794:	d002      	beq.n	800879c <USBH_AC_GetCur+0x50>
 8008796:	2b03      	cmp	r3, #3
 8008798:	d036      	beq.n	8008808 <USBH_AC_GetCur+0xbc>
 800879a:	e04a      	b.n	8008832 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a0:	78db      	ldrb	r3, [r3, #3]
 80087a2:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80087a8:	7c3b      	ldrb	r3, [r7, #16]
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	021b      	lsls	r3, r3, #8
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	4313      	orrs	r3, r2
 80087b6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80087b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087bc:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80087c6:	2301      	movs	r3, #1
 80087c8:	827b      	strh	r3, [r7, #18]
      break;
 80087ca:	e035      	b.n	8008838 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80087cc:	78bb      	ldrb	r3, [r7, #2]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	3322      	adds	r3, #34	; 0x22
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	4413      	add	r3, r2
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	78db      	ldrb	r3, [r3, #3]
 80087da:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80087e0:	7c3b      	ldrb	r3, [r7, #16]
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	021b      	lsls	r3, r3, #8
 80087e6:	b29a      	uxth	r2, r3
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	4313      	orrs	r3, r2
 80087ee:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 80087f0:	787b      	ldrb	r3, [r7, #1]
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	021b      	lsls	r3, r3, #8
 80087f6:	b29a      	uxth	r2, r3
 80087f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	4313      	orrs	r3, r2
 8008800:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008804:	827b      	strh	r3, [r7, #18]
      break;
 8008806:	e017      	b.n	8008838 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880e:	78db      	ldrb	r3, [r3, #3]
 8008810:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008812:	2300      	movs	r3, #0
 8008814:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008816:	7c3b      	ldrb	r3, [r7, #16]
 8008818:	b29b      	uxth	r3, r3
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	b29a      	uxth	r2, r3
 800881e:	7bfb      	ldrb	r3, [r7, #15]
 8008820:	b29b      	uxth	r3, r3
 8008822:	4313      	orrs	r3, r2
 8008824:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800882a:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800882c:	2301      	movs	r3, #1
 800882e:	827b      	strh	r3, [r7, #18]
      break;
 8008830:	e002      	b.n	8008838 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8008832:	2302      	movs	r3, #2
 8008834:	747b      	strb	r3, [r7, #17]
      break;
 8008836:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008838:	7c7b      	ldrb	r3, [r7, #17]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d001      	beq.n	8008842 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 800883e:	7c7b      	ldrb	r3, [r7, #17]
 8008840:	e017      	b.n	8008872 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	22a1      	movs	r2, #161	; 0xa1
 8008846:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2281      	movs	r2, #129	; 0x81
 800884c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	8afa      	ldrh	r2, [r7, #22]
 8008852:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8aba      	ldrh	r2, [r7, #20]
 8008858:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8a7a      	ldrh	r2, [r7, #18]
 800885e:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008866:	8a7a      	ldrh	r2, [r7, #18]
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fd2c 	bl	800a2c8 <USBH_CtlReq>
 8008870:	4603      	mov	r3, r0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b086      	sub	sp, #24
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	4608      	mov	r0, r1
 8008884:	4611      	mov	r1, r2
 8008886:	461a      	mov	r2, r3
 8008888:	4603      	mov	r3, r0
 800888a:	70fb      	strb	r3, [r7, #3]
 800888c:	460b      	mov	r3, r1
 800888e:	70bb      	strb	r3, [r7, #2]
 8008890:	4613      	mov	r3, r2
 8008892:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	82fb      	strh	r3, [r7, #22]
 8008898:	2300      	movs	r3, #0
 800889a:	82bb      	strh	r3, [r7, #20]
 800889c:	2300      	movs	r3, #0
 800889e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80088a0:	2300      	movs	r3, #0
 80088a2:	743b      	strb	r3, [r7, #16]
 80088a4:	2300      	movs	r3, #0
 80088a6:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80088b6:	78fb      	ldrb	r3, [r7, #3]
 80088b8:	2b06      	cmp	r3, #6
 80088ba:	d01e      	beq.n	80088fa <USBH_AC_GetMax+0x80>
 80088bc:	2b06      	cmp	r3, #6
 80088be:	dc4f      	bgt.n	8008960 <USBH_AC_GetMax+0xe6>
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d002      	beq.n	80088ca <USBH_AC_GetMax+0x50>
 80088c4:	2b03      	cmp	r3, #3
 80088c6:	d036      	beq.n	8008936 <USBH_AC_GetMax+0xbc>
 80088c8:	e04a      	b.n	8008960 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ce:	78db      	ldrb	r3, [r3, #3]
 80088d0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80088d2:	2300      	movs	r3, #0
 80088d4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80088d6:	7c3b      	ldrb	r3, [r7, #16]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	021b      	lsls	r3, r3, #8
 80088dc:	b29a      	uxth	r2, r3
 80088de:	7bfb      	ldrb	r3, [r7, #15]
 80088e0:	b29b      	uxth	r3, r3
 80088e2:	4313      	orrs	r3, r2
 80088e4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80088e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088ea:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 80088f4:	2301      	movs	r3, #1
 80088f6:	827b      	strh	r3, [r7, #18]
      break;
 80088f8:	e035      	b.n	8008966 <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 80088fa:	78bb      	ldrb	r3, [r7, #2]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	3322      	adds	r3, #34	; 0x22
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	78db      	ldrb	r3, [r3, #3]
 8008908:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 800890e:	7c3b      	ldrb	r3, [r7, #16]
 8008910:	b29b      	uxth	r3, r3
 8008912:	021b      	lsls	r3, r3, #8
 8008914:	b29a      	uxth	r2, r3
 8008916:	7bfb      	ldrb	r3, [r7, #15]
 8008918:	b29b      	uxth	r3, r3
 800891a:	4313      	orrs	r3, r2
 800891c:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 800891e:	787b      	ldrb	r3, [r7, #1]
 8008920:	b29b      	uxth	r3, r3
 8008922:	021b      	lsls	r3, r3, #8
 8008924:	b29a      	uxth	r2, r3
 8008926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800892a:	b29b      	uxth	r3, r3
 800892c:	4313      	orrs	r3, r2
 800892e:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008932:	827b      	strh	r3, [r7, #18]
      break;
 8008934:	e017      	b.n	8008966 <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800893c:	78db      	ldrb	r3, [r3, #3]
 800893e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum ;
 8008944:	7c3b      	ldrb	r3, [r7, #16]
 8008946:	b29b      	uxth	r3, r3
 8008948:	021b      	lsls	r3, r3, #8
 800894a:	b29a      	uxth	r2, r3
 800894c:	7bfb      	ldrb	r3, [r7, #15]
 800894e:	b29b      	uxth	r3, r3
 8008950:	4313      	orrs	r3, r2
 8008952:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008958:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 800895a:	2301      	movs	r3, #1
 800895c:	827b      	strh	r3, [r7, #18]
      break;
 800895e:	e002      	b.n	8008966 <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8008960:	2302      	movs	r3, #2
 8008962:	747b      	strb	r3, [r7, #17]
      break;
 8008964:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008966:	7c7b      	ldrb	r3, [r7, #17]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 800896c:	7c7b      	ldrb	r3, [r7, #17]
 800896e:	e017      	b.n	80089a0 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	22a1      	movs	r2, #161	; 0xa1
 8008974:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2283      	movs	r2, #131	; 0x83
 800897a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	8afa      	ldrh	r2, [r7, #22]
 8008980:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	8aba      	ldrh	r2, [r7, #20]
 8008986:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	8a7a      	ldrh	r2, [r7, #18]
 800898c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008994:	8a7a      	ldrh	r2, [r7, #18]
 8008996:	4619      	mov	r1, r3
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 fc95 	bl	800a2c8 <USBH_CtlReq>
 800899e:	4603      	mov	r3, r0

}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	4608      	mov	r0, r1
 80089b2:	4611      	mov	r1, r2
 80089b4:	461a      	mov	r2, r3
 80089b6:	4603      	mov	r3, r0
 80089b8:	70fb      	strb	r3, [r7, #3]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70bb      	strb	r3, [r7, #2]
 80089be:	4613      	mov	r3, r2
 80089c0:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80089c2:	2300      	movs	r3, #0
 80089c4:	82fb      	strh	r3, [r7, #22]
 80089c6:	2300      	movs	r3, #0
 80089c8:	82bb      	strh	r3, [r7, #20]
 80089ca:	2300      	movs	r3, #0
 80089cc:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	743b      	strb	r3, [r7, #16]
 80089d2:	2300      	movs	r3, #0
 80089d4:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80089e4:	78fb      	ldrb	r3, [r7, #3]
 80089e6:	2b06      	cmp	r3, #6
 80089e8:	d01e      	beq.n	8008a28 <USBH_AC_GetRes+0x80>
 80089ea:	2b06      	cmp	r3, #6
 80089ec:	dc4f      	bgt.n	8008a8e <USBH_AC_GetRes+0xe6>
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d002      	beq.n	80089f8 <USBH_AC_GetRes+0x50>
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d036      	beq.n	8008a64 <USBH_AC_GetRes+0xbc>
 80089f6:	e04a      	b.n	8008a8e <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089fc:	78db      	ldrb	r3, [r3, #3]
 80089fe:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a04:	7c3b      	ldrb	r3, [r7, #16]
 8008a06:	b29b      	uxth	r3, r3
 8008a08:	021b      	lsls	r3, r3, #8
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	7bfb      	ldrb	r3, [r7, #15]
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	4313      	orrs	r3, r2
 8008a12:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a18:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008a22:	2301      	movs	r3, #1
 8008a24:	827b      	strh	r3, [r7, #18]
      break;
 8008a26:	e035      	b.n	8008a94 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008a28:	78bb      	ldrb	r3, [r7, #2]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	3322      	adds	r3, #34	; 0x22
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	78db      	ldrb	r3, [r3, #3]
 8008a36:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a38:	2300      	movs	r3, #0
 8008a3a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a3c:	7c3b      	ldrb	r3, [r7, #16]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	b29a      	uxth	r2, r3
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008a4c:	787b      	ldrb	r3, [r7, #1]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	021b      	lsls	r3, r3, #8
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008a60:	827b      	strh	r3, [r7, #18]
      break;
 8008a62:	e017      	b.n	8008a94 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a6a:	78db      	ldrb	r3, [r3, #3]
 8008a6c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008a6e:	2300      	movs	r3, #0
 8008a70:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008a72:	7c3b      	ldrb	r3, [r7, #16]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	021b      	lsls	r3, r3, #8
 8008a78:	b29a      	uxth	r2, r3
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U) ;
 8008a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a86:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	827b      	strh	r3, [r7, #18]
      break;
 8008a8c:	e002      	b.n	8008a94 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8008a8e:	2302      	movs	r3, #2
 8008a90:	747b      	strb	r3, [r7, #17]
      break;
 8008a92:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008a94:	7c7b      	ldrb	r3, [r7, #17]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8008a9a:	7c7b      	ldrb	r3, [r7, #17]
 8008a9c:	e017      	b.n	8008ace <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	22a1      	movs	r2, #161	; 0xa1
 8008aa2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2284      	movs	r2, #132	; 0x84
 8008aa8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	8afa      	ldrh	r2, [r7, #22]
 8008aae:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	8aba      	ldrh	r2, [r7, #20]
 8008ab4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	8a7a      	ldrh	r2, [r7, #18]
 8008aba:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008ac2:	8a7a      	ldrh	r2, [r7, #18]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f001 fbfe 	bl	800a2c8 <USBH_CtlReq>
 8008acc:	4603      	mov	r3, r0

}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b086      	sub	sp, #24
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	70fb      	strb	r3, [r7, #3]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70bb      	strb	r3, [r7, #2]
 8008aec:	4613      	mov	r3, r2
 8008aee:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	82fb      	strh	r3, [r7, #22]
 8008af4:	2300      	movs	r3, #0
 8008af6:	82bb      	strh	r3, [r7, #20]
 8008af8:	2300      	movs	r3, #0
 8008afa:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8008afc:	2300      	movs	r3, #0
 8008afe:	743b      	strb	r3, [r7, #16]
 8008b00:	2300      	movs	r3, #0
 8008b02:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8008b12:	78fb      	ldrb	r3, [r7, #3]
 8008b14:	2b06      	cmp	r3, #6
 8008b16:	d01e      	beq.n	8008b56 <USBH_AC_GetMin+0x80>
 8008b18:	2b06      	cmp	r3, #6
 8008b1a:	dc4f      	bgt.n	8008bbc <USBH_AC_GetMin+0xe6>
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d002      	beq.n	8008b26 <USBH_AC_GetMin+0x50>
 8008b20:	2b03      	cmp	r3, #3
 8008b22:	d036      	beq.n	8008b92 <USBH_AC_GetMin+0xbc>
 8008b24:	e04a      	b.n	8008bbc <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b2a:	78db      	ldrb	r3, [r3, #3]
 8008b2c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b32:	7c3b      	ldrb	r3, [r7, #16]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	021b      	lsls	r3, r3, #8
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b46:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

      wLength = 1U;
 8008b50:	2301      	movs	r3, #1
 8008b52:	827b      	strh	r3, [r7, #18]
      break;
 8008b54:	e035      	b.n	8008bc2 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8008b56:	78bb      	ldrb	r3, [r7, #2]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	3322      	adds	r3, #34	; 0x22
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	78db      	ldrb	r3, [r3, #3]
 8008b64:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008b6a:	7c3b      	ldrb	r3, [r7, #16]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	4313      	orrs	r3, r2
 8008b78:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8008b7a:	787b      	ldrb	r3, [r7, #1]
 8008b7c:	b29b      	uxth	r3, r3
 8008b7e:	021b      	lsls	r3, r3, #8
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8008b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b8e:	827b      	strh	r3, [r7, #18]
      break;
 8008b90:	e017      	b.n	8008bc2 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b98:	78db      	ldrb	r3, [r3, #3]
 8008b9a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8008ba0:	7c3b      	ldrb	r3, [r7, #16]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	7bfb      	ldrb	r3, [r7, #15]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	4313      	orrs	r3, r2
 8008bae:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8008bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bb4:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	827b      	strh	r3, [r7, #18]
      break;
 8008bba:	e002      	b.n	8008bc2 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	747b      	strb	r3, [r7, #17]
      break;
 8008bc0:	bf00      	nop
  }

  if (ret != USBH_OK)
 8008bc2:	7c7b      	ldrb	r3, [r7, #17]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8008bc8:	7c7b      	ldrb	r3, [r7, #17]
 8008bca:	e017      	b.n	8008bfc <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	22a1      	movs	r2, #161	; 0xa1
 8008bd0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2282      	movs	r2, #130	; 0x82
 8008bd6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	8afa      	ldrh	r2, [r7, #22]
 8008bdc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	8aba      	ldrh	r2, [r7, #20]
 8008be2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	8a7a      	ldrh	r2, [r7, #18]
 8008be8:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008bf0:	8a7a      	ldrh	r2, [r7, #18]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 fb67 	bl	800a2c8 <USBH_CtlReq>
 8008bfa:	4603      	mov	r3, r0

}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8008c12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c16:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8008c18:	7afb      	ldrb	r3, [r7, #11]
 8008c1a:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /*length of the frequency parameter*/
 8008c1c:	2303      	movs	r3, #3
 8008c1e:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2222      	movs	r2, #34	; 0x22
 8008c24:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8afa      	ldrh	r2, [r7, #22]
 8008c30:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8aba      	ldrh	r2, [r7, #20]
 8008c36:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8a7a      	ldrh	r2, [r7, #18]
 8008c3c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8008c3e:	8a7b      	ldrh	r3, [r7, #18]
 8008c40:	461a      	mov	r2, r3
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f001 fb3f 	bl	800a2c8 <USBH_CtlReq>
 8008c4a:	4603      	mov	r3, r0

}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3718      	adds	r7, #24
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]

  return status;
 8008c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008c82:	69db      	ldr	r3, [r3, #28]
 8008c84:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8008c86:	2300      	movs	r3, #0
 8008c88:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	78db      	ldrb	r3, [r3, #3]
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	f200 8090 	bhi.w	8008db6 <USBH_AUDIO_Control+0x146>
 8008c96:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <USBH_AUDIO_Control+0x2c>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cb1 	.word	0x08008cb1
 8008ca0:	08008d05 	.word	0x08008d05
 8008ca4:	08008db7 	.word	0x08008db7
 8008ca8:	08008d83 	.word	0x08008d83
 8008cac:	08008d9d 	.word	0x08008d9d
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d17d      	bne.n	8008dba <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f001 fd01 	bl	800a6e6 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE ;
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	2202      	movs	r2, #2
 8008d00:	70da      	strb	r2, [r3, #3]
      }
      break;
 8008d02:	e05a      	b.n	8008dba <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f002 f832 	bl	800ad76 <USBH_LL_GetURBState>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d114      	bne.n	8008d42 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8008d24:	3302      	adds	r3, #2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	021b      	lsls	r3, r3, #8
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f97a 	bl	8009030 <USBH_AUDIO_SetControlAttribute>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d03d      	beq.n	8008dbe <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8008d4e:	1ad3      	subs	r3, r2, r3
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	f892 218b 	ldrb.w	r2, [r2, #395]	; 0x18b
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d333      	bcc.n	8008dc2 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c

        USBH_InterruptReceiveData(phost,
                                  (uint8_t *)(void *)(AUDIO_Handle->mem),
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f503 71c8 	add.w	r1, r3, #400	; 0x190
                                  (uint8_t)AUDIO_Handle->control.EpSize,
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f8b3 3186 	ldrh.w	r3, [r3, #390]	; 0x186
        USBH_InterruptReceiveData(phost,
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f893 318a 	ldrb.w	r3, [r3, #394]	; 0x18a
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f001 fcb3 	bl	800a6e6 <USBH_InterruptReceiveData>
                                  AUDIO_Handle->control.Pipe);

      }
      break;
 8008d80:	e01f      	b.n	8008dc2 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8008d82:	2101      	movs	r1, #1
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f953 	bl	8009030 <USBH_AUDIO_SetControlAttribute>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d11a      	bne.n	8008dc6 <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	2201      	movs	r2, #1
 8008d94:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008d9a:	e014      	b.n	8008dc6 <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8008d9c:	2102      	movs	r1, #2
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f946 	bl	8009030 <USBH_AUDIO_SetControlAttribute>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10f      	bne.n	8008dca <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	2201      	movs	r2, #1
 8008dae:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008db4:	e009      	b.n	8008dca <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8008db6:	bf00      	nop
 8008db8:	e008      	b.n	8008dcc <USBH_AUDIO_Control+0x15c>
      break;
 8008dba:	bf00      	nop
 8008dbc:	e006      	b.n	8008dcc <USBH_AUDIO_Control+0x15c>
          break;
 8008dbe:	bf00      	nop
 8008dc0:	e004      	b.n	8008dcc <USBH_AUDIO_Control+0x15c>
      break;
 8008dc2:	bf00      	nop
 8008dc4:	e002      	b.n	8008dcc <USBH_AUDIO_Control+0x15c>
      break;
 8008dc6:	bf00      	nop
 8008dc8:	e000      	b.n	8008dcc <USBH_AUDIO_Control+0x15c>
      break;
 8008dca:	bf00      	nop
  }

  return status;
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3718      	adds	r7, #24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop

08008dd8 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008de0:	2301      	movs	r3, #1
 8008de2:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008dea:	69db      	ldr	r3, [r3, #28]
 8008dec:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	789b      	ldrb	r3, [r3, #2]
 8008df2:	3b01      	subs	r3, #1
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d85c      	bhi.n	8008eb2 <USBH_AUDIO_OutputStream+0xda>
 8008df8:	a201      	add	r2, pc, #4	; (adr r2, 8008e00 <USBH_AUDIO_OutputStream+0x28>)
 8008dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfe:	bf00      	nop
 8008e00:	08008e15 	.word	0x08008e15
 8008e04:	08008e71 	.word	0x08008e71
 8008e08:	08008e3b 	.word	0x08008e3b
 8008e0c:	08008ea7 	.word	0x08008ea7
 8008e10:	08008ea1 	.word	0x08008ea1
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	3317      	adds	r3, #23
 8008e1e:	00db      	lsls	r3, r3, #3
 8008e20:	4413      	add	r3, r2
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	79db      	ldrb	r3, [r3, #7]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d103      	bne.n	8008e32 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008e30:	e044      	b.n	8008ebc <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	2202      	movs	r2, #2
 8008e36:	709a      	strb	r2, [r3, #2]
      break;
 8008e38:	e040      	b.n	8008ebc <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	3317      	adds	r3, #23
 8008e44:	00db      	lsls	r3, r3, #3
 8008e46:	4413      	add	r3, r2
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	3308      	adds	r3, #8
 8008e4c:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008e54:	68fa      	ldr	r2, [r7, #12]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f7ff fed3 	bl	8008c04 <USBH_AUDIO_SetEndpointControls>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d126      	bne.n	8008eb6 <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	2205      	movs	r2, #5
 8008e6c:	709a      	strb	r2, [r3, #2]
      }
      break;
 8008e6e:	e022      	b.n	8008eb6 <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8008e76:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	f893 30f4 	ldrb.w	r3, [r3, #244]	; 0xf4
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f7ff febe 	bl	8008c04 <USBH_AUDIO_SetEndpointControls>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d113      	bne.n	8008eba <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2205      	movs	r2, #5
 8008e96:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 f96e 	bl	800917a <USBH_AUDIO_FrequencySet>
      }
      break;
 8008e9e:	e00c      	b.n	8008eba <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008ea4:	e00a      	b.n	8008ebc <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      USBH_AUDIO_Transmit(phost);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f80e 	bl	8008ec8 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]
      break;
 8008eb0:	e004      	b.n	8008ebc <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 8008eb2:	bf00      	nop
 8008eb4:	e002      	b.n	8008ebc <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008eb6:	bf00      	nop
 8008eb8:	e000      	b.n	8008ebc <USBH_AUDIO_OutputStream+0xe4>
      break;
 8008eba:	bf00      	nop
  }

  return status;
 8008ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop

08008ec8 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8008eda:	69db      	ldr	r3, [r3, #28]
 8008edc:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	791b      	ldrb	r3, [r3, #4]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d002      	beq.n	8008eec <USBH_AUDIO_Transmit+0x24>
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d033      	beq.n	8008f52 <USBH_AUDIO_Transmit+0x8a>
 8008eea:	e096      	b.n	800901a <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f040 8092 	bne.w	8009020 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	2202      	movs	r2, #2
 8008f0c:	711a      	strb	r2, [r3, #4]
        USBH_IsocSendData(phost,
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
                          AUDIO_Handle->headphone.buf,
                          (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
        USBH_IsocSendData(phost,
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fbfe 	bl	800a724 <USBH_IsocSendData>
                          AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008f50:	e066      	b.n	8009020 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f001 ff0b 	bl	800ad76 <USBH_LL_GetURBState>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b01      	cmp	r3, #1
 8008f64:	d15e      	bne.n	8009024 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	f892 20fc 	ldrb.w	r2, [r2, #252]	; 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d352      	bcc.n	8009024 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 2494 	ldr.w	r2, [r3, #1172]	; 0x494
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f893 3189 	ldrb.w	r3, [r3, #393]	; 0x189
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d102      	bne.n	8008f9a <USBH_AUDIO_Transmit+0xd2>
        {
          USBH_AUDIO_Control(phost);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff fe6b 	bl	8008c70 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d82b      	bhi.n	8009002 <USBH_AUDIO_Transmit+0x13a>
        {
          USBH_IsocSendData(phost,
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
                            AUDIO_Handle->headphone.cbuf,
                            (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
          USBH_IsocSendData(phost,
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f001 fbb0 	bl	800a724 <USBH_IsocSendData>
                            AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8008ff2:	68ba      	ldr	r2, [r7, #8]
 8008ff4:	f8b2 2120 	ldrh.w	r2, [r2, #288]	; 0x120
 8008ff8:	441a      	add	r2, r3
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8009000:	e010      	b.n	8009024 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f04f 32ff 	mov.w	r2, #4294967295
 8009008:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2205      	movs	r2, #5
 8009010:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f8bb 	bl	800918e <USBH_AUDIO_BufferEmptyCallback>
      break;
 8009018:	e004      	b.n	8009024 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800901a:	2302      	movs	r3, #2
 800901c:	73fb      	strb	r3, [r7, #15]
      break;
 800901e:	e002      	b.n	8009026 <USBH_AUDIO_Transmit+0x15e>
      break;
 8009020:	bf00      	nop
 8009022:	e000      	b.n	8009026 <USBH_AUDIO_Transmit+0x15e>
      break;
 8009024:	bf00      	nop
  }
  return status;
 8009026:	7bfb      	ldrb	r3, [r7, #15]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	460b      	mov	r3, r1
 800903a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d002      	beq.n	8009056 <USBH_AUDIO_SetControlAttribute+0x26>
 8009050:	2b02      	cmp	r3, #2
 8009052:	d00b      	beq.n	800906c <USBH_AUDIO_SetControlAttribute+0x3c>
 8009054:	e015      	b.n	8009082 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009062:	441a      	add	r2, r3
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 800906a:	e00d      	b.n	8009088 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009078:	1ad2      	subs	r2, r2, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
      break;
 8009080:	e002      	b.n	8009088 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 8009082:	2302      	movs	r3, #2
 8009084:	73fb      	strb	r3, [r7, #15]
      break;
 8009086:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8009094:	429a      	cmp	r2, r3
 8009096:	d905      	bls.n	80090a4 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d205      	bcs.n	80090c0 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f8d3 212c 	ldr.w	r2, [r3, #300]	; 0x12c
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  }

  if (AUDIO_SetVolume(phost,
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f893 11a0 	ldrb.w	r1, [r3, #416]	; 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f893 21a1 	ldrb.w	r2, [r3, #417]	; 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
  if (AUDIO_SetVolume(phost,
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f827 	bl	8009128 <AUDIO_SetVolume>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d01e      	beq.n	800911e <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d10e      	bne.n	8009108 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f893 2107 	ldrb.w	r2, [r3, #263]	; 0x107
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f893 2109 	ldrb.w	r2, [r3, #265]	; 0x109
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
      status = USBH_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	73fb      	strb	r3, [r7, #15]
 8009106:	e007      	b.n	8009118 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 800910e:	3b01      	subs	r3, #1
 8009110:	b2da      	uxtb	r2, r3
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	f883 21a1 	strb.w	r2, [r3, #417]	; 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2206      	movs	r2, #6
 800911c:	705a      	strb	r2, [r3, #1]
  }


  return status;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3710      	adds	r7, #16
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b086      	sub	sp, #24
 800912c:	af02      	add	r7, sp, #8
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	4608      	mov	r0, r1
 8009132:	4611      	mov	r1, r2
 8009134:	461a      	mov	r2, r3
 8009136:	4603      	mov	r3, r0
 8009138:	70fb      	strb	r3, [r7, #3]
 800913a:	460b      	mov	r3, r1
 800913c:	70bb      	strb	r3, [r7, #2]
 800913e:	4613      	mov	r3, r2
 8009140:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY ;
 8009142:	2301      	movs	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800914c:	69db      	ldr	r3, [r3, #28]
 800914e:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	883a      	ldrh	r2, [r7, #0]
 8009154:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	2302      	movs	r3, #2
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	78bb      	ldrb	r3, [r7, #2]
 8009160:	9300      	str	r3, [sp, #0]
 8009162:	2302      	movs	r3, #2
 8009164:	2106      	movs	r1, #6
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f7ff fa76 	bl	8008658 <USBH_AC_SetCur>
 800916c:	4603      	mov	r3, r0
 800916e:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009182:	bf00      	nop
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr

0800918e <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void  USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 800918e:	b480      	push	{r7}
 8009190:	b083      	sub	sp, #12
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009196:	bf00      	nop
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b084      	sub	sp, #16
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	60f8      	str	r0, [r7, #12]
 80091aa:	60b9      	str	r1, [r7, #8]
 80091ac:	4613      	mov	r3, r2
 80091ae:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d101      	bne.n	80091ba <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80091b6:	2302      	movs	r3, #2
 80091b8:	e029      	b.n	800920e <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	79fa      	ldrb	r2, [r7, #7]
 80091be:	f883 249c 	strb.w	r2, [r3, #1180]	; 0x49c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
  phost->ClassNumber = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f000 f81f 	bl	8009216 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d003      	beq.n	8009206 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f001 fc82 	bl	800ab10 <USBH_LL_Init>

  return USBH_OK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009216:	b480      	push	{r7}
 8009218:	b085      	sub	sp, #20
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800921e:	2300      	movs	r3, #0
 8009220:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009222:	2300      	movs	r3, #0
 8009224:	60fb      	str	r3, [r7, #12]
 8009226:	e00a      	b.n	800923e <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	2200      	movs	r2, #0
 8009236:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3301      	adds	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2b0e      	cmp	r3, #14
 8009242:	d9f1      	bls.n	8009228 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
 8009248:	e009      	b.n	800925e <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	3301      	adds	r3, #1
 800925c:	60fb      	str	r3, [r7, #12]
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009264:	d3f1      	bcc.n	800924a <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2201      	movs	r2, #1
 8009276:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494

  phost->Control.state = CTRL_SETUP;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2240      	movs	r2, #64	; 0x40
 800928a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2201      	movs	r2, #1
 800929e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b085      	sub	sp, #20
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80092ca:	2300      	movs	r3, #0
 80092cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d017      	beq.n	8009304 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10f      	bne.n	80092fe <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 80092e4:	1c59      	adds	r1, r3, #1
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	f503 7389 	add.w	r3, r3, #274	; 0x112
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
 80092fc:	e004      	b.n	8009308 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80092fe:	2302      	movs	r3, #2
 8009300:	73fb      	strb	r3, [r7, #15]
 8009302:	e001      	b.n	8009308 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009304:	2302      	movs	r3, #2
 8009306:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009308:	7bfb      	ldrb	r3, [r7, #15]
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009316:	b480      	push	{r7}
 8009318:	b087      	sub	sp, #28
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	461a      	mov	r2, r3
 8009324:	4603      	mov	r3, r0
 8009326:	70fb      	strb	r3, [r7, #3]
 8009328:	460b      	mov	r3, r1
 800932a:	70bb      	strb	r3, [r7, #2]
 800932c:	4613      	mov	r3, r2
 800932e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009330:	2300      	movs	r3, #0
 8009332:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009334:	2300      	movs	r3, #0
 8009336:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800933e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009340:	e025      	b.n	800938e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009342:	7dfb      	ldrb	r3, [r7, #23]
 8009344:	221a      	movs	r2, #26
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	3308      	adds	r3, #8
 800934c:	68fa      	ldr	r2, [r7, #12]
 800934e:	4413      	add	r3, r2
 8009350:	3302      	adds	r3, #2
 8009352:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	795b      	ldrb	r3, [r3, #5]
 8009358:	78fa      	ldrb	r2, [r7, #3]
 800935a:	429a      	cmp	r2, r3
 800935c:	d002      	beq.n	8009364 <USBH_FindInterface+0x4e>
 800935e:	78fb      	ldrb	r3, [r7, #3]
 8009360:	2bff      	cmp	r3, #255	; 0xff
 8009362:	d111      	bne.n	8009388 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009368:	78ba      	ldrb	r2, [r7, #2]
 800936a:	429a      	cmp	r2, r3
 800936c:	d002      	beq.n	8009374 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800936e:	78bb      	ldrb	r3, [r7, #2]
 8009370:	2bff      	cmp	r3, #255	; 0xff
 8009372:	d109      	bne.n	8009388 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009378:	787a      	ldrb	r2, [r7, #1]
 800937a:	429a      	cmp	r2, r3
 800937c:	d002      	beq.n	8009384 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800937e:	787b      	ldrb	r3, [r7, #1]
 8009380:	2bff      	cmp	r3, #255	; 0xff
 8009382:	d101      	bne.n	8009388 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
 8009386:	e006      	b.n	8009396 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009388:	7dfb      	ldrb	r3, [r7, #23]
 800938a:	3301      	adds	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800938e:	7dfb      	ldrb	r3, [r7, #23]
 8009390:	2b09      	cmp	r3, #9
 8009392:	d9d6      	bls.n	8009342 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009394:	23ff      	movs	r3, #255	; 0xff
}
 8009396:	4618      	mov	r0, r3
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr

080093a2 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b087      	sub	sp, #28
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
 80093ae:	4613      	mov	r3, r2
 80093b0:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80093b6:	2300      	movs	r3, #0
 80093b8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80093c0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093c2:	e017      	b.n	80093f4 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	221a      	movs	r2, #26
 80093c8:	fb02 f303 	mul.w	r3, r2, r3
 80093cc:	3308      	adds	r3, #8
 80093ce:	68fa      	ldr	r2, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	3302      	adds	r3, #2
 80093d4:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	789b      	ldrb	r3, [r3, #2]
 80093da:	78fa      	ldrb	r2, [r7, #3]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d106      	bne.n	80093ee <USBH_FindInterfaceIndex+0x4c>
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	78db      	ldrb	r3, [r3, #3]
 80093e4:	78ba      	ldrb	r2, [r7, #2]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d101      	bne.n	80093ee <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 80093ea:	7dfb      	ldrb	r3, [r7, #23]
 80093ec:	e006      	b.n	80093fc <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	3301      	adds	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b09      	cmp	r3, #9
 80093f8:	d9e4      	bls.n	80093c4 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 80093fa:	23ff      	movs	r3, #255	; 0xff
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009410:	6878      	ldr	r0, [r7, #4]
 8009412:	f001 fbb9 	bl	800ab88 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009416:	2101      	movs	r1, #1
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f001 fcbf 	bl	800ad9c <USBH_LL_DriverVBUS>

  return USBH_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b088      	sub	sp, #32
 800942c:	af04      	add	r7, sp, #16
 800942e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009430:	2302      	movs	r3, #2
 8009432:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b01      	cmp	r3, #1
 8009442:	d102      	bne.n	800944a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2203      	movs	r2, #3
 8009448:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	2b0b      	cmp	r3, #11
 8009452:	f200 81b5 	bhi.w	80097c0 <USBH_Process+0x398>
 8009456:	a201      	add	r2, pc, #4	; (adr r2, 800945c <USBH_Process+0x34>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	0800948d 	.word	0x0800948d
 8009460:	080094bf 	.word	0x080094bf
 8009464:	08009527 	.word	0x08009527
 8009468:	0800975b 	.word	0x0800975b
 800946c:	080097c1 	.word	0x080097c1
 8009470:	080095cb 	.word	0x080095cb
 8009474:	08009701 	.word	0x08009701
 8009478:	08009601 	.word	0x08009601
 800947c:	08009621 	.word	0x08009621
 8009480:	08009641 	.word	0x08009641
 8009484:	0800966f 	.word	0x0800966f
 8009488:	08009743 	.word	0x08009743
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 8195 	beq.w	80097c4 <USBH_Process+0x39c>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80094a0:	20c8      	movs	r0, #200	; 0xc8
 80094a2:	f001 fcc2 	bl	800ae2a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fbcb 	bl	800ac42 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80094bc:	e182      	b.n	80097c4 <USBH_Process+0x39c>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d107      	bne.n	80094d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2202      	movs	r2, #2
 80094d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80094d6:	e184      	b.n	80097e2 <USBH_Process+0x3ba>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 80094de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094e2:	d914      	bls.n	800950e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094ea:	3301      	adds	r3, #1
 80094ec:	b2da      	uxtb	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d903      	bls.n	8009506 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	220d      	movs	r2, #13
 8009502:	701a      	strb	r2, [r3, #0]
      break;
 8009504:	e16d      	b.n	80097e2 <USBH_Process+0x3ba>
            phost->gState = HOST_IDLE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	701a      	strb	r2, [r3, #0]
      break;
 800950c:	e169      	b.n	80097e2 <USBH_Process+0x3ba>
          phost->Timeout += 10U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8d3 3498 	ldr.w	r3, [r3, #1176]	; 0x498
 8009514:	f103 020a 	add.w	r2, r3, #10
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
          USBH_Delay(10U);
 800951e:	200a      	movs	r0, #10
 8009520:	f001 fc83 	bl	800ae2a <USBH_Delay>
      break;
 8009524:	e15d      	b.n	80097e2 <USBH_Process+0x3ba>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009536:	2104      	movs	r1, #4
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800953c:	2064      	movs	r0, #100	; 0x64
 800953e:	f001 fc74 	bl	800ae2a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 fb56 	bl	800abf4 <USBH_LL_GetSpeed>
 8009548:	4603      	mov	r3, r0
 800954a:	461a      	mov	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2205      	movs	r2, #5
 8009556:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009558:	2100      	movs	r1, #0
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 f92c 	bl	800a7b8 <USBH_AllocPipe>
 8009560:	4603      	mov	r3, r0
 8009562:	461a      	mov	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009568:	2180      	movs	r1, #128	; 0x80
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f001 f924 	bl	800a7b8 <USBH_AllocPipe>
 8009570:	4603      	mov	r3, r0
 8009572:	461a      	mov	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7919      	ldrb	r1, [r3, #4]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800958c:	b292      	uxth	r2, r2
 800958e:	9202      	str	r2, [sp, #8]
 8009590:	2200      	movs	r2, #0
 8009592:	9201      	str	r2, [sp, #4]
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4603      	mov	r3, r0
 8009598:	2280      	movs	r2, #128	; 0x80
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f001 f8dd 	bl	800a75a <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	7959      	ldrb	r1, [r3, #5]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80095b4:	b292      	uxth	r2, r2
 80095b6:	9202      	str	r2, [sp, #8]
 80095b8:	2200      	movs	r2, #0
 80095ba:	9201      	str	r2, [sp, #4]
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	4603      	mov	r3, r0
 80095c0:	2200      	movs	r2, #0
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 f8c9 	bl	800a75a <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095c8:	e10b      	b.n	80097e2 <USBH_Process+0x3ba>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f90e 	bl	80097ec <USBH_HandleEnum>
 80095d0:	4603      	mov	r3, r0
 80095d2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 80f5 	bne.w	80097c8 <USBH_Process+0x3a0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d103      	bne.n	80095f8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2208      	movs	r2, #8
 80095f4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095f6:	e0e7      	b.n	80097c8 <USBH_Process+0x3a0>
          phost->gState = HOST_INPUT;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2207      	movs	r2, #7
 80095fc:	701a      	strb	r2, [r3, #0]
      break;
 80095fe:	e0e3      	b.n	80097c8 <USBH_Process+0x3a0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009606:	2b00      	cmp	r3, #0
 8009608:	f000 80e0 	beq.w	80097cc <USBH_Process+0x3a4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009612:	2101      	movs	r1, #1
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2208      	movs	r2, #8
 800961c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800961e:	e0d5      	b.n	80097cc <USBH_Process+0x3a4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009626:	b29b      	uxth	r3, r3
 8009628:	4619      	mov	r1, r3
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 fc22 	bl	8009e74 <USBH_SetCfg>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	f040 80cc 	bne.w	80097d0 <USBH_Process+0x3a8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2209      	movs	r2, #9
 800963c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800963e:	e0c7      	b.n	80097d0 <USBH_Process+0x3a8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009646:	f003 0320 	and.w	r3, r3, #32
 800964a:	2b00      	cmp	r3, #0
 800964c:	d00b      	beq.n	8009666 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800964e:	2101      	movs	r1, #1
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fc59 	bl	8009f08 <USBH_SetFeature>
 8009656:	4603      	mov	r3, r0
 8009658:	2b00      	cmp	r3, #0
 800965a:	f040 80bb 	bne.w	80097d4 <USBH_Process+0x3ac>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	220a      	movs	r2, #10
 8009662:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009664:	e0b6      	b.n	80097d4 <USBH_Process+0x3ac>
        phost->gState = HOST_CHECK_CLASS;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	220a      	movs	r2, #10
 800966a:	701a      	strb	r2, [r3, #0]
      break;
 800966c:	e0b2      	b.n	80097d4 <USBH_Process+0x3ac>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 80af 	beq.w	80097d8 <USBH_Process+0x3b0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009682:	2300      	movs	r3, #0
 8009684:	73fb      	strb	r3, [r7, #15]
 8009686:	e018      	b.n	80096ba <USBH_Process+0x292>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009688:	7bfa      	ldrb	r2, [r7, #15]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f502 7289 	add.w	r2, r2, #274	; 0x112
 8009690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009694:	791a      	ldrb	r2, [r3, #4]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800969c:	429a      	cmp	r2, r3
 800969e:	d109      	bne.n	80096b4 <USBH_Process+0x28c>
          {
            phost->pActiveClass = phost->pClass[idx];
 80096a0:	7bfa      	ldrb	r2, [r7, #15]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f502 7289 	add.w	r2, r2, #274	; 0x112
 80096a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            break;
 80096b2:	e005      	b.n	80096c0 <USBH_Process+0x298>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	3301      	adds	r3, #1
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	7bfb      	ldrb	r3, [r7, #15]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0e3      	beq.n	8009688 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d016      	beq.n	80096f8 <USBH_Process+0x2d0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d109      	bne.n	80096f0 <USBH_Process+0x2c8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2206      	movs	r2, #6
 80096e0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 80096e8:	2103      	movs	r1, #3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096ee:	e073      	b.n	80097d8 <USBH_Process+0x3b0>
            phost->gState = HOST_ABORT_STATE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	220d      	movs	r2, #13
 80096f4:	701a      	strb	r2, [r3, #0]
      break;
 80096f6:	e06f      	b.n	80097d8 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	220d      	movs	r2, #13
 80096fc:	701a      	strb	r2, [r3, #0]
      break;
 80096fe:	e06b      	b.n	80097d8 <USBH_Process+0x3b0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009706:	2b00      	cmp	r3, #0
 8009708:	d017      	beq.n	800973a <USBH_Process+0x312>
      {
        status = phost->pActiveClass->Requests(phost);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	4798      	blx	r3
 8009716:	4603      	mov	r3, r0
 8009718:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800971a:	7bbb      	ldrb	r3, [r7, #14]
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <USBH_Process+0x302>
        {
          phost->gState = HOST_CLASS;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	220b      	movs	r2, #11
 8009726:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009728:	e058      	b.n	80097dc <USBH_Process+0x3b4>
        else if (status == USBH_FAIL)
 800972a:	7bbb      	ldrb	r3, [r7, #14]
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b02      	cmp	r3, #2
 8009730:	d154      	bne.n	80097dc <USBH_Process+0x3b4>
          phost->gState = HOST_ABORT_STATE;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	220d      	movs	r2, #13
 8009736:	701a      	strb	r2, [r3, #0]
      break;
 8009738:	e050      	b.n	80097dc <USBH_Process+0x3b4>
        phost->gState = HOST_ABORT_STATE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	220d      	movs	r2, #13
 800973e:	701a      	strb	r2, [r3, #0]
      break;
 8009740:	e04c      	b.n	80097dc <USBH_Process+0x3b4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009748:	2b00      	cmp	r3, #0
 800974a:	d049      	beq.n	80097e0 <USBH_Process+0x3b8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009752:	695b      	ldr	r3, [r3, #20]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	4798      	blx	r3
      }
      break;
 8009758:	e042      	b.n	80097e0 <USBH_Process+0x3b8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff fd57 	bl	8009216 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 800976e:	2b00      	cmp	r3, #0
 8009770:	d009      	beq.n	8009786 <USBH_Process+0x35e>
      {
        phost->pActiveClass->DeInit(phost);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
      }

      if (phost->pUser != NULL)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <USBH_Process+0x374>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 8009796:	2105      	movs	r1, #5
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d107      	bne.n	80097b8 <USBH_Process+0x390>
      {
        phost->device.is_ReEnumerated = 0U;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff fe29 	bl	8009408 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097b6:	e014      	b.n	80097e2 <USBH_Process+0x3ba>
        USBH_LL_Start(phost);
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 f9e5 	bl	800ab88 <USBH_LL_Start>
      break;
 80097be:	e010      	b.n	80097e2 <USBH_Process+0x3ba>

    case HOST_ABORT_STATE:
    default :
      break;
 80097c0:	bf00      	nop
 80097c2:	e00e      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097c4:	bf00      	nop
 80097c6:	e00c      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097c8:	bf00      	nop
 80097ca:	e00a      	b.n	80097e2 <USBH_Process+0x3ba>
    break;
 80097cc:	bf00      	nop
 80097ce:	e008      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097d0:	bf00      	nop
 80097d2:	e006      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097d4:	bf00      	nop
 80097d6:	e004      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097d8:	bf00      	nop
 80097da:	e002      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097dc:	bf00      	nop
 80097de:	e000      	b.n	80097e2 <USBH_Process+0x3ba>
      break;
 80097e0:	bf00      	nop
  }
  return USBH_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af04      	add	r7, sp, #16
 80097f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80097f4:	2301      	movs	r3, #1
 80097f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80097f8:	2301      	movs	r3, #1
 80097fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	785b      	ldrb	r3, [r3, #1]
 8009800:	2b07      	cmp	r3, #7
 8009802:	f200 81c1 	bhi.w	8009b88 <USBH_HandleEnum+0x39c>
 8009806:	a201      	add	r2, pc, #4	; (adr r2, 800980c <USBH_HandleEnum+0x20>)
 8009808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800980c:	0800982d 	.word	0x0800982d
 8009810:	080098eb 	.word	0x080098eb
 8009814:	08009955 	.word	0x08009955
 8009818:	080099e3 	.word	0x080099e3
 800981c:	08009a4d 	.word	0x08009a4d
 8009820:	08009abd 	.word	0x08009abd
 8009824:	08009b03 	.word	0x08009b03
 8009828:	08009b49 	.word	0x08009b49
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800982c:	2108      	movs	r1, #8
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 fa50 	bl	8009cd4 <USBH_Get_DevDesc>
 8009834:	4603      	mov	r3, r0
 8009836:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d130      	bne.n	80098a0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7919      	ldrb	r1, [r3, #4]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009862:	b292      	uxth	r2, r2
 8009864:	9202      	str	r2, [sp, #8]
 8009866:	2200      	movs	r2, #0
 8009868:	9201      	str	r2, [sp, #4]
 800986a:	9300      	str	r3, [sp, #0]
 800986c:	4603      	mov	r3, r0
 800986e:	2280      	movs	r2, #128	; 0x80
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 ff72 	bl	800a75a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	7959      	ldrb	r1, [r3, #5]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800988a:	b292      	uxth	r2, r2
 800988c:	9202      	str	r2, [sp, #8]
 800988e:	2200      	movs	r2, #0
 8009890:	9201      	str	r2, [sp, #4]
 8009892:	9300      	str	r3, [sp, #0]
 8009894:	4603      	mov	r3, r0
 8009896:	2200      	movs	r2, #0
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 ff5e 	bl	800a75a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800989e:	e175      	b.n	8009b8c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	2b03      	cmp	r3, #3
 80098a4:	f040 8172 	bne.w	8009b8c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098ae:	3301      	adds	r3, #1
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80098be:	2b03      	cmp	r3, #3
 80098c0:	d903      	bls.n	80098ca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	220d      	movs	r2, #13
 80098c6:	701a      	strb	r2, [r3, #0]
      break;
 80098c8:	e160      	b.n	8009b8c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	795b      	ldrb	r3, [r3, #5]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 ff93 	bl	800a7fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	791b      	ldrb	r3, [r3, #4]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 ff8d 	bl	800a7fc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	701a      	strb	r2, [r3, #0]
      break;
 80098e8:	e150      	b.n	8009b8c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80098ea:	2112      	movs	r1, #18
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f9f1 	bl	8009cd4 <USBH_Get_DevDesc>
 80098f2:	4603      	mov	r3, r0
 80098f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80098f6:	7bbb      	ldrb	r3, [r7, #14]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d103      	bne.n	8009904 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2202      	movs	r2, #2
 8009900:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009902:	e145      	b.n	8009b90 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	2b03      	cmp	r3, #3
 8009908:	f040 8142 	bne.w	8009b90 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009912:	3301      	adds	r3, #1
 8009914:	b2da      	uxtb	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009922:	2b03      	cmp	r3, #3
 8009924:	d903      	bls.n	800992e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	220d      	movs	r2, #13
 800992a:	701a      	strb	r2, [r3, #0]
      break;
 800992c:	e130      	b.n	8009b90 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	795b      	ldrb	r3, [r3, #5]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 ff61 	bl	800a7fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	791b      	ldrb	r3, [r3, #4]
 800993e:	4619      	mov	r1, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 ff5b 	bl	800a7fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2200      	movs	r2, #0
 800994a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	701a      	strb	r2, [r3, #0]
      break;
 8009952:	e11d      	b.n	8009b90 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009954:	2101      	movs	r1, #1
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 fa68 	bl	8009e2c <USBH_SetAddress>
 800995c:	4603      	mov	r3, r0
 800995e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d132      	bne.n	80099cc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009966:	2002      	movs	r0, #2
 8009968:	f001 fa5f 	bl	800ae2a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2201      	movs	r2, #1
 8009970:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2203      	movs	r2, #3
 8009978:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	7919      	ldrb	r1, [r3, #4]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800998e:	b292      	uxth	r2, r2
 8009990:	9202      	str	r2, [sp, #8]
 8009992:	2200      	movs	r2, #0
 8009994:	9201      	str	r2, [sp, #4]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	4603      	mov	r3, r0
 800999a:	2280      	movs	r2, #128	; 0x80
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fedc 	bl	800a75a <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	7959      	ldrb	r1, [r3, #5]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80099b6:	b292      	uxth	r2, r2
 80099b8:	9202      	str	r2, [sp, #8]
 80099ba:	2200      	movs	r2, #0
 80099bc:	9201      	str	r2, [sp, #4]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	4603      	mov	r3, r0
 80099c2:	2200      	movs	r2, #0
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 fec8 	bl	800a75a <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099ca:	e0e3      	b.n	8009b94 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099cc:	7bbb      	ldrb	r3, [r7, #14]
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	f040 80e0 	bne.w	8009b94 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	220d      	movs	r2, #13
 80099d8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	705a      	strb	r2, [r3, #1]
      break;
 80099e0:	e0d8      	b.n	8009b94 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80099e2:	2109      	movs	r1, #9
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 f99d 	bl	8009d24 <USBH_Get_CfgDesc>
 80099ea:	4603      	mov	r3, r0
 80099ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80099ee:	7bbb      	ldrb	r3, [r7, #14]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d103      	bne.n	80099fc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2204      	movs	r2, #4
 80099f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80099fa:	e0cd      	b.n	8009b98 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099fc:	7bbb      	ldrb	r3, [r7, #14]
 80099fe:	2b03      	cmp	r3, #3
 8009a00:	f040 80ca 	bne.w	8009b98 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d903      	bls.n	8009a26 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	220d      	movs	r2, #13
 8009a22:	701a      	strb	r2, [r3, #0]
      break;
 8009a24:	e0b8      	b.n	8009b98 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	795b      	ldrb	r3, [r3, #5]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f000 fee5 	bl	800a7fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	791b      	ldrb	r3, [r3, #4]
 8009a36:	4619      	mov	r1, r3
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f000 fedf 	bl	800a7fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2200      	movs	r2, #0
 8009a48:	701a      	strb	r2, [r3, #0]
      break;
 8009a4a:	e0a5      	b.n	8009b98 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f965 	bl	8009d24 <USBH_Get_CfgDesc>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d103      	bne.n	8009a6c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2205      	movs	r2, #5
 8009a68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a6a:	e097      	b.n	8009b9c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a6c:	7bbb      	ldrb	r3, [r7, #14]
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	f040 8094 	bne.w	8009b9c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a8a:	2b03      	cmp	r3, #3
 8009a8c:	d903      	bls.n	8009a96 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	220d      	movs	r2, #13
 8009a92:	701a      	strb	r2, [r3, #0]
      break;
 8009a94:	e082      	b.n	8009b9c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	795b      	ldrb	r3, [r3, #5]
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fead 	bl	800a7fc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	791b      	ldrb	r3, [r3, #4]
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fea7 	bl	800a7fc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	701a      	strb	r2, [r3, #0]
      break;
 8009aba:	e06f      	b.n	8009b9c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d019      	beq.n	8009afa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ad2:	23ff      	movs	r3, #255	; 0xff
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f949 	bl	8009d6c <USBH_Get_StringDesc>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d103      	bne.n	8009aec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2206      	movs	r2, #6
 8009ae8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009aea:	e059      	b.n	8009ba0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009aec:	7bbb      	ldrb	r3, [r7, #14]
 8009aee:	2b03      	cmp	r3, #3
 8009af0:	d156      	bne.n	8009ba0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2206      	movs	r2, #6
 8009af6:	705a      	strb	r2, [r3, #1]
      break;
 8009af8:	e052      	b.n	8009ba0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2206      	movs	r2, #6
 8009afe:	705a      	strb	r2, [r3, #1]
      break;
 8009b00:	e04e      	b.n	8009ba0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d019      	beq.n	8009b40 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009b18:	23ff      	movs	r3, #255	; 0xff
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f000 f926 	bl	8009d6c <USBH_Get_StringDesc>
 8009b20:	4603      	mov	r3, r0
 8009b22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d103      	bne.n	8009b32 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2207      	movs	r2, #7
 8009b2e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009b30:	e038      	b.n	8009ba4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d135      	bne.n	8009ba4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2207      	movs	r2, #7
 8009b3c:	705a      	strb	r2, [r3, #1]
      break;
 8009b3e:	e031      	b.n	8009ba4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2207      	movs	r2, #7
 8009b44:	705a      	strb	r2, [r3, #1]
      break;
 8009b46:	e02d      	b.n	8009ba4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d017      	beq.n	8009b82 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009b5e:	23ff      	movs	r3, #255	; 0xff
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 f903 	bl	8009d6c <USBH_Get_StringDesc>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009b74:	e018      	b.n	8009ba8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	d115      	bne.n	8009ba8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	e012      	b.n	8009ba8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
      break;
 8009b86:	e00f      	b.n	8009ba8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009b88:	bf00      	nop
 8009b8a:	e00e      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009b8c:	bf00      	nop
 8009b8e:	e00c      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009b90:	bf00      	nop
 8009b92:	e00a      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009b94:	bf00      	nop
 8009b96:	e008      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009b98:	bf00      	nop
 8009b9a:	e006      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009b9c:	bf00      	nop
 8009b9e:	e004      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009ba0:	bf00      	nop
 8009ba2:	e002      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009ba4:	bf00      	nop
 8009ba6:	e000      	b.n	8009baa <USBH_HandleEnum+0x3be>
      break;
 8009ba8:	bf00      	nop
  }
  return Status;
 8009baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3710      	adds	r7, #16
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
}
 8009bc6:	bf00      	nop
 8009bc8:	370c      	adds	r7, #12
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b082      	sub	sp, #8
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8009be0:	1c5a      	adds	r2, r3, #1
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8c3 2494 	str.w	r2, [r3, #1172]	; 0x494
  USBH_HandleSof(phost);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 f804 	bl	8009bf6 <USBH_HandleSof>
}
 8009bee:	bf00      	nop
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}

08009bf6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009bf6:	b580      	push	{r7, lr}
 8009bf8:	b082      	sub	sp, #8
 8009bfa:	af00      	add	r7, sp, #0
 8009bfc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b0b      	cmp	r3, #11
 8009c06:	d10a      	bne.n	8009c1e <USBH_HandleSof+0x28>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d005      	beq.n	8009c1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 344c 	ldr.w	r3, [r3, #1100]	; 0x44c
 8009c18:	699b      	ldr	r3, [r3, #24]
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	4798      	blx	r3
  }
}
 8009c1e:	bf00      	nop
 8009c20:	3708      	adds	r7, #8
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009c26:	b480      	push	{r7}
 8009c28:	b083      	sub	sp, #12
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009c36:	bf00      	nop
}
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b083      	sub	sp, #12
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009c52:	bf00      	nop
}
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 ff86 	bl	800abbe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	791b      	ldrb	r3, [r3, #4]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fd9f 	bl	800a7fc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	795b      	ldrb	r3, [r3, #5]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fd99 	bl	800a7fc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af02      	add	r7, sp, #8
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	460b      	mov	r3, r1
 8009cde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ce6:	78fb      	ldrb	r3, [r7, #3]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	4613      	mov	r3, r2
 8009cee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 f864 	bl	8009dc2 <USBH_GetDescriptor>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	73fb      	strb	r3, [r7, #15]
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10a      	bne.n	8009d1a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009d10:	78fa      	ldrb	r2, [r7, #3]
 8009d12:	b292      	uxth	r2, r2
 8009d14:	4619      	mov	r1, r3
 8009d16:	f000 f91b 	bl	8009f50 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3710      	adds	r7, #16
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af02      	add	r7, sp, #8
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	331c      	adds	r3, #28
 8009d34:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009d36:	887b      	ldrh	r3, [r7, #2]
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d40:	2100      	movs	r1, #0
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f83d 	bl	8009dc2 <USBH_GetDescriptor>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	72fb      	strb	r3, [r7, #11]
 8009d4c:	7afb      	ldrb	r3, [r7, #11]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d107      	bne.n	8009d62 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d58:	887a      	ldrh	r2, [r7, #2]
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 f967 	bl	800a030 <USBH_ParseCfgDesc>
  }

  return status;
 8009d62:	7afb      	ldrb	r3, [r7, #11]
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	607a      	str	r2, [r7, #4]
 8009d76:	461a      	mov	r2, r3
 8009d78:	460b      	mov	r3, r1
 8009d7a:	72fb      	strb	r3, [r7, #11]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009d80:	7afb      	ldrb	r3, [r7, #11]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009d88:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009d90:	893b      	ldrh	r3, [r7, #8]
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	460b      	mov	r3, r1
 8009d96:	2100      	movs	r1, #0
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f000 f812 	bl	8009dc2 <USBH_GetDescriptor>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	75fb      	strb	r3, [r7, #23]
 8009da2:	7dfb      	ldrb	r3, [r7, #23]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d107      	bne.n	8009db8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009dae:	893a      	ldrh	r2, [r7, #8]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 fa3a 	bl	800a22c <USBH_ParseStringDesc>
  }

  return status;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dba:	4618      	mov	r0, r3
 8009dbc:	3718      	adds	r7, #24
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd80      	pop	{r7, pc}

08009dc2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	607b      	str	r3, [r7, #4]
 8009dcc:	460b      	mov	r3, r1
 8009dce:	72fb      	strb	r3, [r7, #11]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	789b      	ldrb	r3, [r3, #2]
 8009dd8:	2b01      	cmp	r3, #1
 8009dda:	d11c      	bne.n	8009e16 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ddc:	7afb      	ldrb	r3, [r7, #11]
 8009dde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2206      	movs	r2, #6
 8009dec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	893a      	ldrh	r2, [r7, #8]
 8009df2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009df4:	893b      	ldrh	r3, [r7, #8]
 8009df6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009dfe:	d104      	bne.n	8009e0a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f240 4209 	movw	r2, #1033	; 0x409
 8009e06:	829a      	strh	r2, [r3, #20]
 8009e08:	e002      	b.n	8009e10 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	8b3a      	ldrh	r2, [r7, #24]
 8009e14:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009e16:	8b3b      	ldrh	r3, [r7, #24]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	68f8      	ldr	r0, [r7, #12]
 8009e1e:	f000 fa53 	bl	800a2c8 <USBH_CtlReq>
 8009e22:	4603      	mov	r3, r0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	789b      	ldrb	r3, [r3, #2]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d10f      	bne.n	8009e60 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2205      	movs	r2, #5
 8009e4a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009e4c:	78fb      	ldrb	r3, [r7, #3]
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009e60:	2200      	movs	r2, #0
 8009e62:	2100      	movs	r1, #0
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fa2f 	bl	800a2c8 <USBH_CtlReq>
 8009e6a:	4603      	mov	r3, r0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3708      	adds	r7, #8
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	789b      	ldrb	r3, [r3, #2]
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d10e      	bne.n	8009ea6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2209      	movs	r2, #9
 8009e92:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	887a      	ldrh	r2, [r7, #2]
 8009e98:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fa0c 	bl	800a2c8 <USBH_CtlReq>
 8009eb0:	4603      	mov	r3, r0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	3708      	adds	r7, #8
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bd80      	pop	{r7, pc}

08009eba <USBH_SetInterface>:
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num,
                                     uint8_t altSetting)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	789b      	ldrb	r3, [r3, #2]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d110      	bne.n	8009ef4 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	220b      	movs	r2, #11
 8009edc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 8009ede:	78bb      	ldrb	r3, [r7, #2]
 8009ee0:	b29a      	uxth	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	b29a      	uxth	r2, r3
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 f9e5 	bl	800a2c8 <USBH_CtlReq>
 8009efe:	4603      	mov	r3, r0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	789b      	ldrb	r3, [r3, #2]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d10f      	bne.n	8009f3c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2203      	movs	r2, #3
 8009f26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009f28:	78fb      	ldrb	r3, [r7, #3]
 8009f2a:	b29a      	uxth	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	2100      	movs	r1, #0
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 f9c1 	bl	800a2c8 <USBH_CtlReq>
 8009f46:	4603      	mov	r3, r0
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	781a      	ldrb	r2, [r3, #0]
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	785a      	ldrb	r2, [r3, #1]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	3302      	adds	r3, #2
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	3303      	adds	r3, #3
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	b29b      	uxth	r3, r3
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4313      	orrs	r3, r2
 8009f84:	b29a      	uxth	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	791a      	ldrb	r2, [r3, #4]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	795a      	ldrb	r2, [r3, #5]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	799a      	ldrb	r2, [r3, #6]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	79da      	ldrb	r2, [r3, #7]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009faa:	88fb      	ldrh	r3, [r7, #6]
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d939      	bls.n	800a024 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3308      	adds	r3, #8
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	3309      	adds	r3, #9
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	b29b      	uxth	r3, r3
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	330a      	adds	r3, #10
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	330b      	adds	r3, #11
 8009fd8:	781b      	ldrb	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	b29b      	uxth	r3, r3
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	b29a      	uxth	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	330c      	adds	r3, #12
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	b29a      	uxth	r2, r3
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	330d      	adds	r3, #13
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	b29a      	uxth	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	7b9a      	ldrb	r2, [r3, #14]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	7bda      	ldrb	r2, [r3, #15]
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	7c1a      	ldrb	r2, [r3, #16]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	7c5a      	ldrb	r2, [r3, #17]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	745a      	strb	r2, [r3, #17]
  }
}
 800a024:	bf00      	nop
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08a      	sub	sp, #40	; 0x28
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	785a      	ldrb	r2, [r3, #1]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	3302      	adds	r3, #2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	3303      	adds	r3, #3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	b29b      	uxth	r3, r3
 800a072:	021b      	lsls	r3, r3, #8
 800a074:	b29b      	uxth	r3, r3
 800a076:	4313      	orrs	r3, r2
 800a078:	b29a      	uxth	r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	791a      	ldrb	r2, [r3, #4]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	795a      	ldrb	r2, [r3, #5]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	799a      	ldrb	r2, [r3, #6]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	79da      	ldrb	r2, [r3, #7]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	7a1a      	ldrb	r2, [r3, #8]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d95f      	bls.n	800a16c <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a0ac:	2309      	movs	r3, #9
 800a0ae:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a0b4:	e051      	b.n	800a15a <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0b6:	f107 0316 	add.w	r3, r7, #22
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0be:	f000 f8e8 	bl	800a292 <USBH_GetNextDesc>
 800a0c2:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	d146      	bne.n	800a15a <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a0cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a0d0:	221a      	movs	r2, #26
 800a0d2:	fb02 f303 	mul.w	r3, r2, r3
 800a0d6:	3308      	adds	r3, #8
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	4413      	add	r3, r2
 800a0dc:	3302      	adds	r3, #2
 800a0de:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a0e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0e2:	69f8      	ldr	r0, [r7, #28]
 800a0e4:	f000 f846 	bl	800a174 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a0f2:	e022      	b.n	800a13a <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a0f4:	f107 0316 	add.w	r3, r7, #22
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0fc:	f000 f8c9 	bl	800a292 <USBH_GetNextDesc>
 800a100:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	2b05      	cmp	r3, #5
 800a108:	d117      	bne.n	800a13a <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a10a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a10e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a112:	3201      	adds	r2, #1
 800a114:	00d2      	lsls	r2, r2, #3
 800a116:	211a      	movs	r1, #26
 800a118:	fb01 f303 	mul.w	r3, r1, r3
 800a11c:	4413      	add	r3, r2
 800a11e:	3308      	adds	r3, #8
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4413      	add	r3, r2
 800a124:	3304      	adds	r3, #4
 800a126:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a12a:	69b8      	ldr	r0, [r7, #24]
 800a12c:	f000 f851 	bl	800a1d2 <USBH_ParseEPDesc>
            ep_ix++;
 800a130:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a134:	3301      	adds	r3, #1
 800a136:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	791b      	ldrb	r3, [r3, #4]
 800a13e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a142:	429a      	cmp	r2, r3
 800a144:	d204      	bcs.n	800a150 <USBH_ParseCfgDesc+0x120>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	885a      	ldrh	r2, [r3, #2]
 800a14a:	8afb      	ldrh	r3, [r7, #22]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d8d1      	bhi.n	800a0f4 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a154:	3301      	adds	r3, #1
 800a156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a15a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a15e:	2b09      	cmp	r3, #9
 800a160:	d804      	bhi.n	800a16c <USBH_ParseCfgDesc+0x13c>
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	885a      	ldrh	r2, [r3, #2]
 800a166:	8afb      	ldrh	r3, [r7, #22]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d8a4      	bhi.n	800a0b6 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a16c:	bf00      	nop
 800a16e:	3728      	adds	r7, #40	; 0x28
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781a      	ldrb	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	785a      	ldrb	r2, [r3, #1]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	789a      	ldrb	r2, [r3, #2]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	78da      	ldrb	r2, [r3, #3]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	791a      	ldrb	r2, [r3, #4]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	795a      	ldrb	r2, [r3, #5]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	799a      	ldrb	r2, [r3, #6]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	79da      	ldrb	r2, [r3, #7]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	7a1a      	ldrb	r2, [r3, #8]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	721a      	strb	r2, [r3, #8]
}
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b083      	sub	sp, #12
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781a      	ldrb	r2, [r3, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	785a      	ldrb	r2, [r3, #1]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	789a      	ldrb	r2, [r3, #2]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	78da      	ldrb	r2, [r3, #3]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	3304      	adds	r3, #4
 800a200:	781b      	ldrb	r3, [r3, #0]
 800a202:	b29a      	uxth	r2, r3
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	3305      	adds	r3, #5
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	021b      	lsls	r3, r3, #8
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4313      	orrs	r3, r2
 800a212:	b29a      	uxth	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	799a      	ldrb	r2, [r3, #6]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	719a      	strb	r2, [r3, #6]
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	3301      	adds	r3, #1
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b03      	cmp	r3, #3
 800a242:	d120      	bne.n	800a286 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	1e9a      	subs	r2, r3, #2
 800a24a:	88fb      	ldrh	r3, [r7, #6]
 800a24c:	4293      	cmp	r3, r2
 800a24e:	bf28      	it	cs
 800a250:	4613      	movcs	r3, r2
 800a252:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	3302      	adds	r3, #2
 800a258:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a25a:	2300      	movs	r3, #0
 800a25c:	82fb      	strh	r3, [r7, #22]
 800a25e:	e00b      	b.n	800a278 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a260:	8afb      	ldrh	r3, [r7, #22]
 800a262:	68fa      	ldr	r2, [r7, #12]
 800a264:	4413      	add	r3, r2
 800a266:	781a      	ldrb	r2, [r3, #0]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	3301      	adds	r3, #1
 800a270:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a272:	8afb      	ldrh	r3, [r7, #22]
 800a274:	3302      	adds	r3, #2
 800a276:	82fb      	strh	r3, [r7, #22]
 800a278:	8afa      	ldrh	r2, [r7, #22]
 800a27a:	8abb      	ldrh	r3, [r7, #20]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d3ef      	bcc.n	800a260 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2200      	movs	r2, #0
 800a284:	701a      	strb	r2, [r3, #0]
  }
}
 800a286:	bf00      	nop
 800a288:	371c      	adds	r7, #28
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a292:	b480      	push	{r7}
 800a294:	b085      	sub	sp, #20
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	881a      	ldrh	r2, [r3, #0]
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	4413      	add	r3, r2
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	781b      	ldrb	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr

0800a2c8 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b086      	sub	sp, #24
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	4613      	mov	r3, r2
 800a2d4:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	789b      	ldrb	r3, [r3, #2]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d002      	beq.n	800a2e8 <USBH_CtlReq+0x20>
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d00f      	beq.n	800a306 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a2e6:	e027      	b.n	800a338 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	68ba      	ldr	r2, [r7, #8]
 800a2ec:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	88fa      	ldrh	r2, [r7, #6]
 800a2f2:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2202      	movs	r2, #2
 800a2fe:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a300:	2301      	movs	r3, #1
 800a302:	75fb      	strb	r3, [r7, #23]
      break;
 800a304:	e018      	b.n	800a338 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 f81c 	bl	800a344 <USBH_HandleControl>
 800a30c:	4603      	mov	r3, r0
 800a30e:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <USBH_CtlReq+0x54>
 800a316:	7dfb      	ldrb	r3, [r7, #23]
 800a318:	2b03      	cmp	r3, #3
 800a31a:	d106      	bne.n	800a32a <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	761a      	strb	r2, [r3, #24]
      break;
 800a328:	e005      	b.n	800a336 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d102      	bne.n	800a336 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2201      	movs	r2, #1
 800a334:	709a      	strb	r2, [r3, #2]
      break;
 800a336:	bf00      	nop
  }
  return status;
 800a338:	7dfb      	ldrb	r3, [r7, #23]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3718      	adds	r7, #24
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af02      	add	r7, sp, #8
 800a34a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a34c:	2301      	movs	r3, #1
 800a34e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a350:	2300      	movs	r3, #0
 800a352:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7e1b      	ldrb	r3, [r3, #24]
 800a358:	3b01      	subs	r3, #1
 800a35a:	2b0a      	cmp	r3, #10
 800a35c:	f200 8156 	bhi.w	800a60c <USBH_HandleControl+0x2c8>
 800a360:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <USBH_HandleControl+0x24>)
 800a362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a366:	bf00      	nop
 800a368:	0800a395 	.word	0x0800a395
 800a36c:	0800a3af 	.word	0x0800a3af
 800a370:	0800a419 	.word	0x0800a419
 800a374:	0800a43f 	.word	0x0800a43f
 800a378:	0800a477 	.word	0x0800a477
 800a37c:	0800a4a1 	.word	0x0800a4a1
 800a380:	0800a4f3 	.word	0x0800a4f3
 800a384:	0800a515 	.word	0x0800a515
 800a388:	0800a551 	.word	0x0800a551
 800a38c:	0800a577 	.word	0x0800a577
 800a390:	0800a5b5 	.word	0x0800a5b5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f103 0110 	add.w	r1, r3, #16
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	795b      	ldrb	r3, [r3, #5]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f943 	bl	800a62c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2202      	movs	r2, #2
 800a3aa:	761a      	strb	r2, [r3, #24]
      break;
 800a3ac:	e139      	b.n	800a622 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	795b      	ldrb	r3, [r3, #5]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fcde 	bl	800ad76 <USBH_LL_GetURBState>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3be:	7bbb      	ldrb	r3, [r7, #14]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d11e      	bne.n	800a402 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	7c1b      	ldrb	r3, [r3, #16]
 800a3c8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3cc:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	8adb      	ldrh	r3, [r3, #22]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00a      	beq.n	800a3ec <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a3d6:	7b7b      	ldrb	r3, [r7, #13]
 800a3d8:	2b80      	cmp	r3, #128	; 0x80
 800a3da:	d103      	bne.n	800a3e4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2203      	movs	r2, #3
 800a3e0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a3e2:	e115      	b.n	800a610 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2205      	movs	r2, #5
 800a3e8:	761a      	strb	r2, [r3, #24]
      break;
 800a3ea:	e111      	b.n	800a610 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a3ec:	7b7b      	ldrb	r3, [r7, #13]
 800a3ee:	2b80      	cmp	r3, #128	; 0x80
 800a3f0:	d103      	bne.n	800a3fa <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2209      	movs	r2, #9
 800a3f6:	761a      	strb	r2, [r3, #24]
      break;
 800a3f8:	e10a      	b.n	800a610 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2207      	movs	r2, #7
 800a3fe:	761a      	strb	r2, [r3, #24]
      break;
 800a400:	e106      	b.n	800a610 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a402:	7bbb      	ldrb	r3, [r7, #14]
 800a404:	2b04      	cmp	r3, #4
 800a406:	d003      	beq.n	800a410 <USBH_HandleControl+0xcc>
 800a408:	7bbb      	ldrb	r3, [r7, #14]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	f040 8100 	bne.w	800a610 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	220b      	movs	r2, #11
 800a414:	761a      	strb	r2, [r3, #24]
      break;
 800a416:	e0fb      	b.n	800a610 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6899      	ldr	r1, [r3, #8]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	899a      	ldrh	r2, [r3, #12]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	791b      	ldrb	r3, [r3, #4]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 f93a 	bl	800a6aa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2204      	movs	r2, #4
 800a43a:	761a      	strb	r2, [r3, #24]
      break;
 800a43c:	e0f1      	b.n	800a622 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	791b      	ldrb	r3, [r3, #4]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fc96 	bl	800ad76 <USBH_LL_GetURBState>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d102      	bne.n	800a45a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2209      	movs	r2, #9
 800a458:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b05      	cmp	r3, #5
 800a45e:	d102      	bne.n	800a466 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a460:	2303      	movs	r3, #3
 800a462:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a464:	e0d6      	b.n	800a614 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a466:	7bbb      	ldrb	r3, [r7, #14]
 800a468:	2b04      	cmp	r3, #4
 800a46a:	f040 80d3 	bne.w	800a614 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	220b      	movs	r2, #11
 800a472:	761a      	strb	r2, [r3, #24]
      break;
 800a474:	e0ce      	b.n	800a614 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6899      	ldr	r1, [r3, #8]
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	899a      	ldrh	r2, [r3, #12]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	795b      	ldrb	r3, [r3, #5]
 800a482:	2001      	movs	r0, #1
 800a484:	9000      	str	r0, [sp, #0]
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f8ea 	bl	800a660 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a492:	b29a      	uxth	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2206      	movs	r2, #6
 800a49c:	761a      	strb	r2, [r3, #24]
      break;
 800a49e:	e0c0      	b.n	800a622 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	795b      	ldrb	r3, [r3, #5]
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	6878      	ldr	r0, [r7, #4]
 800a4a8:	f000 fc65 	bl	800ad76 <USBH_LL_GetURBState>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4b0:	7bbb      	ldrb	r3, [r7, #14]
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d103      	bne.n	800a4be <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2207      	movs	r2, #7
 800a4ba:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4bc:	e0ac      	b.n	800a618 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a4be:	7bbb      	ldrb	r3, [r7, #14]
 800a4c0:	2b05      	cmp	r3, #5
 800a4c2:	d105      	bne.n	800a4d0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	220c      	movs	r2, #12
 800a4c8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a4ca:	2303      	movs	r3, #3
 800a4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a4ce:	e0a3      	b.n	800a618 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4d0:	7bbb      	ldrb	r3, [r7, #14]
 800a4d2:	2b02      	cmp	r3, #2
 800a4d4:	d103      	bne.n	800a4de <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2205      	movs	r2, #5
 800a4da:	761a      	strb	r2, [r3, #24]
      break;
 800a4dc:	e09c      	b.n	800a618 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	f040 8099 	bne.w	800a618 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	220b      	movs	r2, #11
 800a4ea:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f0:	e092      	b.n	800a618 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	791b      	ldrb	r3, [r3, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 f8d5 	bl	800a6aa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a506:	b29a      	uxth	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2208      	movs	r2, #8
 800a510:	761a      	strb	r2, [r3, #24]

      break;
 800a512:	e086      	b.n	800a622 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	791b      	ldrb	r3, [r3, #4]
 800a518:	4619      	mov	r1, r3
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fc2b 	bl	800ad76 <USBH_LL_GetURBState>
 800a520:	4603      	mov	r3, r0
 800a522:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d105      	bne.n	800a536 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	220d      	movs	r2, #13
 800a52e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a530:	2300      	movs	r3, #0
 800a532:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a534:	e072      	b.n	800a61c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d103      	bne.n	800a544 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	220b      	movs	r2, #11
 800a540:	761a      	strb	r2, [r3, #24]
      break;
 800a542:	e06b      	b.n	800a61c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a544:	7bbb      	ldrb	r3, [r7, #14]
 800a546:	2b05      	cmp	r3, #5
 800a548:	d168      	bne.n	800a61c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a54a:	2303      	movs	r3, #3
 800a54c:	73fb      	strb	r3, [r7, #15]
      break;
 800a54e:	e065      	b.n	800a61c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	795b      	ldrb	r3, [r3, #5]
 800a554:	2201      	movs	r2, #1
 800a556:	9200      	str	r2, [sp, #0]
 800a558:	2200      	movs	r2, #0
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f000 f87f 	bl	800a660 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800a568:	b29a      	uxth	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	220a      	movs	r2, #10
 800a572:	761a      	strb	r2, [r3, #24]
      break;
 800a574:	e055      	b.n	800a622 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	795b      	ldrb	r3, [r3, #5]
 800a57a:	4619      	mov	r1, r3
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fbfa 	bl	800ad76 <USBH_LL_GetURBState>
 800a582:	4603      	mov	r3, r0
 800a584:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a586:	7bbb      	ldrb	r3, [r7, #14]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d105      	bne.n	800a598 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a58c:	2300      	movs	r3, #0
 800a58e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	220d      	movs	r2, #13
 800a594:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a596:	e043      	b.n	800a620 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a598:	7bbb      	ldrb	r3, [r7, #14]
 800a59a:	2b02      	cmp	r3, #2
 800a59c:	d103      	bne.n	800a5a6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2209      	movs	r2, #9
 800a5a2:	761a      	strb	r2, [r3, #24]
      break;
 800a5a4:	e03c      	b.n	800a620 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a5a6:	7bbb      	ldrb	r3, [r7, #14]
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d139      	bne.n	800a620 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	220b      	movs	r2, #11
 800a5b0:	761a      	strb	r2, [r3, #24]
      break;
 800a5b2:	e035      	b.n	800a620 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	7e5b      	ldrb	r3, [r3, #25]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	b2da      	uxtb	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	765a      	strb	r2, [r3, #25]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	7e5b      	ldrb	r3, [r3, #25]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d806      	bhi.n	800a5d6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a5d4:	e025      	b.n	800a622 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 34a4 	ldr.w	r3, [r3, #1188]	; 0x4a4
 800a5dc:	2106      	movs	r1, #6
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	795b      	ldrb	r3, [r3, #5]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f904 	bl	800a7fc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	791b      	ldrb	r3, [r3, #4]
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f000 f8fe 	bl	800a7fc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a606:	2302      	movs	r3, #2
 800a608:	73fb      	strb	r3, [r7, #15]
      break;
 800a60a:	e00a      	b.n	800a622 <USBH_HandleControl+0x2de>

    default:
      break;
 800a60c:	bf00      	nop
 800a60e:	e008      	b.n	800a622 <USBH_HandleControl+0x2de>
      break;
 800a610:	bf00      	nop
 800a612:	e006      	b.n	800a622 <USBH_HandleControl+0x2de>
      break;
 800a614:	bf00      	nop
 800a616:	e004      	b.n	800a622 <USBH_HandleControl+0x2de>
      break;
 800a618:	bf00      	nop
 800a61a:	e002      	b.n	800a622 <USBH_HandleControl+0x2de>
      break;
 800a61c:	bf00      	nop
 800a61e:	e000      	b.n	800a622 <USBH_HandleControl+0x2de>
      break;
 800a620:	bf00      	nop
  }

  return status;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af04      	add	r7, sp, #16
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	4613      	mov	r3, r2
 800a638:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a63a:	79f9      	ldrb	r1, [r7, #7]
 800a63c:	2300      	movs	r3, #0
 800a63e:	9303      	str	r3, [sp, #12]
 800a640:	2308      	movs	r3, #8
 800a642:	9302      	str	r3, [sp, #8]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	2300      	movs	r3, #0
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	2300      	movs	r3, #0
 800a64e:	2200      	movs	r2, #0
 800a650:	68f8      	ldr	r0, [r7, #12]
 800a652:	f000 fb5f 	bl	800ad14 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3710      	adds	r7, #16
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af04      	add	r7, sp, #16
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4611      	mov	r1, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	460b      	mov	r3, r1
 800a670:	80fb      	strh	r3, [r7, #6]
 800a672:	4613      	mov	r3, r2
 800a674:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d001      	beq.n	800a684 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a680:	2300      	movs	r3, #0
 800a682:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a684:	7979      	ldrb	r1, [r7, #5]
 800a686:	7e3b      	ldrb	r3, [r7, #24]
 800a688:	9303      	str	r3, [sp, #12]
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	9302      	str	r3, [sp, #8]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	2301      	movs	r3, #1
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	2300      	movs	r3, #0
 800a698:	2200      	movs	r2, #0
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fb3a 	bl	800ad14 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b088      	sub	sp, #32
 800a6ae:	af04      	add	r7, sp, #16
 800a6b0:	60f8      	str	r0, [r7, #12]
 800a6b2:	60b9      	str	r1, [r7, #8]
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	80fb      	strh	r3, [r7, #6]
 800a6bc:	4613      	mov	r3, r2
 800a6be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6c0:	7979      	ldrb	r1, [r7, #5]
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	9303      	str	r3, [sp, #12]
 800a6c6:	88fb      	ldrh	r3, [r7, #6]
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 fb1c 	bl	800ad14 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a6dc:	2300      	movs	r3, #0

}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b088      	sub	sp, #32
 800a6ea:	af04      	add	r7, sp, #16
 800a6ec:	60f8      	str	r0, [r7, #12]
 800a6ee:	60b9      	str	r1, [r7, #8]
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	71fb      	strb	r3, [r7, #7]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	71bb      	strb	r3, [r7, #6]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	79b9      	ldrb	r1, [r7, #6]
 800a702:	2200      	movs	r2, #0
 800a704:	9203      	str	r2, [sp, #12]
 800a706:	9302      	str	r3, [sp, #8]
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	2301      	movs	r3, #1
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	2303      	movs	r3, #3
 800a712:	2201      	movs	r2, #1
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 fafd 	bl	800ad14 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b088      	sub	sp, #32
 800a728:	af04      	add	r7, sp, #16
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	607a      	str	r2, [r7, #4]
 800a730:	70fb      	strb	r3, [r7, #3]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	b29b      	uxth	r3, r3
 800a736:	78f9      	ldrb	r1, [r7, #3]
 800a738:	2200      	movs	r2, #0
 800a73a:	9203      	str	r2, [sp, #12]
 800a73c:	9302      	str	r3, [sp, #8]
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	2301      	movs	r3, #1
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	2301      	movs	r3, #1
 800a748:	2200      	movs	r2, #0
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 fae2 	bl	800ad14 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    (uint16_t)length,     /* data length      */
                    0U);

  return USBH_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}

0800a75a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a75a:	b580      	push	{r7, lr}
 800a75c:	b086      	sub	sp, #24
 800a75e:	af04      	add	r7, sp, #16
 800a760:	6078      	str	r0, [r7, #4]
 800a762:	4608      	mov	r0, r1
 800a764:	4611      	mov	r1, r2
 800a766:	461a      	mov	r2, r3
 800a768:	4603      	mov	r3, r0
 800a76a:	70fb      	strb	r3, [r7, #3]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70bb      	strb	r3, [r7, #2]
 800a770:	4613      	mov	r3, r2
 800a772:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a774:	7878      	ldrb	r0, [r7, #1]
 800a776:	78ba      	ldrb	r2, [r7, #2]
 800a778:	78f9      	ldrb	r1, [r7, #3]
 800a77a:	8b3b      	ldrh	r3, [r7, #24]
 800a77c:	9302      	str	r3, [sp, #8]
 800a77e:	7d3b      	ldrb	r3, [r7, #20]
 800a780:	9301      	str	r3, [sp, #4]
 800a782:	7c3b      	ldrb	r3, [r7, #16]
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	4603      	mov	r3, r0
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f000 fa75 	bl	800ac78 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a78e:	2300      	movs	r3, #0
}
 800a790:	4618      	mov	r0, r3
 800a792:	3708      	adds	r7, #8
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	460b      	mov	r3, r1
 800a7a2:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f000 fa94 	bl	800acd6 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f839 	bl	800a83c <USBH_GetFreePipe>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a7ce:	89fb      	ldrh	r3, [r7, #14]
 800a7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00b      	beq.n	800a7f0 <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a7d8:	78fa      	ldrb	r2, [r7, #3]
 800a7da:	89fb      	ldrh	r3, [r7, #14]
 800a7dc:	f003 030f 	and.w	r3, r3, #15
 800a7e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7e4:	6879      	ldr	r1, [r7, #4]
 800a7e6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a7ea:	009b      	lsls	r3, r3, #2
 800a7ec:	440b      	add	r3, r1
 800a7ee:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7f0:	89fb      	ldrh	r3, [r7, #14]
 800a7f2:	b2db      	uxtb	r3, r3
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a808:	78fb      	ldrb	r3, [r7, #3]
 800a80a:	2b0a      	cmp	r3, #10
 800a80c:	d80f      	bhi.n	800a82e <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	687a      	ldr	r2, [r7, #4]
 800a812:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a816:	009b      	lsls	r3, r3, #2
 800a818:	4413      	add	r3, r2
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	78fb      	ldrb	r3, [r7, #3]
 800a81e:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a822:	6879      	ldr	r1, [r7, #4]
 800a824:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	370c      	adds	r7, #12
 800a834:	46bd      	mov	sp, r7
 800a836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83a:	4770      	bx	lr

0800a83c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a848:	2300      	movs	r3, #0
 800a84a:	73fb      	strb	r3, [r7, #15]
 800a84c:	e010      	b.n	800a870 <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800a856:	009b      	lsls	r3, r3, #2
 800a858:	4413      	add	r3, r2
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d102      	bne.n	800a86a <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800a864:	7bfb      	ldrb	r3, [r7, #15]
 800a866:	b29b      	uxth	r3, r3
 800a868:	e007      	b.n	800a87a <USBH_GetFreePipe+0x3e>
  for (idx = 0U ; idx < 11U ; idx++)
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
 800a86c:	3301      	adds	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	2b0a      	cmp	r3, #10
 800a874:	d9eb      	bls.n	800a84e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a876:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3714      	adds	r7, #20
 800a87e:	46bd      	mov	sp, r7
 800a880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a884:	4770      	bx	lr
	...

0800a888 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a88c:	2201      	movs	r2, #1
 800a88e:	490e      	ldr	r1, [pc, #56]	; (800a8c8 <MX_USB_HOST_Init+0x40>)
 800a890:	480e      	ldr	r0, [pc, #56]	; (800a8cc <MX_USB_HOST_Init+0x44>)
 800a892:	f7fe fc86 	bl	80091a2 <USBH_Init>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a89c:	f7f6 fd04 	bl	80012a8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800a8a0:	490b      	ldr	r1, [pc, #44]	; (800a8d0 <MX_USB_HOST_Init+0x48>)
 800a8a2:	480a      	ldr	r0, [pc, #40]	; (800a8cc <MX_USB_HOST_Init+0x44>)
 800a8a4:	f7fe fd0c 	bl	80092c0 <USBH_RegisterClass>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a8ae:	f7f6 fcfb 	bl	80012a8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a8b2:	4806      	ldr	r0, [pc, #24]	; (800a8cc <MX_USB_HOST_Init+0x44>)
 800a8b4:	f7fe fda8 	bl	8009408 <USBH_Start>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a8be:	f7f6 fcf3 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a8c2:	bf00      	nop
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	0800a8e9 	.word	0x0800a8e9
 800a8cc:	20000450 	.word	0x20000450
 800a8d0:	2000001c 	.word	0x2000001c

0800a8d4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a8d8:	4802      	ldr	r0, [pc, #8]	; (800a8e4 <MX_USB_HOST_Process+0x10>)
 800a8da:	f7fe fda5 	bl	8009428 <USBH_Process>
}
 800a8de:	bf00      	nop
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000450 	.word	0x20000450

0800a8e8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d819      	bhi.n	800a930 <USBH_UserProcess+0x48>
 800a8fc:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <USBH_UserProcess+0x1c>)
 800a8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a902:	bf00      	nop
 800a904:	0800a931 	.word	0x0800a931
 800a908:	0800a921 	.word	0x0800a921
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a929 	.word	0x0800a929
 800a914:	0800a919 	.word	0x0800a919
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a918:	4b09      	ldr	r3, [pc, #36]	; (800a940 <USBH_UserProcess+0x58>)
 800a91a:	2203      	movs	r2, #3
 800a91c:	701a      	strb	r2, [r3, #0]
  break;
 800a91e:	e008      	b.n	800a932 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <USBH_UserProcess+0x58>)
 800a922:	2202      	movs	r2, #2
 800a924:	701a      	strb	r2, [r3, #0]
  break;
 800a926:	e004      	b.n	800a932 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a928:	4b05      	ldr	r3, [pc, #20]	; (800a940 <USBH_UserProcess+0x58>)
 800a92a:	2201      	movs	r2, #1
 800a92c:	701a      	strb	r2, [r3, #0]
  break;
 800a92e:	e000      	b.n	800a932 <USBH_UserProcess+0x4a>

  default:
  break;
 800a930:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a932:	bf00      	nop
 800a934:	370c      	adds	r7, #12
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200008f8 	.word	0x200008f8

0800a944 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b0ae      	sub	sp, #184	; 0xb8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a94c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	605a      	str	r2, [r3, #4]
 800a956:	609a      	str	r2, [r3, #8]
 800a958:	60da      	str	r2, [r3, #12]
 800a95a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a95c:	f107 0318 	add.w	r3, r7, #24
 800a960:	228c      	movs	r2, #140	; 0x8c
 800a962:	2100      	movs	r1, #0
 800a964:	4618      	mov	r0, r3
 800a966:	f001 f8c8 	bl	800bafa <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a972:	d173      	bne.n	800aa5c <HAL_HCD_MspInit+0x118>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a974:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a978:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a97a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a97e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800a982:	2301      	movs	r3, #1
 800a984:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 800a986:	2305      	movs	r3, #5
 800a988:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800a98a:	2314      	movs	r3, #20
 800a98c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800a98e:	2302      	movs	r3, #2
 800a990:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a992:	2302      	movs	r3, #2
 800a994:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a996:	2302      	movs	r3, #2
 800a998:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a99a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a9a0:	f107 0318 	add.w	r3, r7, #24
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fa f867 	bl	8004a78 <HAL_RCCEx_PeriphCLKConfig>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <HAL_HCD_MspInit+0x70>
    {
      Error_Handler();
 800a9b0:	f7f6 fc7a 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9b4:	4b2b      	ldr	r3, [pc, #172]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800a9b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9b8:	4a2a      	ldr	r2, [pc, #168]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9c0:	4b28      	ldr	r3, [pc, #160]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800a9c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	617b      	str	r3, [r7, #20]
 800a9ca:	697b      	ldr	r3, [r7, #20]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800a9cc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800a9d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9e0:	2303      	movs	r3, #3
 800a9e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a9e6:	230a      	movs	r3, #10
 800a9e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9ec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a9f0:	4619      	mov	r1, r3
 800a9f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a9f6:	f7f7 fb19 	bl	800202c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9fa:	4b1a      	ldr	r3, [pc, #104]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800a9fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9fe:	4a19      	ldr	r2, [pc, #100]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aa04:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aa06:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa12:	4b14      	ldr	r3, [pc, #80]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d114      	bne.n	800aa48 <HAL_HCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa1e:	4b11      	ldr	r3, [pc, #68]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa22:	4a10      	ldr	r2, [pc, #64]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa28:	6593      	str	r3, [r2, #88]	; 0x58
 800aa2a:	4b0e      	ldr	r3, [pc, #56]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800aa36:	f7f9 f9c1 	bl	8003dbc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800aa3a:	4b0a      	ldr	r3, [pc, #40]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3e:	4a09      	ldr	r2, [pc, #36]	; (800aa64 <HAL_HCD_MspInit+0x120>)
 800aa40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa44:	6593      	str	r3, [r2, #88]	; 0x58
 800aa46:	e001      	b.n	800aa4c <HAL_HCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800aa48:	f7f9 f9b8 	bl	8003dbc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	2100      	movs	r1, #0
 800aa50:	2043      	movs	r0, #67	; 0x43
 800aa52:	f7f7 f8ce 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa56:	2043      	movs	r0, #67	; 0x43
 800aa58:	f7f7 f8e7 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa5c:	bf00      	nop
 800aa5e:	37b8      	adds	r7, #184	; 0xb8
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	40021000 	.word	0x40021000

0800aa68 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7ff f8ab 	bl	8009bd2 <USBH_LL_IncTimer>
}
 800aa7c:	bf00      	nop
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7ff f8e3 	bl	8009c5e <USBH_LL_Connect>
}
 800aa98:	bf00      	nop
 800aa9a:	3708      	adds	r7, #8
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7ff f8ec 	bl	8009c8c <USBH_LL_Disconnect>
}
 800aab4:	bf00      	nop
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	460b      	mov	r3, r1
 800aac6:	70fb      	strb	r3, [r7, #3]
 800aac8:	4613      	mov	r3, r2
 800aaca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7ff f89d 	bl	8009c26 <USBH_LL_PortEnabled>
}
 800aaec:	bf00      	nop
 800aaee:	3708      	adds	r7, #8
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b082      	sub	sp, #8
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff f89d 	bl	8009c42 <USBH_LL_PortDisabled>
}
 800ab08:	bf00      	nop
 800ab0a:	3708      	adds	r7, #8
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d12a      	bne.n	800ab78 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ab22:	4a18      	ldr	r2, [pc, #96]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a15      	ldr	r2, [pc, #84]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab2e:	f8c3 24a0 	str.w	r2, [r3, #1184]	; 0x4a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab32:	4b14      	ldr	r3, [pc, #80]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab38:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800ab3a:	4b12      	ldr	r3, [pc, #72]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab3c:	220c      	movs	r2, #12
 800ab3e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ab40:	4b10      	ldr	r3, [pc, #64]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab42:	2201      	movs	r2, #1
 800ab44:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab46:	4b0f      	ldr	r3, [pc, #60]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab4e:	2202      	movs	r2, #2
 800ab50:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ab52:	4b0c      	ldr	r3, [pc, #48]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ab58:	480a      	ldr	r0, [pc, #40]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab5a:	f7f7 fc2b 	bl	80023b4 <HAL_HCD_Init>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ab64:	f7f6 fba0 	bl	80012a8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ab68:	4806      	ldr	r0, [pc, #24]	; (800ab84 <USBH_LL_Init+0x74>)
 800ab6a:	f7f7 fff6 	bl	8002b5a <HAL_HCD_GetCurrentFrame>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f7ff f81e 	bl	8009bb4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	200008fc 	.word	0x200008fc

0800ab88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab90:	2300      	movs	r3, #0
 800ab92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab94:	2300      	movs	r3, #0
 800ab96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7f7 ff79 	bl	8002a96 <HAL_HCD_Start>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
 800abaa:	4618      	mov	r0, r3
 800abac:	f000 f948 	bl	800ae40 <USBH_Get_USB_Status>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abca:	2300      	movs	r3, #0
 800abcc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800abd4:	4618      	mov	r0, r3
 800abd6:	f7f7 ff81 	bl	8002adc <HAL_HCD_Stop>
 800abda:	4603      	mov	r3, r0
 800abdc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abde:	7bfb      	ldrb	r3, [r7, #15]
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 f92d 	bl	800ae40 <USBH_Get_USB_Status>
 800abe6:	4603      	mov	r3, r0
 800abe8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abea:	7bbb      	ldrb	r3, [r7, #14]
}
 800abec:	4618      	mov	r0, r3
 800abee:	3710      	adds	r7, #16
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800abfc:	2301      	movs	r3, #1
 800abfe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7f7 ffb5 	bl	8002b76 <HAL_HCD_GetCurrentSpeed>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d00c      	beq.n	800ac2c <USBH_LL_GetSpeed+0x38>
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d80d      	bhi.n	800ac32 <USBH_LL_GetSpeed+0x3e>
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d002      	beq.n	800ac20 <USBH_LL_GetSpeed+0x2c>
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d003      	beq.n	800ac26 <USBH_LL_GetSpeed+0x32>
 800ac1e:	e008      	b.n	800ac32 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
    break;
 800ac24:	e008      	b.n	800ac38 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ac26:	2301      	movs	r3, #1
 800ac28:	73fb      	strb	r3, [r7, #15]
    break;
 800ac2a:	e005      	b.n	800ac38 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ac30:	e002      	b.n	800ac38 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ac32:	2301      	movs	r3, #1
 800ac34:	73fb      	strb	r3, [r7, #15]
    break;
 800ac36:	bf00      	nop
  }
  return  speed;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f7 ff5c 	bl	8002b16 <HAL_HCD_ResetPort>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f8eb 	bl	800ae40 <USBH_Get_USB_Status>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac78:	b590      	push	{r4, r7, lr}
 800ac7a:	b089      	sub	sp, #36	; 0x24
 800ac7c:	af04      	add	r7, sp, #16
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	4608      	mov	r0, r1
 800ac82:	4611      	mov	r1, r2
 800ac84:	461a      	mov	r2, r3
 800ac86:	4603      	mov	r3, r0
 800ac88:	70fb      	strb	r3, [r7, #3]
 800ac8a:	460b      	mov	r3, r1
 800ac8c:	70bb      	strb	r3, [r7, #2]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac96:	2300      	movs	r3, #0
 800ac98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800aca0:	787c      	ldrb	r4, [r7, #1]
 800aca2:	78ba      	ldrb	r2, [r7, #2]
 800aca4:	78f9      	ldrb	r1, [r7, #3]
 800aca6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800aca8:	9302      	str	r3, [sp, #8]
 800acaa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800acae:	9301      	str	r3, [sp, #4]
 800acb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800acb4:	9300      	str	r3, [sp, #0]
 800acb6:	4623      	mov	r3, r4
 800acb8:	f7f7 fbde 	bl	8002478 <HAL_HCD_HC_Init>
 800acbc:	4603      	mov	r3, r0
 800acbe:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f000 f8bc 	bl	800ae40 <USBH_Get_USB_Status>
 800acc8:	4603      	mov	r3, r0
 800acca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800accc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd90      	pop	{r4, r7, pc}

0800acd6 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acd6:	b580      	push	{r7, lr}
 800acd8:	b084      	sub	sp, #16
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
 800acde:	460b      	mov	r3, r1
 800ace0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800acf0:	78fa      	ldrb	r2, [r7, #3]
 800acf2:	4611      	mov	r1, r2
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7f7 fc4e 	bl	8002596 <HAL_HCD_HC_Halt>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
 800ad00:	4618      	mov	r0, r3
 800ad02:	f000 f89d 	bl	800ae40 <USBH_Get_USB_Status>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b089      	sub	sp, #36	; 0x24
 800ad18:	af04      	add	r7, sp, #16
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	4611      	mov	r1, r2
 800ad20:	461a      	mov	r2, r3
 800ad22:	4603      	mov	r3, r0
 800ad24:	70fb      	strb	r3, [r7, #3]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70bb      	strb	r3, [r7, #2]
 800ad2a:	4613      	mov	r3, r2
 800ad2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 04a0 	ldr.w	r0, [r3, #1184]	; 0x4a0
 800ad3c:	787c      	ldrb	r4, [r7, #1]
 800ad3e:	78ba      	ldrb	r2, [r7, #2]
 800ad40:	78f9      	ldrb	r1, [r7, #3]
 800ad42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ad46:	9303      	str	r3, [sp, #12]
 800ad48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad4a:	9302      	str	r3, [sp, #8]
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4e:	9301      	str	r3, [sp, #4]
 800ad50:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad54:	9300      	str	r3, [sp, #0]
 800ad56:	4623      	mov	r3, r4
 800ad58:	f7f7 fc40 	bl	80025dc <HAL_HCD_HC_SubmitRequest>
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	4618      	mov	r0, r3
 800ad64:	f000 f86c 	bl	800ae40 <USBH_Get_USB_Status>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd90      	pop	{r4, r7, pc}

0800ad76 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
 800ad7e:	460b      	mov	r3, r1
 800ad80:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ad88:	78fa      	ldrb	r2, [r7, #3]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7f7 fed0 	bl	8002b32 <HAL_HCD_HC_GetURBState>
 800ad92:	4603      	mov	r3, r0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3708      	adds	r7, #8
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b082      	sub	sp, #8
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 349c 	ldrb.w	r3, [r3, #1180]	; 0x49c
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d103      	bne.n	800adba <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	4618      	mov	r0, r3
 800adb6:	f000 f86f 	bl	800ae98 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800adba:	20c8      	movs	r0, #200	; 0xc8
 800adbc:	f7f6 fe1a 	bl	80019f4 <HAL_Delay>
  return USBH_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800adca:	b480      	push	{r7}
 800adcc:	b085      	sub	sp, #20
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
 800add6:	4613      	mov	r3, r2
 800add8:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800ade0:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ade2:	78fb      	ldrb	r3, [r7, #3]
 800ade4:	68fa      	ldr	r2, [r7, #12]
 800ade6:	212c      	movs	r1, #44	; 0x2c
 800ade8:	fb01 f303 	mul.w	r3, r1, r3
 800adec:	4413      	add	r3, r2
 800adee:	333b      	adds	r3, #59	; 0x3b
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d009      	beq.n	800ae0a <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800adf6:	78fb      	ldrb	r3, [r7, #3]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	212c      	movs	r1, #44	; 0x2c
 800adfc:	fb01 f303 	mul.w	r3, r1, r3
 800ae00:	4413      	add	r3, r2
 800ae02:	3354      	adds	r3, #84	; 0x54
 800ae04:	78ba      	ldrb	r2, [r7, #2]
 800ae06:	701a      	strb	r2, [r3, #0]
 800ae08:	e008      	b.n	800ae1c <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	212c      	movs	r1, #44	; 0x2c
 800ae10:	fb01 f303 	mul.w	r3, r1, r3
 800ae14:	4413      	add	r3, r2
 800ae16:	3355      	adds	r3, #85	; 0x55
 800ae18:	78ba      	ldrb	r2, [r7, #2]
 800ae1a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	b082      	sub	sp, #8
 800ae2e:	af00      	add	r7, sp, #0
 800ae30:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f7f6 fdde 	bl	80019f4 <HAL_Delay>
}
 800ae38:	bf00      	nop
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	4603      	mov	r3, r0
 800ae48:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d817      	bhi.n	800ae84 <USBH_Get_USB_Status+0x44>
 800ae54:	a201      	add	r2, pc, #4	; (adr r2, 800ae5c <USBH_Get_USB_Status+0x1c>)
 800ae56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae5a:	bf00      	nop
 800ae5c:	0800ae6d 	.word	0x0800ae6d
 800ae60:	0800ae73 	.word	0x0800ae73
 800ae64:	0800ae79 	.word	0x0800ae79
 800ae68:	0800ae7f 	.word	0x0800ae7f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae70:	e00b      	b.n	800ae8a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae72:	2302      	movs	r3, #2
 800ae74:	73fb      	strb	r3, [r7, #15]
    break;
 800ae76:	e008      	b.n	800ae8a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae7c:	e005      	b.n	800ae8a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae7e:	2302      	movs	r3, #2
 800ae80:	73fb      	strb	r3, [r7, #15]
    break;
 800ae82:	e002      	b.n	800ae8a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae84:	2302      	movs	r3, #2
 800ae86:	73fb      	strb	r3, [r7, #15]
    break;
 800ae88:	bf00      	nop
  }
  return usb_status;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800aea2:	79fb      	ldrb	r3, [r7, #7]
 800aea4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800aeac:	2300      	movs	r3, #0
 800aeae:	73fb      	strb	r3, [r7, #15]
 800aeb0:	e001      	b.n	800aeb6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 800aeb6:	7bfb      	ldrb	r3, [r7, #15]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	2140      	movs	r1, #64	; 0x40
 800aebc:	4803      	ldr	r0, [pc, #12]	; (800aecc <MX_DriverVbusFS+0x34>)
 800aebe:	f7f7 fa47 	bl	8002350 <HAL_GPIO_WritePin>
}
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	48001800 	.word	0x48001800

0800aed0 <malloc>:
 800aed0:	4b02      	ldr	r3, [pc, #8]	; (800aedc <malloc+0xc>)
 800aed2:	4601      	mov	r1, r0
 800aed4:	6818      	ldr	r0, [r3, #0]
 800aed6:	f000 b82b 	b.w	800af30 <_malloc_r>
 800aeda:	bf00      	nop
 800aedc:	20000094 	.word	0x20000094

0800aee0 <free>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <free+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f001 bd11 	b.w	800c90c <_free_r>
 800aeea:	bf00      	nop
 800aeec:	20000094 	.word	0x20000094

0800aef0 <sbrk_aligned>:
 800aef0:	b570      	push	{r4, r5, r6, lr}
 800aef2:	4e0e      	ldr	r6, [pc, #56]	; (800af2c <sbrk_aligned+0x3c>)
 800aef4:	460c      	mov	r4, r1
 800aef6:	6831      	ldr	r1, [r6, #0]
 800aef8:	4605      	mov	r5, r0
 800aefa:	b911      	cbnz	r1, 800af02 <sbrk_aligned+0x12>
 800aefc:	f000 fe3e 	bl	800bb7c <_sbrk_r>
 800af00:	6030      	str	r0, [r6, #0]
 800af02:	4621      	mov	r1, r4
 800af04:	4628      	mov	r0, r5
 800af06:	f000 fe39 	bl	800bb7c <_sbrk_r>
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	d00a      	beq.n	800af24 <sbrk_aligned+0x34>
 800af0e:	1cc4      	adds	r4, r0, #3
 800af10:	f024 0403 	bic.w	r4, r4, #3
 800af14:	42a0      	cmp	r0, r4
 800af16:	d007      	beq.n	800af28 <sbrk_aligned+0x38>
 800af18:	1a21      	subs	r1, r4, r0
 800af1a:	4628      	mov	r0, r5
 800af1c:	f000 fe2e 	bl	800bb7c <_sbrk_r>
 800af20:	3001      	adds	r0, #1
 800af22:	d101      	bne.n	800af28 <sbrk_aligned+0x38>
 800af24:	f04f 34ff 	mov.w	r4, #4294967295
 800af28:	4620      	mov	r0, r4
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	20000c04 	.word	0x20000c04

0800af30 <_malloc_r>:
 800af30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af34:	1ccd      	adds	r5, r1, #3
 800af36:	f025 0503 	bic.w	r5, r5, #3
 800af3a:	3508      	adds	r5, #8
 800af3c:	2d0c      	cmp	r5, #12
 800af3e:	bf38      	it	cc
 800af40:	250c      	movcc	r5, #12
 800af42:	2d00      	cmp	r5, #0
 800af44:	4607      	mov	r7, r0
 800af46:	db01      	blt.n	800af4c <_malloc_r+0x1c>
 800af48:	42a9      	cmp	r1, r5
 800af4a:	d905      	bls.n	800af58 <_malloc_r+0x28>
 800af4c:	230c      	movs	r3, #12
 800af4e:	603b      	str	r3, [r7, #0]
 800af50:	2600      	movs	r6, #0
 800af52:	4630      	mov	r0, r6
 800af54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b02c <_malloc_r+0xfc>
 800af5c:	f000 f868 	bl	800b030 <__malloc_lock>
 800af60:	f8d8 3000 	ldr.w	r3, [r8]
 800af64:	461c      	mov	r4, r3
 800af66:	bb5c      	cbnz	r4, 800afc0 <_malloc_r+0x90>
 800af68:	4629      	mov	r1, r5
 800af6a:	4638      	mov	r0, r7
 800af6c:	f7ff ffc0 	bl	800aef0 <sbrk_aligned>
 800af70:	1c43      	adds	r3, r0, #1
 800af72:	4604      	mov	r4, r0
 800af74:	d155      	bne.n	800b022 <_malloc_r+0xf2>
 800af76:	f8d8 4000 	ldr.w	r4, [r8]
 800af7a:	4626      	mov	r6, r4
 800af7c:	2e00      	cmp	r6, #0
 800af7e:	d145      	bne.n	800b00c <_malloc_r+0xdc>
 800af80:	2c00      	cmp	r4, #0
 800af82:	d048      	beq.n	800b016 <_malloc_r+0xe6>
 800af84:	6823      	ldr	r3, [r4, #0]
 800af86:	4631      	mov	r1, r6
 800af88:	4638      	mov	r0, r7
 800af8a:	eb04 0903 	add.w	r9, r4, r3
 800af8e:	f000 fdf5 	bl	800bb7c <_sbrk_r>
 800af92:	4581      	cmp	r9, r0
 800af94:	d13f      	bne.n	800b016 <_malloc_r+0xe6>
 800af96:	6821      	ldr	r1, [r4, #0]
 800af98:	1a6d      	subs	r5, r5, r1
 800af9a:	4629      	mov	r1, r5
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff ffa7 	bl	800aef0 <sbrk_aligned>
 800afa2:	3001      	adds	r0, #1
 800afa4:	d037      	beq.n	800b016 <_malloc_r+0xe6>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	442b      	add	r3, r5
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	f8d8 3000 	ldr.w	r3, [r8]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d038      	beq.n	800b026 <_malloc_r+0xf6>
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	42a2      	cmp	r2, r4
 800afb8:	d12b      	bne.n	800b012 <_malloc_r+0xe2>
 800afba:	2200      	movs	r2, #0
 800afbc:	605a      	str	r2, [r3, #4]
 800afbe:	e00f      	b.n	800afe0 <_malloc_r+0xb0>
 800afc0:	6822      	ldr	r2, [r4, #0]
 800afc2:	1b52      	subs	r2, r2, r5
 800afc4:	d41f      	bmi.n	800b006 <_malloc_r+0xd6>
 800afc6:	2a0b      	cmp	r2, #11
 800afc8:	d917      	bls.n	800affa <_malloc_r+0xca>
 800afca:	1961      	adds	r1, r4, r5
 800afcc:	42a3      	cmp	r3, r4
 800afce:	6025      	str	r5, [r4, #0]
 800afd0:	bf18      	it	ne
 800afd2:	6059      	strne	r1, [r3, #4]
 800afd4:	6863      	ldr	r3, [r4, #4]
 800afd6:	bf08      	it	eq
 800afd8:	f8c8 1000 	streq.w	r1, [r8]
 800afdc:	5162      	str	r2, [r4, r5]
 800afde:	604b      	str	r3, [r1, #4]
 800afe0:	4638      	mov	r0, r7
 800afe2:	f104 060b 	add.w	r6, r4, #11
 800afe6:	f000 f829 	bl	800b03c <__malloc_unlock>
 800afea:	f026 0607 	bic.w	r6, r6, #7
 800afee:	1d23      	adds	r3, r4, #4
 800aff0:	1af2      	subs	r2, r6, r3
 800aff2:	d0ae      	beq.n	800af52 <_malloc_r+0x22>
 800aff4:	1b9b      	subs	r3, r3, r6
 800aff6:	50a3      	str	r3, [r4, r2]
 800aff8:	e7ab      	b.n	800af52 <_malloc_r+0x22>
 800affa:	42a3      	cmp	r3, r4
 800affc:	6862      	ldr	r2, [r4, #4]
 800affe:	d1dd      	bne.n	800afbc <_malloc_r+0x8c>
 800b000:	f8c8 2000 	str.w	r2, [r8]
 800b004:	e7ec      	b.n	800afe0 <_malloc_r+0xb0>
 800b006:	4623      	mov	r3, r4
 800b008:	6864      	ldr	r4, [r4, #4]
 800b00a:	e7ac      	b.n	800af66 <_malloc_r+0x36>
 800b00c:	4634      	mov	r4, r6
 800b00e:	6876      	ldr	r6, [r6, #4]
 800b010:	e7b4      	b.n	800af7c <_malloc_r+0x4c>
 800b012:	4613      	mov	r3, r2
 800b014:	e7cc      	b.n	800afb0 <_malloc_r+0x80>
 800b016:	230c      	movs	r3, #12
 800b018:	603b      	str	r3, [r7, #0]
 800b01a:	4638      	mov	r0, r7
 800b01c:	f000 f80e 	bl	800b03c <__malloc_unlock>
 800b020:	e797      	b.n	800af52 <_malloc_r+0x22>
 800b022:	6025      	str	r5, [r4, #0]
 800b024:	e7dc      	b.n	800afe0 <_malloc_r+0xb0>
 800b026:	605b      	str	r3, [r3, #4]
 800b028:	deff      	udf	#255	; 0xff
 800b02a:	bf00      	nop
 800b02c:	20000c00 	.word	0x20000c00

0800b030 <__malloc_lock>:
 800b030:	4801      	ldr	r0, [pc, #4]	; (800b038 <__malloc_lock+0x8>)
 800b032:	f000 bdef 	b.w	800bc14 <__retarget_lock_acquire_recursive>
 800b036:	bf00      	nop
 800b038:	20000d48 	.word	0x20000d48

0800b03c <__malloc_unlock>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__malloc_unlock+0x8>)
 800b03e:	f000 bdea 	b.w	800bc16 <__retarget_lock_release_recursive>
 800b042:	bf00      	nop
 800b044:	20000d48 	.word	0x20000d48

0800b048 <__cvt>:
 800b048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b04c:	ec55 4b10 	vmov	r4, r5, d0
 800b050:	2d00      	cmp	r5, #0
 800b052:	460e      	mov	r6, r1
 800b054:	4619      	mov	r1, r3
 800b056:	462b      	mov	r3, r5
 800b058:	bfbb      	ittet	lt
 800b05a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b05e:	461d      	movlt	r5, r3
 800b060:	2300      	movge	r3, #0
 800b062:	232d      	movlt	r3, #45	; 0x2d
 800b064:	700b      	strb	r3, [r1, #0]
 800b066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b068:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b06c:	4691      	mov	r9, r2
 800b06e:	f023 0820 	bic.w	r8, r3, #32
 800b072:	bfbc      	itt	lt
 800b074:	4622      	movlt	r2, r4
 800b076:	4614      	movlt	r4, r2
 800b078:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b07c:	d005      	beq.n	800b08a <__cvt+0x42>
 800b07e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b082:	d100      	bne.n	800b086 <__cvt+0x3e>
 800b084:	3601      	adds	r6, #1
 800b086:	2102      	movs	r1, #2
 800b088:	e000      	b.n	800b08c <__cvt+0x44>
 800b08a:	2103      	movs	r1, #3
 800b08c:	ab03      	add	r3, sp, #12
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	ab02      	add	r3, sp, #8
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	ec45 4b10 	vmov	d0, r4, r5
 800b098:	4653      	mov	r3, sl
 800b09a:	4632      	mov	r2, r6
 800b09c:	f000 fe44 	bl	800bd28 <_dtoa_r>
 800b0a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b0a4:	4607      	mov	r7, r0
 800b0a6:	d102      	bne.n	800b0ae <__cvt+0x66>
 800b0a8:	f019 0f01 	tst.w	r9, #1
 800b0ac:	d022      	beq.n	800b0f4 <__cvt+0xac>
 800b0ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b0b2:	eb07 0906 	add.w	r9, r7, r6
 800b0b6:	d110      	bne.n	800b0da <__cvt+0x92>
 800b0b8:	783b      	ldrb	r3, [r7, #0]
 800b0ba:	2b30      	cmp	r3, #48	; 0x30
 800b0bc:	d10a      	bne.n	800b0d4 <__cvt+0x8c>
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	4629      	mov	r1, r5
 800b0c6:	f7f5 fd0f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0ca:	b918      	cbnz	r0, 800b0d4 <__cvt+0x8c>
 800b0cc:	f1c6 0601 	rsb	r6, r6, #1
 800b0d0:	f8ca 6000 	str.w	r6, [sl]
 800b0d4:	f8da 3000 	ldr.w	r3, [sl]
 800b0d8:	4499      	add	r9, r3
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	f7f5 fd01 	bl	8000ae8 <__aeabi_dcmpeq>
 800b0e6:	b108      	cbz	r0, 800b0ec <__cvt+0xa4>
 800b0e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0ec:	2230      	movs	r2, #48	; 0x30
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	454b      	cmp	r3, r9
 800b0f2:	d307      	bcc.n	800b104 <__cvt+0xbc>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b0f8:	1bdb      	subs	r3, r3, r7
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	b004      	add	sp, #16
 800b100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b104:	1c59      	adds	r1, r3, #1
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	701a      	strb	r2, [r3, #0]
 800b10a:	e7f0      	b.n	800b0ee <__cvt+0xa6>

0800b10c <__exponent>:
 800b10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b10e:	4603      	mov	r3, r0
 800b110:	2900      	cmp	r1, #0
 800b112:	bfb8      	it	lt
 800b114:	4249      	neglt	r1, r1
 800b116:	f803 2b02 	strb.w	r2, [r3], #2
 800b11a:	bfb4      	ite	lt
 800b11c:	222d      	movlt	r2, #45	; 0x2d
 800b11e:	222b      	movge	r2, #43	; 0x2b
 800b120:	2909      	cmp	r1, #9
 800b122:	7042      	strb	r2, [r0, #1]
 800b124:	dd2a      	ble.n	800b17c <__exponent+0x70>
 800b126:	f10d 0207 	add.w	r2, sp, #7
 800b12a:	4617      	mov	r7, r2
 800b12c:	260a      	movs	r6, #10
 800b12e:	4694      	mov	ip, r2
 800b130:	fb91 f5f6 	sdiv	r5, r1, r6
 800b134:	fb06 1415 	mls	r4, r6, r5, r1
 800b138:	3430      	adds	r4, #48	; 0x30
 800b13a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b13e:	460c      	mov	r4, r1
 800b140:	2c63      	cmp	r4, #99	; 0x63
 800b142:	f102 32ff 	add.w	r2, r2, #4294967295
 800b146:	4629      	mov	r1, r5
 800b148:	dcf1      	bgt.n	800b12e <__exponent+0x22>
 800b14a:	3130      	adds	r1, #48	; 0x30
 800b14c:	f1ac 0402 	sub.w	r4, ip, #2
 800b150:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b154:	1c41      	adds	r1, r0, #1
 800b156:	4622      	mov	r2, r4
 800b158:	42ba      	cmp	r2, r7
 800b15a:	d30a      	bcc.n	800b172 <__exponent+0x66>
 800b15c:	f10d 0209 	add.w	r2, sp, #9
 800b160:	eba2 020c 	sub.w	r2, r2, ip
 800b164:	42bc      	cmp	r4, r7
 800b166:	bf88      	it	hi
 800b168:	2200      	movhi	r2, #0
 800b16a:	4413      	add	r3, r2
 800b16c:	1a18      	subs	r0, r3, r0
 800b16e:	b003      	add	sp, #12
 800b170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b172:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b176:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b17a:	e7ed      	b.n	800b158 <__exponent+0x4c>
 800b17c:	2330      	movs	r3, #48	; 0x30
 800b17e:	3130      	adds	r1, #48	; 0x30
 800b180:	7083      	strb	r3, [r0, #2]
 800b182:	70c1      	strb	r1, [r0, #3]
 800b184:	1d03      	adds	r3, r0, #4
 800b186:	e7f1      	b.n	800b16c <__exponent+0x60>

0800b188 <_printf_float>:
 800b188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b18c:	ed2d 8b02 	vpush	{d8}
 800b190:	b08d      	sub	sp, #52	; 0x34
 800b192:	460c      	mov	r4, r1
 800b194:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b198:	4616      	mov	r6, r2
 800b19a:	461f      	mov	r7, r3
 800b19c:	4605      	mov	r5, r0
 800b19e:	f000 fcb5 	bl	800bb0c <_localeconv_r>
 800b1a2:	f8d0 a000 	ldr.w	sl, [r0]
 800b1a6:	4650      	mov	r0, sl
 800b1a8:	f7f5 f872 	bl	8000290 <strlen>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	9305      	str	r3, [sp, #20]
 800b1b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b1bc:	3307      	adds	r3, #7
 800b1be:	f023 0307 	bic.w	r3, r3, #7
 800b1c2:	f103 0208 	add.w	r2, r3, #8
 800b1c6:	f8c8 2000 	str.w	r2, [r8]
 800b1ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b1d2:	9307      	str	r3, [sp, #28]
 800b1d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800b1d8:	ee08 0a10 	vmov	s16, r0
 800b1dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b1e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1e4:	4b9e      	ldr	r3, [pc, #632]	; (800b460 <_printf_float+0x2d8>)
 800b1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ea:	f7f5 fcaf 	bl	8000b4c <__aeabi_dcmpun>
 800b1ee:	bb88      	cbnz	r0, 800b254 <_printf_float+0xcc>
 800b1f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b1f4:	4b9a      	ldr	r3, [pc, #616]	; (800b460 <_printf_float+0x2d8>)
 800b1f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1fa:	f7f5 fc89 	bl	8000b10 <__aeabi_dcmple>
 800b1fe:	bb48      	cbnz	r0, 800b254 <_printf_float+0xcc>
 800b200:	2200      	movs	r2, #0
 800b202:	2300      	movs	r3, #0
 800b204:	4640      	mov	r0, r8
 800b206:	4649      	mov	r1, r9
 800b208:	f7f5 fc78 	bl	8000afc <__aeabi_dcmplt>
 800b20c:	b110      	cbz	r0, 800b214 <_printf_float+0x8c>
 800b20e:	232d      	movs	r3, #45	; 0x2d
 800b210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b214:	4a93      	ldr	r2, [pc, #588]	; (800b464 <_printf_float+0x2dc>)
 800b216:	4b94      	ldr	r3, [pc, #592]	; (800b468 <_printf_float+0x2e0>)
 800b218:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b21c:	bf94      	ite	ls
 800b21e:	4690      	movls	r8, r2
 800b220:	4698      	movhi	r8, r3
 800b222:	2303      	movs	r3, #3
 800b224:	6123      	str	r3, [r4, #16]
 800b226:	9b05      	ldr	r3, [sp, #20]
 800b228:	f023 0304 	bic.w	r3, r3, #4
 800b22c:	6023      	str	r3, [r4, #0]
 800b22e:	f04f 0900 	mov.w	r9, #0
 800b232:	9700      	str	r7, [sp, #0]
 800b234:	4633      	mov	r3, r6
 800b236:	aa0b      	add	r2, sp, #44	; 0x2c
 800b238:	4621      	mov	r1, r4
 800b23a:	4628      	mov	r0, r5
 800b23c:	f000 f9da 	bl	800b5f4 <_printf_common>
 800b240:	3001      	adds	r0, #1
 800b242:	f040 8090 	bne.w	800b366 <_printf_float+0x1de>
 800b246:	f04f 30ff 	mov.w	r0, #4294967295
 800b24a:	b00d      	add	sp, #52	; 0x34
 800b24c:	ecbd 8b02 	vpop	{d8}
 800b250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	4640      	mov	r0, r8
 800b25a:	4649      	mov	r1, r9
 800b25c:	f7f5 fc76 	bl	8000b4c <__aeabi_dcmpun>
 800b260:	b140      	cbz	r0, 800b274 <_printf_float+0xec>
 800b262:	464b      	mov	r3, r9
 800b264:	2b00      	cmp	r3, #0
 800b266:	bfbc      	itt	lt
 800b268:	232d      	movlt	r3, #45	; 0x2d
 800b26a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b26e:	4a7f      	ldr	r2, [pc, #508]	; (800b46c <_printf_float+0x2e4>)
 800b270:	4b7f      	ldr	r3, [pc, #508]	; (800b470 <_printf_float+0x2e8>)
 800b272:	e7d1      	b.n	800b218 <_printf_float+0x90>
 800b274:	6863      	ldr	r3, [r4, #4]
 800b276:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b27a:	9206      	str	r2, [sp, #24]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	d13f      	bne.n	800b300 <_printf_float+0x178>
 800b280:	2306      	movs	r3, #6
 800b282:	6063      	str	r3, [r4, #4]
 800b284:	9b05      	ldr	r3, [sp, #20]
 800b286:	6861      	ldr	r1, [r4, #4]
 800b288:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b28c:	2300      	movs	r3, #0
 800b28e:	9303      	str	r3, [sp, #12]
 800b290:	ab0a      	add	r3, sp, #40	; 0x28
 800b292:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b296:	ab09      	add	r3, sp, #36	; 0x24
 800b298:	ec49 8b10 	vmov	d0, r8, r9
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	6022      	str	r2, [r4, #0]
 800b2a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b2a4:	4628      	mov	r0, r5
 800b2a6:	f7ff fecf 	bl	800b048 <__cvt>
 800b2aa:	9b06      	ldr	r3, [sp, #24]
 800b2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2ae:	2b47      	cmp	r3, #71	; 0x47
 800b2b0:	4680      	mov	r8, r0
 800b2b2:	d108      	bne.n	800b2c6 <_printf_float+0x13e>
 800b2b4:	1cc8      	adds	r0, r1, #3
 800b2b6:	db02      	blt.n	800b2be <_printf_float+0x136>
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	4299      	cmp	r1, r3
 800b2bc:	dd41      	ble.n	800b342 <_printf_float+0x1ba>
 800b2be:	f1ab 0302 	sub.w	r3, fp, #2
 800b2c2:	fa5f fb83 	uxtb.w	fp, r3
 800b2c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b2ca:	d820      	bhi.n	800b30e <_printf_float+0x186>
 800b2cc:	3901      	subs	r1, #1
 800b2ce:	465a      	mov	r2, fp
 800b2d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b2d4:	9109      	str	r1, [sp, #36]	; 0x24
 800b2d6:	f7ff ff19 	bl	800b10c <__exponent>
 800b2da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b2dc:	1813      	adds	r3, r2, r0
 800b2de:	2a01      	cmp	r2, #1
 800b2e0:	4681      	mov	r9, r0
 800b2e2:	6123      	str	r3, [r4, #16]
 800b2e4:	dc02      	bgt.n	800b2ec <_printf_float+0x164>
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	07d2      	lsls	r2, r2, #31
 800b2ea:	d501      	bpl.n	800b2f0 <_printf_float+0x168>
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	6123      	str	r3, [r4, #16]
 800b2f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d09c      	beq.n	800b232 <_printf_float+0xaa>
 800b2f8:	232d      	movs	r3, #45	; 0x2d
 800b2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2fe:	e798      	b.n	800b232 <_printf_float+0xaa>
 800b300:	9a06      	ldr	r2, [sp, #24]
 800b302:	2a47      	cmp	r2, #71	; 0x47
 800b304:	d1be      	bne.n	800b284 <_printf_float+0xfc>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1bc      	bne.n	800b284 <_printf_float+0xfc>
 800b30a:	2301      	movs	r3, #1
 800b30c:	e7b9      	b.n	800b282 <_printf_float+0xfa>
 800b30e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b312:	d118      	bne.n	800b346 <_printf_float+0x1be>
 800b314:	2900      	cmp	r1, #0
 800b316:	6863      	ldr	r3, [r4, #4]
 800b318:	dd0b      	ble.n	800b332 <_printf_float+0x1aa>
 800b31a:	6121      	str	r1, [r4, #16]
 800b31c:	b913      	cbnz	r3, 800b324 <_printf_float+0x19c>
 800b31e:	6822      	ldr	r2, [r4, #0]
 800b320:	07d0      	lsls	r0, r2, #31
 800b322:	d502      	bpl.n	800b32a <_printf_float+0x1a2>
 800b324:	3301      	adds	r3, #1
 800b326:	440b      	add	r3, r1
 800b328:	6123      	str	r3, [r4, #16]
 800b32a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b32c:	f04f 0900 	mov.w	r9, #0
 800b330:	e7de      	b.n	800b2f0 <_printf_float+0x168>
 800b332:	b913      	cbnz	r3, 800b33a <_printf_float+0x1b2>
 800b334:	6822      	ldr	r2, [r4, #0]
 800b336:	07d2      	lsls	r2, r2, #31
 800b338:	d501      	bpl.n	800b33e <_printf_float+0x1b6>
 800b33a:	3302      	adds	r3, #2
 800b33c:	e7f4      	b.n	800b328 <_printf_float+0x1a0>
 800b33e:	2301      	movs	r3, #1
 800b340:	e7f2      	b.n	800b328 <_printf_float+0x1a0>
 800b342:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b346:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b348:	4299      	cmp	r1, r3
 800b34a:	db05      	blt.n	800b358 <_printf_float+0x1d0>
 800b34c:	6823      	ldr	r3, [r4, #0]
 800b34e:	6121      	str	r1, [r4, #16]
 800b350:	07d8      	lsls	r0, r3, #31
 800b352:	d5ea      	bpl.n	800b32a <_printf_float+0x1a2>
 800b354:	1c4b      	adds	r3, r1, #1
 800b356:	e7e7      	b.n	800b328 <_printf_float+0x1a0>
 800b358:	2900      	cmp	r1, #0
 800b35a:	bfd4      	ite	le
 800b35c:	f1c1 0202 	rsble	r2, r1, #2
 800b360:	2201      	movgt	r2, #1
 800b362:	4413      	add	r3, r2
 800b364:	e7e0      	b.n	800b328 <_printf_float+0x1a0>
 800b366:	6823      	ldr	r3, [r4, #0]
 800b368:	055a      	lsls	r2, r3, #21
 800b36a:	d407      	bmi.n	800b37c <_printf_float+0x1f4>
 800b36c:	6923      	ldr	r3, [r4, #16]
 800b36e:	4642      	mov	r2, r8
 800b370:	4631      	mov	r1, r6
 800b372:	4628      	mov	r0, r5
 800b374:	47b8      	blx	r7
 800b376:	3001      	adds	r0, #1
 800b378:	d12c      	bne.n	800b3d4 <_printf_float+0x24c>
 800b37a:	e764      	b.n	800b246 <_printf_float+0xbe>
 800b37c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b380:	f240 80e0 	bls.w	800b544 <_printf_float+0x3bc>
 800b384:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b388:	2200      	movs	r2, #0
 800b38a:	2300      	movs	r3, #0
 800b38c:	f7f5 fbac 	bl	8000ae8 <__aeabi_dcmpeq>
 800b390:	2800      	cmp	r0, #0
 800b392:	d034      	beq.n	800b3fe <_printf_float+0x276>
 800b394:	4a37      	ldr	r2, [pc, #220]	; (800b474 <_printf_float+0x2ec>)
 800b396:	2301      	movs	r3, #1
 800b398:	4631      	mov	r1, r6
 800b39a:	4628      	mov	r0, r5
 800b39c:	47b8      	blx	r7
 800b39e:	3001      	adds	r0, #1
 800b3a0:	f43f af51 	beq.w	800b246 <_printf_float+0xbe>
 800b3a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	db02      	blt.n	800b3b2 <_printf_float+0x22a>
 800b3ac:	6823      	ldr	r3, [r4, #0]
 800b3ae:	07d8      	lsls	r0, r3, #31
 800b3b0:	d510      	bpl.n	800b3d4 <_printf_float+0x24c>
 800b3b2:	ee18 3a10 	vmov	r3, s16
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4628      	mov	r0, r5
 800b3bc:	47b8      	blx	r7
 800b3be:	3001      	adds	r0, #1
 800b3c0:	f43f af41 	beq.w	800b246 <_printf_float+0xbe>
 800b3c4:	f04f 0800 	mov.w	r8, #0
 800b3c8:	f104 091a 	add.w	r9, r4, #26
 800b3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	4543      	cmp	r3, r8
 800b3d2:	dc09      	bgt.n	800b3e8 <_printf_float+0x260>
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	079b      	lsls	r3, r3, #30
 800b3d8:	f100 8107 	bmi.w	800b5ea <_printf_float+0x462>
 800b3dc:	68e0      	ldr	r0, [r4, #12]
 800b3de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3e0:	4298      	cmp	r0, r3
 800b3e2:	bfb8      	it	lt
 800b3e4:	4618      	movlt	r0, r3
 800b3e6:	e730      	b.n	800b24a <_printf_float+0xc2>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	464a      	mov	r2, r9
 800b3ec:	4631      	mov	r1, r6
 800b3ee:	4628      	mov	r0, r5
 800b3f0:	47b8      	blx	r7
 800b3f2:	3001      	adds	r0, #1
 800b3f4:	f43f af27 	beq.w	800b246 <_printf_float+0xbe>
 800b3f8:	f108 0801 	add.w	r8, r8, #1
 800b3fc:	e7e6      	b.n	800b3cc <_printf_float+0x244>
 800b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b400:	2b00      	cmp	r3, #0
 800b402:	dc39      	bgt.n	800b478 <_printf_float+0x2f0>
 800b404:	4a1b      	ldr	r2, [pc, #108]	; (800b474 <_printf_float+0x2ec>)
 800b406:	2301      	movs	r3, #1
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f43f af19 	beq.w	800b246 <_printf_float+0xbe>
 800b414:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b418:	4313      	orrs	r3, r2
 800b41a:	d102      	bne.n	800b422 <_printf_float+0x29a>
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	07d9      	lsls	r1, r3, #31
 800b420:	d5d8      	bpl.n	800b3d4 <_printf_float+0x24c>
 800b422:	ee18 3a10 	vmov	r3, s16
 800b426:	4652      	mov	r2, sl
 800b428:	4631      	mov	r1, r6
 800b42a:	4628      	mov	r0, r5
 800b42c:	47b8      	blx	r7
 800b42e:	3001      	adds	r0, #1
 800b430:	f43f af09 	beq.w	800b246 <_printf_float+0xbe>
 800b434:	f04f 0900 	mov.w	r9, #0
 800b438:	f104 0a1a 	add.w	sl, r4, #26
 800b43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43e:	425b      	negs	r3, r3
 800b440:	454b      	cmp	r3, r9
 800b442:	dc01      	bgt.n	800b448 <_printf_float+0x2c0>
 800b444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b446:	e792      	b.n	800b36e <_printf_float+0x1e6>
 800b448:	2301      	movs	r3, #1
 800b44a:	4652      	mov	r2, sl
 800b44c:	4631      	mov	r1, r6
 800b44e:	4628      	mov	r0, r5
 800b450:	47b8      	blx	r7
 800b452:	3001      	adds	r0, #1
 800b454:	f43f aef7 	beq.w	800b246 <_printf_float+0xbe>
 800b458:	f109 0901 	add.w	r9, r9, #1
 800b45c:	e7ee      	b.n	800b43c <_printf_float+0x2b4>
 800b45e:	bf00      	nop
 800b460:	7fefffff 	.word	0x7fefffff
 800b464:	0800d898 	.word	0x0800d898
 800b468:	0800d89c 	.word	0x0800d89c
 800b46c:	0800d8a0 	.word	0x0800d8a0
 800b470:	0800d8a4 	.word	0x0800d8a4
 800b474:	0800d8a8 	.word	0x0800d8a8
 800b478:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b47a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b47c:	429a      	cmp	r2, r3
 800b47e:	bfa8      	it	ge
 800b480:	461a      	movge	r2, r3
 800b482:	2a00      	cmp	r2, #0
 800b484:	4691      	mov	r9, r2
 800b486:	dc37      	bgt.n	800b4f8 <_printf_float+0x370>
 800b488:	f04f 0b00 	mov.w	fp, #0
 800b48c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b490:	f104 021a 	add.w	r2, r4, #26
 800b494:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b496:	9305      	str	r3, [sp, #20]
 800b498:	eba3 0309 	sub.w	r3, r3, r9
 800b49c:	455b      	cmp	r3, fp
 800b49e:	dc33      	bgt.n	800b508 <_printf_float+0x380>
 800b4a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	db3b      	blt.n	800b520 <_printf_float+0x398>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07da      	lsls	r2, r3, #31
 800b4ac:	d438      	bmi.n	800b520 <_printf_float+0x398>
 800b4ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b4b2:	eba2 0903 	sub.w	r9, r2, r3
 800b4b6:	9b05      	ldr	r3, [sp, #20]
 800b4b8:	1ad2      	subs	r2, r2, r3
 800b4ba:	4591      	cmp	r9, r2
 800b4bc:	bfa8      	it	ge
 800b4be:	4691      	movge	r9, r2
 800b4c0:	f1b9 0f00 	cmp.w	r9, #0
 800b4c4:	dc35      	bgt.n	800b532 <_printf_float+0x3aa>
 800b4c6:	f04f 0800 	mov.w	r8, #0
 800b4ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ce:	f104 0a1a 	add.w	sl, r4, #26
 800b4d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b4d6:	1a9b      	subs	r3, r3, r2
 800b4d8:	eba3 0309 	sub.w	r3, r3, r9
 800b4dc:	4543      	cmp	r3, r8
 800b4de:	f77f af79 	ble.w	800b3d4 <_printf_float+0x24c>
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	4652      	mov	r2, sl
 800b4e6:	4631      	mov	r1, r6
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	47b8      	blx	r7
 800b4ec:	3001      	adds	r0, #1
 800b4ee:	f43f aeaa 	beq.w	800b246 <_printf_float+0xbe>
 800b4f2:	f108 0801 	add.w	r8, r8, #1
 800b4f6:	e7ec      	b.n	800b4d2 <_printf_float+0x34a>
 800b4f8:	4613      	mov	r3, r2
 800b4fa:	4631      	mov	r1, r6
 800b4fc:	4642      	mov	r2, r8
 800b4fe:	4628      	mov	r0, r5
 800b500:	47b8      	blx	r7
 800b502:	3001      	adds	r0, #1
 800b504:	d1c0      	bne.n	800b488 <_printf_float+0x300>
 800b506:	e69e      	b.n	800b246 <_printf_float+0xbe>
 800b508:	2301      	movs	r3, #1
 800b50a:	4631      	mov	r1, r6
 800b50c:	4628      	mov	r0, r5
 800b50e:	9205      	str	r2, [sp, #20]
 800b510:	47b8      	blx	r7
 800b512:	3001      	adds	r0, #1
 800b514:	f43f ae97 	beq.w	800b246 <_printf_float+0xbe>
 800b518:	9a05      	ldr	r2, [sp, #20]
 800b51a:	f10b 0b01 	add.w	fp, fp, #1
 800b51e:	e7b9      	b.n	800b494 <_printf_float+0x30c>
 800b520:	ee18 3a10 	vmov	r3, s16
 800b524:	4652      	mov	r2, sl
 800b526:	4631      	mov	r1, r6
 800b528:	4628      	mov	r0, r5
 800b52a:	47b8      	blx	r7
 800b52c:	3001      	adds	r0, #1
 800b52e:	d1be      	bne.n	800b4ae <_printf_float+0x326>
 800b530:	e689      	b.n	800b246 <_printf_float+0xbe>
 800b532:	9a05      	ldr	r2, [sp, #20]
 800b534:	464b      	mov	r3, r9
 800b536:	4442      	add	r2, r8
 800b538:	4631      	mov	r1, r6
 800b53a:	4628      	mov	r0, r5
 800b53c:	47b8      	blx	r7
 800b53e:	3001      	adds	r0, #1
 800b540:	d1c1      	bne.n	800b4c6 <_printf_float+0x33e>
 800b542:	e680      	b.n	800b246 <_printf_float+0xbe>
 800b544:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b546:	2a01      	cmp	r2, #1
 800b548:	dc01      	bgt.n	800b54e <_printf_float+0x3c6>
 800b54a:	07db      	lsls	r3, r3, #31
 800b54c:	d53a      	bpl.n	800b5c4 <_printf_float+0x43c>
 800b54e:	2301      	movs	r3, #1
 800b550:	4642      	mov	r2, r8
 800b552:	4631      	mov	r1, r6
 800b554:	4628      	mov	r0, r5
 800b556:	47b8      	blx	r7
 800b558:	3001      	adds	r0, #1
 800b55a:	f43f ae74 	beq.w	800b246 <_printf_float+0xbe>
 800b55e:	ee18 3a10 	vmov	r3, s16
 800b562:	4652      	mov	r2, sl
 800b564:	4631      	mov	r1, r6
 800b566:	4628      	mov	r0, r5
 800b568:	47b8      	blx	r7
 800b56a:	3001      	adds	r0, #1
 800b56c:	f43f ae6b 	beq.w	800b246 <_printf_float+0xbe>
 800b570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b574:	2200      	movs	r2, #0
 800b576:	2300      	movs	r3, #0
 800b578:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b57c:	f7f5 fab4 	bl	8000ae8 <__aeabi_dcmpeq>
 800b580:	b9d8      	cbnz	r0, 800b5ba <_printf_float+0x432>
 800b582:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b586:	f108 0201 	add.w	r2, r8, #1
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	d10e      	bne.n	800b5b2 <_printf_float+0x42a>
 800b594:	e657      	b.n	800b246 <_printf_float+0xbe>
 800b596:	2301      	movs	r3, #1
 800b598:	4652      	mov	r2, sl
 800b59a:	4631      	mov	r1, r6
 800b59c:	4628      	mov	r0, r5
 800b59e:	47b8      	blx	r7
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	f43f ae50 	beq.w	800b246 <_printf_float+0xbe>
 800b5a6:	f108 0801 	add.w	r8, r8, #1
 800b5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	4543      	cmp	r3, r8
 800b5b0:	dcf1      	bgt.n	800b596 <_printf_float+0x40e>
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b5b8:	e6da      	b.n	800b370 <_printf_float+0x1e8>
 800b5ba:	f04f 0800 	mov.w	r8, #0
 800b5be:	f104 0a1a 	add.w	sl, r4, #26
 800b5c2:	e7f2      	b.n	800b5aa <_printf_float+0x422>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4642      	mov	r2, r8
 800b5c8:	e7df      	b.n	800b58a <_printf_float+0x402>
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	464a      	mov	r2, r9
 800b5ce:	4631      	mov	r1, r6
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	47b8      	blx	r7
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	f43f ae36 	beq.w	800b246 <_printf_float+0xbe>
 800b5da:	f108 0801 	add.w	r8, r8, #1
 800b5de:	68e3      	ldr	r3, [r4, #12]
 800b5e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5e2:	1a5b      	subs	r3, r3, r1
 800b5e4:	4543      	cmp	r3, r8
 800b5e6:	dcf0      	bgt.n	800b5ca <_printf_float+0x442>
 800b5e8:	e6f8      	b.n	800b3dc <_printf_float+0x254>
 800b5ea:	f04f 0800 	mov.w	r8, #0
 800b5ee:	f104 0919 	add.w	r9, r4, #25
 800b5f2:	e7f4      	b.n	800b5de <_printf_float+0x456>

0800b5f4 <_printf_common>:
 800b5f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	4699      	mov	r9, r3
 800b5fc:	688a      	ldr	r2, [r1, #8]
 800b5fe:	690b      	ldr	r3, [r1, #16]
 800b600:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b604:	4293      	cmp	r3, r2
 800b606:	bfb8      	it	lt
 800b608:	4613      	movlt	r3, r2
 800b60a:	6033      	str	r3, [r6, #0]
 800b60c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b610:	4607      	mov	r7, r0
 800b612:	460c      	mov	r4, r1
 800b614:	b10a      	cbz	r2, 800b61a <_printf_common+0x26>
 800b616:	3301      	adds	r3, #1
 800b618:	6033      	str	r3, [r6, #0]
 800b61a:	6823      	ldr	r3, [r4, #0]
 800b61c:	0699      	lsls	r1, r3, #26
 800b61e:	bf42      	ittt	mi
 800b620:	6833      	ldrmi	r3, [r6, #0]
 800b622:	3302      	addmi	r3, #2
 800b624:	6033      	strmi	r3, [r6, #0]
 800b626:	6825      	ldr	r5, [r4, #0]
 800b628:	f015 0506 	ands.w	r5, r5, #6
 800b62c:	d106      	bne.n	800b63c <_printf_common+0x48>
 800b62e:	f104 0a19 	add.w	sl, r4, #25
 800b632:	68e3      	ldr	r3, [r4, #12]
 800b634:	6832      	ldr	r2, [r6, #0]
 800b636:	1a9b      	subs	r3, r3, r2
 800b638:	42ab      	cmp	r3, r5
 800b63a:	dc26      	bgt.n	800b68a <_printf_common+0x96>
 800b63c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b640:	1e13      	subs	r3, r2, #0
 800b642:	6822      	ldr	r2, [r4, #0]
 800b644:	bf18      	it	ne
 800b646:	2301      	movne	r3, #1
 800b648:	0692      	lsls	r2, r2, #26
 800b64a:	d42b      	bmi.n	800b6a4 <_printf_common+0xb0>
 800b64c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b650:	4649      	mov	r1, r9
 800b652:	4638      	mov	r0, r7
 800b654:	47c0      	blx	r8
 800b656:	3001      	adds	r0, #1
 800b658:	d01e      	beq.n	800b698 <_printf_common+0xa4>
 800b65a:	6823      	ldr	r3, [r4, #0]
 800b65c:	6922      	ldr	r2, [r4, #16]
 800b65e:	f003 0306 	and.w	r3, r3, #6
 800b662:	2b04      	cmp	r3, #4
 800b664:	bf02      	ittt	eq
 800b666:	68e5      	ldreq	r5, [r4, #12]
 800b668:	6833      	ldreq	r3, [r6, #0]
 800b66a:	1aed      	subeq	r5, r5, r3
 800b66c:	68a3      	ldr	r3, [r4, #8]
 800b66e:	bf0c      	ite	eq
 800b670:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b674:	2500      	movne	r5, #0
 800b676:	4293      	cmp	r3, r2
 800b678:	bfc4      	itt	gt
 800b67a:	1a9b      	subgt	r3, r3, r2
 800b67c:	18ed      	addgt	r5, r5, r3
 800b67e:	2600      	movs	r6, #0
 800b680:	341a      	adds	r4, #26
 800b682:	42b5      	cmp	r5, r6
 800b684:	d11a      	bne.n	800b6bc <_printf_common+0xc8>
 800b686:	2000      	movs	r0, #0
 800b688:	e008      	b.n	800b69c <_printf_common+0xa8>
 800b68a:	2301      	movs	r3, #1
 800b68c:	4652      	mov	r2, sl
 800b68e:	4649      	mov	r1, r9
 800b690:	4638      	mov	r0, r7
 800b692:	47c0      	blx	r8
 800b694:	3001      	adds	r0, #1
 800b696:	d103      	bne.n	800b6a0 <_printf_common+0xac>
 800b698:	f04f 30ff 	mov.w	r0, #4294967295
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	3501      	adds	r5, #1
 800b6a2:	e7c6      	b.n	800b632 <_printf_common+0x3e>
 800b6a4:	18e1      	adds	r1, r4, r3
 800b6a6:	1c5a      	adds	r2, r3, #1
 800b6a8:	2030      	movs	r0, #48	; 0x30
 800b6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b6ae:	4422      	add	r2, r4
 800b6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b6b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b6b8:	3302      	adds	r3, #2
 800b6ba:	e7c7      	b.n	800b64c <_printf_common+0x58>
 800b6bc:	2301      	movs	r3, #1
 800b6be:	4622      	mov	r2, r4
 800b6c0:	4649      	mov	r1, r9
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	47c0      	blx	r8
 800b6c6:	3001      	adds	r0, #1
 800b6c8:	d0e6      	beq.n	800b698 <_printf_common+0xa4>
 800b6ca:	3601      	adds	r6, #1
 800b6cc:	e7d9      	b.n	800b682 <_printf_common+0x8e>
	...

0800b6d0 <_printf_i>:
 800b6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6d4:	7e0f      	ldrb	r7, [r1, #24]
 800b6d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b6d8:	2f78      	cmp	r7, #120	; 0x78
 800b6da:	4691      	mov	r9, r2
 800b6dc:	4680      	mov	r8, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	469a      	mov	sl, r3
 800b6e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b6e6:	d807      	bhi.n	800b6f8 <_printf_i+0x28>
 800b6e8:	2f62      	cmp	r7, #98	; 0x62
 800b6ea:	d80a      	bhi.n	800b702 <_printf_i+0x32>
 800b6ec:	2f00      	cmp	r7, #0
 800b6ee:	f000 80d4 	beq.w	800b89a <_printf_i+0x1ca>
 800b6f2:	2f58      	cmp	r7, #88	; 0x58
 800b6f4:	f000 80c0 	beq.w	800b878 <_printf_i+0x1a8>
 800b6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b700:	e03a      	b.n	800b778 <_printf_i+0xa8>
 800b702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b706:	2b15      	cmp	r3, #21
 800b708:	d8f6      	bhi.n	800b6f8 <_printf_i+0x28>
 800b70a:	a101      	add	r1, pc, #4	; (adr r1, 800b710 <_printf_i+0x40>)
 800b70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b710:	0800b769 	.word	0x0800b769
 800b714:	0800b77d 	.word	0x0800b77d
 800b718:	0800b6f9 	.word	0x0800b6f9
 800b71c:	0800b6f9 	.word	0x0800b6f9
 800b720:	0800b6f9 	.word	0x0800b6f9
 800b724:	0800b6f9 	.word	0x0800b6f9
 800b728:	0800b77d 	.word	0x0800b77d
 800b72c:	0800b6f9 	.word	0x0800b6f9
 800b730:	0800b6f9 	.word	0x0800b6f9
 800b734:	0800b6f9 	.word	0x0800b6f9
 800b738:	0800b6f9 	.word	0x0800b6f9
 800b73c:	0800b881 	.word	0x0800b881
 800b740:	0800b7a9 	.word	0x0800b7a9
 800b744:	0800b83b 	.word	0x0800b83b
 800b748:	0800b6f9 	.word	0x0800b6f9
 800b74c:	0800b6f9 	.word	0x0800b6f9
 800b750:	0800b8a3 	.word	0x0800b8a3
 800b754:	0800b6f9 	.word	0x0800b6f9
 800b758:	0800b7a9 	.word	0x0800b7a9
 800b75c:	0800b6f9 	.word	0x0800b6f9
 800b760:	0800b6f9 	.word	0x0800b6f9
 800b764:	0800b843 	.word	0x0800b843
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	1d1a      	adds	r2, r3, #4
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	602a      	str	r2, [r5, #0]
 800b770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b778:	2301      	movs	r3, #1
 800b77a:	e09f      	b.n	800b8bc <_printf_i+0x1ec>
 800b77c:	6820      	ldr	r0, [r4, #0]
 800b77e:	682b      	ldr	r3, [r5, #0]
 800b780:	0607      	lsls	r7, r0, #24
 800b782:	f103 0104 	add.w	r1, r3, #4
 800b786:	6029      	str	r1, [r5, #0]
 800b788:	d501      	bpl.n	800b78e <_printf_i+0xbe>
 800b78a:	681e      	ldr	r6, [r3, #0]
 800b78c:	e003      	b.n	800b796 <_printf_i+0xc6>
 800b78e:	0646      	lsls	r6, r0, #25
 800b790:	d5fb      	bpl.n	800b78a <_printf_i+0xba>
 800b792:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b796:	2e00      	cmp	r6, #0
 800b798:	da03      	bge.n	800b7a2 <_printf_i+0xd2>
 800b79a:	232d      	movs	r3, #45	; 0x2d
 800b79c:	4276      	negs	r6, r6
 800b79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7a2:	485a      	ldr	r0, [pc, #360]	; (800b90c <_printf_i+0x23c>)
 800b7a4:	230a      	movs	r3, #10
 800b7a6:	e012      	b.n	800b7ce <_printf_i+0xfe>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	6820      	ldr	r0, [r4, #0]
 800b7ac:	1d19      	adds	r1, r3, #4
 800b7ae:	6029      	str	r1, [r5, #0]
 800b7b0:	0605      	lsls	r5, r0, #24
 800b7b2:	d501      	bpl.n	800b7b8 <_printf_i+0xe8>
 800b7b4:	681e      	ldr	r6, [r3, #0]
 800b7b6:	e002      	b.n	800b7be <_printf_i+0xee>
 800b7b8:	0641      	lsls	r1, r0, #25
 800b7ba:	d5fb      	bpl.n	800b7b4 <_printf_i+0xe4>
 800b7bc:	881e      	ldrh	r6, [r3, #0]
 800b7be:	4853      	ldr	r0, [pc, #332]	; (800b90c <_printf_i+0x23c>)
 800b7c0:	2f6f      	cmp	r7, #111	; 0x6f
 800b7c2:	bf0c      	ite	eq
 800b7c4:	2308      	moveq	r3, #8
 800b7c6:	230a      	movne	r3, #10
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b7ce:	6865      	ldr	r5, [r4, #4]
 800b7d0:	60a5      	str	r5, [r4, #8]
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	bfa2      	ittt	ge
 800b7d6:	6821      	ldrge	r1, [r4, #0]
 800b7d8:	f021 0104 	bicge.w	r1, r1, #4
 800b7dc:	6021      	strge	r1, [r4, #0]
 800b7de:	b90e      	cbnz	r6, 800b7e4 <_printf_i+0x114>
 800b7e0:	2d00      	cmp	r5, #0
 800b7e2:	d04b      	beq.n	800b87c <_printf_i+0x1ac>
 800b7e4:	4615      	mov	r5, r2
 800b7e6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b7ea:	fb03 6711 	mls	r7, r3, r1, r6
 800b7ee:	5dc7      	ldrb	r7, [r0, r7]
 800b7f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b7f4:	4637      	mov	r7, r6
 800b7f6:	42bb      	cmp	r3, r7
 800b7f8:	460e      	mov	r6, r1
 800b7fa:	d9f4      	bls.n	800b7e6 <_printf_i+0x116>
 800b7fc:	2b08      	cmp	r3, #8
 800b7fe:	d10b      	bne.n	800b818 <_printf_i+0x148>
 800b800:	6823      	ldr	r3, [r4, #0]
 800b802:	07de      	lsls	r6, r3, #31
 800b804:	d508      	bpl.n	800b818 <_printf_i+0x148>
 800b806:	6923      	ldr	r3, [r4, #16]
 800b808:	6861      	ldr	r1, [r4, #4]
 800b80a:	4299      	cmp	r1, r3
 800b80c:	bfde      	ittt	le
 800b80e:	2330      	movle	r3, #48	; 0x30
 800b810:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b814:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b818:	1b52      	subs	r2, r2, r5
 800b81a:	6122      	str	r2, [r4, #16]
 800b81c:	f8cd a000 	str.w	sl, [sp]
 800b820:	464b      	mov	r3, r9
 800b822:	aa03      	add	r2, sp, #12
 800b824:	4621      	mov	r1, r4
 800b826:	4640      	mov	r0, r8
 800b828:	f7ff fee4 	bl	800b5f4 <_printf_common>
 800b82c:	3001      	adds	r0, #1
 800b82e:	d14a      	bne.n	800b8c6 <_printf_i+0x1f6>
 800b830:	f04f 30ff 	mov.w	r0, #4294967295
 800b834:	b004      	add	sp, #16
 800b836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	f043 0320 	orr.w	r3, r3, #32
 800b840:	6023      	str	r3, [r4, #0]
 800b842:	4833      	ldr	r0, [pc, #204]	; (800b910 <_printf_i+0x240>)
 800b844:	2778      	movs	r7, #120	; 0x78
 800b846:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	6829      	ldr	r1, [r5, #0]
 800b84e:	061f      	lsls	r7, r3, #24
 800b850:	f851 6b04 	ldr.w	r6, [r1], #4
 800b854:	d402      	bmi.n	800b85c <_printf_i+0x18c>
 800b856:	065f      	lsls	r7, r3, #25
 800b858:	bf48      	it	mi
 800b85a:	b2b6      	uxthmi	r6, r6
 800b85c:	07df      	lsls	r7, r3, #31
 800b85e:	bf48      	it	mi
 800b860:	f043 0320 	orrmi.w	r3, r3, #32
 800b864:	6029      	str	r1, [r5, #0]
 800b866:	bf48      	it	mi
 800b868:	6023      	strmi	r3, [r4, #0]
 800b86a:	b91e      	cbnz	r6, 800b874 <_printf_i+0x1a4>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	f023 0320 	bic.w	r3, r3, #32
 800b872:	6023      	str	r3, [r4, #0]
 800b874:	2310      	movs	r3, #16
 800b876:	e7a7      	b.n	800b7c8 <_printf_i+0xf8>
 800b878:	4824      	ldr	r0, [pc, #144]	; (800b90c <_printf_i+0x23c>)
 800b87a:	e7e4      	b.n	800b846 <_printf_i+0x176>
 800b87c:	4615      	mov	r5, r2
 800b87e:	e7bd      	b.n	800b7fc <_printf_i+0x12c>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	6826      	ldr	r6, [r4, #0]
 800b884:	6961      	ldr	r1, [r4, #20]
 800b886:	1d18      	adds	r0, r3, #4
 800b888:	6028      	str	r0, [r5, #0]
 800b88a:	0635      	lsls	r5, r6, #24
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	d501      	bpl.n	800b894 <_printf_i+0x1c4>
 800b890:	6019      	str	r1, [r3, #0]
 800b892:	e002      	b.n	800b89a <_printf_i+0x1ca>
 800b894:	0670      	lsls	r0, r6, #25
 800b896:	d5fb      	bpl.n	800b890 <_printf_i+0x1c0>
 800b898:	8019      	strh	r1, [r3, #0]
 800b89a:	2300      	movs	r3, #0
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	4615      	mov	r5, r2
 800b8a0:	e7bc      	b.n	800b81c <_printf_i+0x14c>
 800b8a2:	682b      	ldr	r3, [r5, #0]
 800b8a4:	1d1a      	adds	r2, r3, #4
 800b8a6:	602a      	str	r2, [r5, #0]
 800b8a8:	681d      	ldr	r5, [r3, #0]
 800b8aa:	6862      	ldr	r2, [r4, #4]
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	4628      	mov	r0, r5
 800b8b0:	f7f4 fc9e 	bl	80001f0 <memchr>
 800b8b4:	b108      	cbz	r0, 800b8ba <_printf_i+0x1ea>
 800b8b6:	1b40      	subs	r0, r0, r5
 800b8b8:	6060      	str	r0, [r4, #4]
 800b8ba:	6863      	ldr	r3, [r4, #4]
 800b8bc:	6123      	str	r3, [r4, #16]
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8c4:	e7aa      	b.n	800b81c <_printf_i+0x14c>
 800b8c6:	6923      	ldr	r3, [r4, #16]
 800b8c8:	462a      	mov	r2, r5
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	47d0      	blx	sl
 800b8d0:	3001      	adds	r0, #1
 800b8d2:	d0ad      	beq.n	800b830 <_printf_i+0x160>
 800b8d4:	6823      	ldr	r3, [r4, #0]
 800b8d6:	079b      	lsls	r3, r3, #30
 800b8d8:	d413      	bmi.n	800b902 <_printf_i+0x232>
 800b8da:	68e0      	ldr	r0, [r4, #12]
 800b8dc:	9b03      	ldr	r3, [sp, #12]
 800b8de:	4298      	cmp	r0, r3
 800b8e0:	bfb8      	it	lt
 800b8e2:	4618      	movlt	r0, r3
 800b8e4:	e7a6      	b.n	800b834 <_printf_i+0x164>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4632      	mov	r2, r6
 800b8ea:	4649      	mov	r1, r9
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	47d0      	blx	sl
 800b8f0:	3001      	adds	r0, #1
 800b8f2:	d09d      	beq.n	800b830 <_printf_i+0x160>
 800b8f4:	3501      	adds	r5, #1
 800b8f6:	68e3      	ldr	r3, [r4, #12]
 800b8f8:	9903      	ldr	r1, [sp, #12]
 800b8fa:	1a5b      	subs	r3, r3, r1
 800b8fc:	42ab      	cmp	r3, r5
 800b8fe:	dcf2      	bgt.n	800b8e6 <_printf_i+0x216>
 800b900:	e7eb      	b.n	800b8da <_printf_i+0x20a>
 800b902:	2500      	movs	r5, #0
 800b904:	f104 0619 	add.w	r6, r4, #25
 800b908:	e7f5      	b.n	800b8f6 <_printf_i+0x226>
 800b90a:	bf00      	nop
 800b90c:	0800d8aa 	.word	0x0800d8aa
 800b910:	0800d8bb 	.word	0x0800d8bb

0800b914 <std>:
 800b914:	2300      	movs	r3, #0
 800b916:	b510      	push	{r4, lr}
 800b918:	4604      	mov	r4, r0
 800b91a:	e9c0 3300 	strd	r3, r3, [r0]
 800b91e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b922:	6083      	str	r3, [r0, #8]
 800b924:	8181      	strh	r1, [r0, #12]
 800b926:	6643      	str	r3, [r0, #100]	; 0x64
 800b928:	81c2      	strh	r2, [r0, #14]
 800b92a:	6183      	str	r3, [r0, #24]
 800b92c:	4619      	mov	r1, r3
 800b92e:	2208      	movs	r2, #8
 800b930:	305c      	adds	r0, #92	; 0x5c
 800b932:	f000 f8e2 	bl	800bafa <memset>
 800b936:	4b05      	ldr	r3, [pc, #20]	; (800b94c <std+0x38>)
 800b938:	6263      	str	r3, [r4, #36]	; 0x24
 800b93a:	4b05      	ldr	r3, [pc, #20]	; (800b950 <std+0x3c>)
 800b93c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b93e:	4b05      	ldr	r3, [pc, #20]	; (800b954 <std+0x40>)
 800b940:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b942:	4b05      	ldr	r3, [pc, #20]	; (800b958 <std+0x44>)
 800b944:	6224      	str	r4, [r4, #32]
 800b946:	6323      	str	r3, [r4, #48]	; 0x30
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	bf00      	nop
 800b94c:	0800ba75 	.word	0x0800ba75
 800b950:	0800ba97 	.word	0x0800ba97
 800b954:	0800bacf 	.word	0x0800bacf
 800b958:	0800baf3 	.word	0x0800baf3

0800b95c <stdio_exit_handler>:
 800b95c:	4a02      	ldr	r2, [pc, #8]	; (800b968 <stdio_exit_handler+0xc>)
 800b95e:	4903      	ldr	r1, [pc, #12]	; (800b96c <stdio_exit_handler+0x10>)
 800b960:	4803      	ldr	r0, [pc, #12]	; (800b970 <stdio_exit_handler+0x14>)
 800b962:	f000 b869 	b.w	800ba38 <_fwalk_sglue>
 800b966:	bf00      	nop
 800b968:	2000003c 	.word	0x2000003c
 800b96c:	0800d1a9 	.word	0x0800d1a9
 800b970:	20000048 	.word	0x20000048

0800b974 <cleanup_stdio>:
 800b974:	6841      	ldr	r1, [r0, #4]
 800b976:	4b0c      	ldr	r3, [pc, #48]	; (800b9a8 <cleanup_stdio+0x34>)
 800b978:	4299      	cmp	r1, r3
 800b97a:	b510      	push	{r4, lr}
 800b97c:	4604      	mov	r4, r0
 800b97e:	d001      	beq.n	800b984 <cleanup_stdio+0x10>
 800b980:	f001 fc12 	bl	800d1a8 <_fflush_r>
 800b984:	68a1      	ldr	r1, [r4, #8]
 800b986:	4b09      	ldr	r3, [pc, #36]	; (800b9ac <cleanup_stdio+0x38>)
 800b988:	4299      	cmp	r1, r3
 800b98a:	d002      	beq.n	800b992 <cleanup_stdio+0x1e>
 800b98c:	4620      	mov	r0, r4
 800b98e:	f001 fc0b 	bl	800d1a8 <_fflush_r>
 800b992:	68e1      	ldr	r1, [r4, #12]
 800b994:	4b06      	ldr	r3, [pc, #24]	; (800b9b0 <cleanup_stdio+0x3c>)
 800b996:	4299      	cmp	r1, r3
 800b998:	d004      	beq.n	800b9a4 <cleanup_stdio+0x30>
 800b99a:	4620      	mov	r0, r4
 800b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9a0:	f001 bc02 	b.w	800d1a8 <_fflush_r>
 800b9a4:	bd10      	pop	{r4, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20000c08 	.word	0x20000c08
 800b9ac:	20000c70 	.word	0x20000c70
 800b9b0:	20000cd8 	.word	0x20000cd8

0800b9b4 <global_stdio_init.part.0>:
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	4b0b      	ldr	r3, [pc, #44]	; (800b9e4 <global_stdio_init.part.0+0x30>)
 800b9b8:	4c0b      	ldr	r4, [pc, #44]	; (800b9e8 <global_stdio_init.part.0+0x34>)
 800b9ba:	4a0c      	ldr	r2, [pc, #48]	; (800b9ec <global_stdio_init.part.0+0x38>)
 800b9bc:	601a      	str	r2, [r3, #0]
 800b9be:	4620      	mov	r0, r4
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2104      	movs	r1, #4
 800b9c4:	f7ff ffa6 	bl	800b914 <std>
 800b9c8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	2109      	movs	r1, #9
 800b9d0:	f7ff ffa0 	bl	800b914 <std>
 800b9d4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b9d8:	2202      	movs	r2, #2
 800b9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9de:	2112      	movs	r1, #18
 800b9e0:	f7ff bf98 	b.w	800b914 <std>
 800b9e4:	20000d40 	.word	0x20000d40
 800b9e8:	20000c08 	.word	0x20000c08
 800b9ec:	0800b95d 	.word	0x0800b95d

0800b9f0 <__sfp_lock_acquire>:
 800b9f0:	4801      	ldr	r0, [pc, #4]	; (800b9f8 <__sfp_lock_acquire+0x8>)
 800b9f2:	f000 b90f 	b.w	800bc14 <__retarget_lock_acquire_recursive>
 800b9f6:	bf00      	nop
 800b9f8:	20000d49 	.word	0x20000d49

0800b9fc <__sfp_lock_release>:
 800b9fc:	4801      	ldr	r0, [pc, #4]	; (800ba04 <__sfp_lock_release+0x8>)
 800b9fe:	f000 b90a 	b.w	800bc16 <__retarget_lock_release_recursive>
 800ba02:	bf00      	nop
 800ba04:	20000d49 	.word	0x20000d49

0800ba08 <__sinit>:
 800ba08:	b510      	push	{r4, lr}
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	f7ff fff0 	bl	800b9f0 <__sfp_lock_acquire>
 800ba10:	6a23      	ldr	r3, [r4, #32]
 800ba12:	b11b      	cbz	r3, 800ba1c <__sinit+0x14>
 800ba14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba18:	f7ff bff0 	b.w	800b9fc <__sfp_lock_release>
 800ba1c:	4b04      	ldr	r3, [pc, #16]	; (800ba30 <__sinit+0x28>)
 800ba1e:	6223      	str	r3, [r4, #32]
 800ba20:	4b04      	ldr	r3, [pc, #16]	; (800ba34 <__sinit+0x2c>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1f5      	bne.n	800ba14 <__sinit+0xc>
 800ba28:	f7ff ffc4 	bl	800b9b4 <global_stdio_init.part.0>
 800ba2c:	e7f2      	b.n	800ba14 <__sinit+0xc>
 800ba2e:	bf00      	nop
 800ba30:	0800b975 	.word	0x0800b975
 800ba34:	20000d40 	.word	0x20000d40

0800ba38 <_fwalk_sglue>:
 800ba38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	4688      	mov	r8, r1
 800ba40:	4614      	mov	r4, r2
 800ba42:	2600      	movs	r6, #0
 800ba44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba48:	f1b9 0901 	subs.w	r9, r9, #1
 800ba4c:	d505      	bpl.n	800ba5a <_fwalk_sglue+0x22>
 800ba4e:	6824      	ldr	r4, [r4, #0]
 800ba50:	2c00      	cmp	r4, #0
 800ba52:	d1f7      	bne.n	800ba44 <_fwalk_sglue+0xc>
 800ba54:	4630      	mov	r0, r6
 800ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba5a:	89ab      	ldrh	r3, [r5, #12]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d907      	bls.n	800ba70 <_fwalk_sglue+0x38>
 800ba60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba64:	3301      	adds	r3, #1
 800ba66:	d003      	beq.n	800ba70 <_fwalk_sglue+0x38>
 800ba68:	4629      	mov	r1, r5
 800ba6a:	4638      	mov	r0, r7
 800ba6c:	47c0      	blx	r8
 800ba6e:	4306      	orrs	r6, r0
 800ba70:	3568      	adds	r5, #104	; 0x68
 800ba72:	e7e9      	b.n	800ba48 <_fwalk_sglue+0x10>

0800ba74 <__sread>:
 800ba74:	b510      	push	{r4, lr}
 800ba76:	460c      	mov	r4, r1
 800ba78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba7c:	f000 f86c 	bl	800bb58 <_read_r>
 800ba80:	2800      	cmp	r0, #0
 800ba82:	bfab      	itete	ge
 800ba84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba86:	89a3      	ldrhlt	r3, [r4, #12]
 800ba88:	181b      	addge	r3, r3, r0
 800ba8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba8e:	bfac      	ite	ge
 800ba90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba92:	81a3      	strhlt	r3, [r4, #12]
 800ba94:	bd10      	pop	{r4, pc}

0800ba96 <__swrite>:
 800ba96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	898b      	ldrh	r3, [r1, #12]
 800ba9e:	05db      	lsls	r3, r3, #23
 800baa0:	4605      	mov	r5, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4616      	mov	r6, r2
 800baa6:	d505      	bpl.n	800bab4 <__swrite+0x1e>
 800baa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baac:	2302      	movs	r3, #2
 800baae:	2200      	movs	r2, #0
 800bab0:	f000 f840 	bl	800bb34 <_lseek_r>
 800bab4:	89a3      	ldrh	r3, [r4, #12]
 800bab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800babe:	81a3      	strh	r3, [r4, #12]
 800bac0:	4632      	mov	r2, r6
 800bac2:	463b      	mov	r3, r7
 800bac4:	4628      	mov	r0, r5
 800bac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baca:	f000 b867 	b.w	800bb9c <_write_r>

0800bace <__sseek>:
 800bace:	b510      	push	{r4, lr}
 800bad0:	460c      	mov	r4, r1
 800bad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bad6:	f000 f82d 	bl	800bb34 <_lseek_r>
 800bada:	1c43      	adds	r3, r0, #1
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	bf15      	itete	ne
 800bae0:	6560      	strne	r0, [r4, #84]	; 0x54
 800bae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baea:	81a3      	strheq	r3, [r4, #12]
 800baec:	bf18      	it	ne
 800baee:	81a3      	strhne	r3, [r4, #12]
 800baf0:	bd10      	pop	{r4, pc}

0800baf2 <__sclose>:
 800baf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baf6:	f000 b80d 	b.w	800bb14 <_close_r>

0800bafa <memset>:
 800bafa:	4402      	add	r2, r0
 800bafc:	4603      	mov	r3, r0
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d100      	bne.n	800bb04 <memset+0xa>
 800bb02:	4770      	bx	lr
 800bb04:	f803 1b01 	strb.w	r1, [r3], #1
 800bb08:	e7f9      	b.n	800bafe <memset+0x4>
	...

0800bb0c <_localeconv_r>:
 800bb0c:	4800      	ldr	r0, [pc, #0]	; (800bb10 <_localeconv_r+0x4>)
 800bb0e:	4770      	bx	lr
 800bb10:	20000188 	.word	0x20000188

0800bb14 <_close_r>:
 800bb14:	b538      	push	{r3, r4, r5, lr}
 800bb16:	4d06      	ldr	r5, [pc, #24]	; (800bb30 <_close_r+0x1c>)
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	4608      	mov	r0, r1
 800bb1e:	602b      	str	r3, [r5, #0]
 800bb20:	f7f5 fc99 	bl	8001456 <_close>
 800bb24:	1c43      	adds	r3, r0, #1
 800bb26:	d102      	bne.n	800bb2e <_close_r+0x1a>
 800bb28:	682b      	ldr	r3, [r5, #0]
 800bb2a:	b103      	cbz	r3, 800bb2e <_close_r+0x1a>
 800bb2c:	6023      	str	r3, [r4, #0]
 800bb2e:	bd38      	pop	{r3, r4, r5, pc}
 800bb30:	20000d44 	.word	0x20000d44

0800bb34 <_lseek_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d07      	ldr	r5, [pc, #28]	; (800bb54 <_lseek_r+0x20>)
 800bb38:	4604      	mov	r4, r0
 800bb3a:	4608      	mov	r0, r1
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	2200      	movs	r2, #0
 800bb40:	602a      	str	r2, [r5, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	f7f5 fcae 	bl	80014a4 <_lseek>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	d102      	bne.n	800bb52 <_lseek_r+0x1e>
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	b103      	cbz	r3, 800bb52 <_lseek_r+0x1e>
 800bb50:	6023      	str	r3, [r4, #0]
 800bb52:	bd38      	pop	{r3, r4, r5, pc}
 800bb54:	20000d44 	.word	0x20000d44

0800bb58 <_read_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4d07      	ldr	r5, [pc, #28]	; (800bb78 <_read_r+0x20>)
 800bb5c:	4604      	mov	r4, r0
 800bb5e:	4608      	mov	r0, r1
 800bb60:	4611      	mov	r1, r2
 800bb62:	2200      	movs	r2, #0
 800bb64:	602a      	str	r2, [r5, #0]
 800bb66:	461a      	mov	r2, r3
 800bb68:	f7f5 fc3c 	bl	80013e4 <_read>
 800bb6c:	1c43      	adds	r3, r0, #1
 800bb6e:	d102      	bne.n	800bb76 <_read_r+0x1e>
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	b103      	cbz	r3, 800bb76 <_read_r+0x1e>
 800bb74:	6023      	str	r3, [r4, #0]
 800bb76:	bd38      	pop	{r3, r4, r5, pc}
 800bb78:	20000d44 	.word	0x20000d44

0800bb7c <_sbrk_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d06      	ldr	r5, [pc, #24]	; (800bb98 <_sbrk_r+0x1c>)
 800bb80:	2300      	movs	r3, #0
 800bb82:	4604      	mov	r4, r0
 800bb84:	4608      	mov	r0, r1
 800bb86:	602b      	str	r3, [r5, #0]
 800bb88:	f7f5 fc9a 	bl	80014c0 <_sbrk>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_sbrk_r+0x1a>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_sbrk_r+0x1a>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	20000d44 	.word	0x20000d44

0800bb9c <_write_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d07      	ldr	r5, [pc, #28]	; (800bbbc <_write_r+0x20>)
 800bba0:	4604      	mov	r4, r0
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	2200      	movs	r2, #0
 800bba8:	602a      	str	r2, [r5, #0]
 800bbaa:	461a      	mov	r2, r3
 800bbac:	f7f5 fc37 	bl	800141e <_write>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_write_r+0x1e>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_write_r+0x1e>
 800bbb8:	6023      	str	r3, [r4, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	20000d44 	.word	0x20000d44

0800bbc0 <__errno>:
 800bbc0:	4b01      	ldr	r3, [pc, #4]	; (800bbc8 <__errno+0x8>)
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	4770      	bx	lr
 800bbc6:	bf00      	nop
 800bbc8:	20000094 	.word	0x20000094

0800bbcc <__libc_init_array>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	4d0d      	ldr	r5, [pc, #52]	; (800bc04 <__libc_init_array+0x38>)
 800bbd0:	4c0d      	ldr	r4, [pc, #52]	; (800bc08 <__libc_init_array+0x3c>)
 800bbd2:	1b64      	subs	r4, r4, r5
 800bbd4:	10a4      	asrs	r4, r4, #2
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	42a6      	cmp	r6, r4
 800bbda:	d109      	bne.n	800bbf0 <__libc_init_array+0x24>
 800bbdc:	4d0b      	ldr	r5, [pc, #44]	; (800bc0c <__libc_init_array+0x40>)
 800bbde:	4c0c      	ldr	r4, [pc, #48]	; (800bc10 <__libc_init_array+0x44>)
 800bbe0:	f001 fe26 	bl	800d830 <_init>
 800bbe4:	1b64      	subs	r4, r4, r5
 800bbe6:	10a4      	asrs	r4, r4, #2
 800bbe8:	2600      	movs	r6, #0
 800bbea:	42a6      	cmp	r6, r4
 800bbec:	d105      	bne.n	800bbfa <__libc_init_array+0x2e>
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf4:	4798      	blx	r3
 800bbf6:	3601      	adds	r6, #1
 800bbf8:	e7ee      	b.n	800bbd8 <__libc_init_array+0xc>
 800bbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbfe:	4798      	blx	r3
 800bc00:	3601      	adds	r6, #1
 800bc02:	e7f2      	b.n	800bbea <__libc_init_array+0x1e>
 800bc04:	0800dc14 	.word	0x0800dc14
 800bc08:	0800dc14 	.word	0x0800dc14
 800bc0c:	0800dc14 	.word	0x0800dc14
 800bc10:	0800dc18 	.word	0x0800dc18

0800bc14 <__retarget_lock_acquire_recursive>:
 800bc14:	4770      	bx	lr

0800bc16 <__retarget_lock_release_recursive>:
 800bc16:	4770      	bx	lr

0800bc18 <quorem>:
 800bc18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	6903      	ldr	r3, [r0, #16]
 800bc1e:	690c      	ldr	r4, [r1, #16]
 800bc20:	42a3      	cmp	r3, r4
 800bc22:	4607      	mov	r7, r0
 800bc24:	db7e      	blt.n	800bd24 <quorem+0x10c>
 800bc26:	3c01      	subs	r4, #1
 800bc28:	f101 0814 	add.w	r8, r1, #20
 800bc2c:	f100 0514 	add.w	r5, r0, #20
 800bc30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc3e:	3301      	adds	r3, #1
 800bc40:	429a      	cmp	r2, r3
 800bc42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc4a:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc4e:	d331      	bcc.n	800bcb4 <quorem+0x9c>
 800bc50:	f04f 0e00 	mov.w	lr, #0
 800bc54:	4640      	mov	r0, r8
 800bc56:	46ac      	mov	ip, r5
 800bc58:	46f2      	mov	sl, lr
 800bc5a:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc5e:	b293      	uxth	r3, r2
 800bc60:	fb06 e303 	mla	r3, r6, r3, lr
 800bc64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc68:	0c1a      	lsrs	r2, r3, #16
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	ebaa 0303 	sub.w	r3, sl, r3
 800bc70:	f8dc a000 	ldr.w	sl, [ip]
 800bc74:	fa13 f38a 	uxtah	r3, r3, sl
 800bc78:	fb06 220e 	mla	r2, r6, lr, r2
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	9b00      	ldr	r3, [sp, #0]
 800bc80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc84:	b292      	uxth	r2, r2
 800bc86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc8e:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc92:	4581      	cmp	r9, r0
 800bc94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc98:	f84c 3b04 	str.w	r3, [ip], #4
 800bc9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bca0:	d2db      	bcs.n	800bc5a <quorem+0x42>
 800bca2:	f855 300b 	ldr.w	r3, [r5, fp]
 800bca6:	b92b      	cbnz	r3, 800bcb4 <quorem+0x9c>
 800bca8:	9b01      	ldr	r3, [sp, #4]
 800bcaa:	3b04      	subs	r3, #4
 800bcac:	429d      	cmp	r5, r3
 800bcae:	461a      	mov	r2, r3
 800bcb0:	d32c      	bcc.n	800bd0c <quorem+0xf4>
 800bcb2:	613c      	str	r4, [r7, #16]
 800bcb4:	4638      	mov	r0, r7
 800bcb6:	f001 f8f1 	bl	800ce9c <__mcmp>
 800bcba:	2800      	cmp	r0, #0
 800bcbc:	db22      	blt.n	800bd04 <quorem+0xec>
 800bcbe:	3601      	adds	r6, #1
 800bcc0:	4629      	mov	r1, r5
 800bcc2:	2000      	movs	r0, #0
 800bcc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcc8:	f8d1 c000 	ldr.w	ip, [r1]
 800bccc:	b293      	uxth	r3, r2
 800bcce:	1ac3      	subs	r3, r0, r3
 800bcd0:	0c12      	lsrs	r2, r2, #16
 800bcd2:	fa13 f38c 	uxtah	r3, r3, ip
 800bcd6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bcda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bce4:	45c1      	cmp	r9, r8
 800bce6:	f841 3b04 	str.w	r3, [r1], #4
 800bcea:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcee:	d2e9      	bcs.n	800bcc4 <quorem+0xac>
 800bcf0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcf8:	b922      	cbnz	r2, 800bd04 <quorem+0xec>
 800bcfa:	3b04      	subs	r3, #4
 800bcfc:	429d      	cmp	r5, r3
 800bcfe:	461a      	mov	r2, r3
 800bd00:	d30a      	bcc.n	800bd18 <quorem+0x100>
 800bd02:	613c      	str	r4, [r7, #16]
 800bd04:	4630      	mov	r0, r6
 800bd06:	b003      	add	sp, #12
 800bd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	3b04      	subs	r3, #4
 800bd10:	2a00      	cmp	r2, #0
 800bd12:	d1ce      	bne.n	800bcb2 <quorem+0x9a>
 800bd14:	3c01      	subs	r4, #1
 800bd16:	e7c9      	b.n	800bcac <quorem+0x94>
 800bd18:	6812      	ldr	r2, [r2, #0]
 800bd1a:	3b04      	subs	r3, #4
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	d1f0      	bne.n	800bd02 <quorem+0xea>
 800bd20:	3c01      	subs	r4, #1
 800bd22:	e7eb      	b.n	800bcfc <quorem+0xe4>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e7ee      	b.n	800bd06 <quorem+0xee>

0800bd28 <_dtoa_r>:
 800bd28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd2c:	ed2d 8b04 	vpush	{d8-d9}
 800bd30:	69c5      	ldr	r5, [r0, #28]
 800bd32:	b093      	sub	sp, #76	; 0x4c
 800bd34:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd38:	ec57 6b10 	vmov	r6, r7, d0
 800bd3c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd40:	9107      	str	r1, [sp, #28]
 800bd42:	4604      	mov	r4, r0
 800bd44:	920a      	str	r2, [sp, #40]	; 0x28
 800bd46:	930d      	str	r3, [sp, #52]	; 0x34
 800bd48:	b975      	cbnz	r5, 800bd68 <_dtoa_r+0x40>
 800bd4a:	2010      	movs	r0, #16
 800bd4c:	f7ff f8c0 	bl	800aed0 <malloc>
 800bd50:	4602      	mov	r2, r0
 800bd52:	61e0      	str	r0, [r4, #28]
 800bd54:	b920      	cbnz	r0, 800bd60 <_dtoa_r+0x38>
 800bd56:	4bae      	ldr	r3, [pc, #696]	; (800c010 <_dtoa_r+0x2e8>)
 800bd58:	21ef      	movs	r1, #239	; 0xef
 800bd5a:	48ae      	ldr	r0, [pc, #696]	; (800c014 <_dtoa_r+0x2ec>)
 800bd5c:	f001 fa5a 	bl	800d214 <__assert_func>
 800bd60:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd64:	6005      	str	r5, [r0, #0]
 800bd66:	60c5      	str	r5, [r0, #12]
 800bd68:	69e3      	ldr	r3, [r4, #28]
 800bd6a:	6819      	ldr	r1, [r3, #0]
 800bd6c:	b151      	cbz	r1, 800bd84 <_dtoa_r+0x5c>
 800bd6e:	685a      	ldr	r2, [r3, #4]
 800bd70:	604a      	str	r2, [r1, #4]
 800bd72:	2301      	movs	r3, #1
 800bd74:	4093      	lsls	r3, r2
 800bd76:	608b      	str	r3, [r1, #8]
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f000 fe53 	bl	800ca24 <_Bfree>
 800bd7e:	69e3      	ldr	r3, [r4, #28]
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]
 800bd84:	1e3b      	subs	r3, r7, #0
 800bd86:	bfbb      	ittet	lt
 800bd88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd8c:	9303      	strlt	r3, [sp, #12]
 800bd8e:	2300      	movge	r3, #0
 800bd90:	2201      	movlt	r2, #1
 800bd92:	bfac      	ite	ge
 800bd94:	f8c8 3000 	strge.w	r3, [r8]
 800bd98:	f8c8 2000 	strlt.w	r2, [r8]
 800bd9c:	4b9e      	ldr	r3, [pc, #632]	; (800c018 <_dtoa_r+0x2f0>)
 800bd9e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800bda2:	ea33 0308 	bics.w	r3, r3, r8
 800bda6:	d11b      	bne.n	800bde0 <_dtoa_r+0xb8>
 800bda8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdaa:	f242 730f 	movw	r3, #9999	; 0x270f
 800bdae:	6013      	str	r3, [r2, #0]
 800bdb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bdb4:	4333      	orrs	r3, r6
 800bdb6:	f000 8593 	beq.w	800c8e0 <_dtoa_r+0xbb8>
 800bdba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdbc:	b963      	cbnz	r3, 800bdd8 <_dtoa_r+0xb0>
 800bdbe:	4b97      	ldr	r3, [pc, #604]	; (800c01c <_dtoa_r+0x2f4>)
 800bdc0:	e027      	b.n	800be12 <_dtoa_r+0xea>
 800bdc2:	4b97      	ldr	r3, [pc, #604]	; (800c020 <_dtoa_r+0x2f8>)
 800bdc4:	9300      	str	r3, [sp, #0]
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	9800      	ldr	r0, [sp, #0]
 800bdce:	b013      	add	sp, #76	; 0x4c
 800bdd0:	ecbd 8b04 	vpop	{d8-d9}
 800bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd8:	4b90      	ldr	r3, [pc, #576]	; (800c01c <_dtoa_r+0x2f4>)
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	3303      	adds	r3, #3
 800bdde:	e7f3      	b.n	800bdc8 <_dtoa_r+0xa0>
 800bde0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bde4:	2200      	movs	r2, #0
 800bde6:	ec51 0b17 	vmov	r0, r1, d7
 800bdea:	eeb0 8a47 	vmov.f32	s16, s14
 800bdee:	eef0 8a67 	vmov.f32	s17, s15
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f7f4 fe78 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdf8:	4681      	mov	r9, r0
 800bdfa:	b160      	cbz	r0, 800be16 <_dtoa_r+0xee>
 800bdfc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdfe:	2301      	movs	r3, #1
 800be00:	6013      	str	r3, [r2, #0]
 800be02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be04:	2b00      	cmp	r3, #0
 800be06:	f000 8568 	beq.w	800c8da <_dtoa_r+0xbb2>
 800be0a:	4b86      	ldr	r3, [pc, #536]	; (800c024 <_dtoa_r+0x2fc>)
 800be0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be0e:	6013      	str	r3, [r2, #0]
 800be10:	3b01      	subs	r3, #1
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	e7da      	b.n	800bdcc <_dtoa_r+0xa4>
 800be16:	aa10      	add	r2, sp, #64	; 0x40
 800be18:	a911      	add	r1, sp, #68	; 0x44
 800be1a:	4620      	mov	r0, r4
 800be1c:	eeb0 0a48 	vmov.f32	s0, s16
 800be20:	eef0 0a68 	vmov.f32	s1, s17
 800be24:	f001 f8e0 	bl	800cfe8 <__d2b>
 800be28:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800be2c:	4682      	mov	sl, r0
 800be2e:	2d00      	cmp	r5, #0
 800be30:	d07f      	beq.n	800bf32 <_dtoa_r+0x20a>
 800be32:	ee18 3a90 	vmov	r3, s17
 800be36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be3a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800be3e:	ec51 0b18 	vmov	r0, r1, d8
 800be42:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800be46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be4a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800be4e:	4619      	mov	r1, r3
 800be50:	2200      	movs	r2, #0
 800be52:	4b75      	ldr	r3, [pc, #468]	; (800c028 <_dtoa_r+0x300>)
 800be54:	f7f4 fa28 	bl	80002a8 <__aeabi_dsub>
 800be58:	a367      	add	r3, pc, #412	; (adr r3, 800bff8 <_dtoa_r+0x2d0>)
 800be5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5e:	f7f4 fbdb 	bl	8000618 <__aeabi_dmul>
 800be62:	a367      	add	r3, pc, #412	; (adr r3, 800c000 <_dtoa_r+0x2d8>)
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f7f4 fa20 	bl	80002ac <__adddf3>
 800be6c:	4606      	mov	r6, r0
 800be6e:	4628      	mov	r0, r5
 800be70:	460f      	mov	r7, r1
 800be72:	f7f4 fb67 	bl	8000544 <__aeabi_i2d>
 800be76:	a364      	add	r3, pc, #400	; (adr r3, 800c008 <_dtoa_r+0x2e0>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	f7f4 fbcc 	bl	8000618 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4630      	mov	r0, r6
 800be86:	4639      	mov	r1, r7
 800be88:	f7f4 fa10 	bl	80002ac <__adddf3>
 800be8c:	4606      	mov	r6, r0
 800be8e:	460f      	mov	r7, r1
 800be90:	f7f4 fe72 	bl	8000b78 <__aeabi_d2iz>
 800be94:	2200      	movs	r2, #0
 800be96:	4683      	mov	fp, r0
 800be98:	2300      	movs	r3, #0
 800be9a:	4630      	mov	r0, r6
 800be9c:	4639      	mov	r1, r7
 800be9e:	f7f4 fe2d 	bl	8000afc <__aeabi_dcmplt>
 800bea2:	b148      	cbz	r0, 800beb8 <_dtoa_r+0x190>
 800bea4:	4658      	mov	r0, fp
 800bea6:	f7f4 fb4d 	bl	8000544 <__aeabi_i2d>
 800beaa:	4632      	mov	r2, r6
 800beac:	463b      	mov	r3, r7
 800beae:	f7f4 fe1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800beb2:	b908      	cbnz	r0, 800beb8 <_dtoa_r+0x190>
 800beb4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800beb8:	f1bb 0f16 	cmp.w	fp, #22
 800bebc:	d857      	bhi.n	800bf6e <_dtoa_r+0x246>
 800bebe:	4b5b      	ldr	r3, [pc, #364]	; (800c02c <_dtoa_r+0x304>)
 800bec0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec8:	ec51 0b18 	vmov	r0, r1, d8
 800becc:	f7f4 fe16 	bl	8000afc <__aeabi_dcmplt>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d04e      	beq.n	800bf72 <_dtoa_r+0x24a>
 800bed4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bed8:	2300      	movs	r3, #0
 800beda:	930c      	str	r3, [sp, #48]	; 0x30
 800bedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bede:	1b5b      	subs	r3, r3, r5
 800bee0:	1e5a      	subs	r2, r3, #1
 800bee2:	bf45      	ittet	mi
 800bee4:	f1c3 0301 	rsbmi	r3, r3, #1
 800bee8:	9305      	strmi	r3, [sp, #20]
 800beea:	2300      	movpl	r3, #0
 800beec:	2300      	movmi	r3, #0
 800beee:	9206      	str	r2, [sp, #24]
 800bef0:	bf54      	ite	pl
 800bef2:	9305      	strpl	r3, [sp, #20]
 800bef4:	9306      	strmi	r3, [sp, #24]
 800bef6:	f1bb 0f00 	cmp.w	fp, #0
 800befa:	db3c      	blt.n	800bf76 <_dtoa_r+0x24e>
 800befc:	9b06      	ldr	r3, [sp, #24]
 800befe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bf02:	445b      	add	r3, fp
 800bf04:	9306      	str	r3, [sp, #24]
 800bf06:	2300      	movs	r3, #0
 800bf08:	9308      	str	r3, [sp, #32]
 800bf0a:	9b07      	ldr	r3, [sp, #28]
 800bf0c:	2b09      	cmp	r3, #9
 800bf0e:	d868      	bhi.n	800bfe2 <_dtoa_r+0x2ba>
 800bf10:	2b05      	cmp	r3, #5
 800bf12:	bfc4      	itt	gt
 800bf14:	3b04      	subgt	r3, #4
 800bf16:	9307      	strgt	r3, [sp, #28]
 800bf18:	9b07      	ldr	r3, [sp, #28]
 800bf1a:	f1a3 0302 	sub.w	r3, r3, #2
 800bf1e:	bfcc      	ite	gt
 800bf20:	2500      	movgt	r5, #0
 800bf22:	2501      	movle	r5, #1
 800bf24:	2b03      	cmp	r3, #3
 800bf26:	f200 8085 	bhi.w	800c034 <_dtoa_r+0x30c>
 800bf2a:	e8df f003 	tbb	[pc, r3]
 800bf2e:	3b2e      	.short	0x3b2e
 800bf30:	5839      	.short	0x5839
 800bf32:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bf36:	441d      	add	r5, r3
 800bf38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bf3c:	2b20      	cmp	r3, #32
 800bf3e:	bfc1      	itttt	gt
 800bf40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bf44:	fa08 f803 	lslgt.w	r8, r8, r3
 800bf48:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bf4c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bf50:	bfd6      	itet	le
 800bf52:	f1c3 0320 	rsble	r3, r3, #32
 800bf56:	ea48 0003 	orrgt.w	r0, r8, r3
 800bf5a:	fa06 f003 	lslle.w	r0, r6, r3
 800bf5e:	f7f4 fae1 	bl	8000524 <__aeabi_ui2d>
 800bf62:	2201      	movs	r2, #1
 800bf64:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bf68:	3d01      	subs	r5, #1
 800bf6a:	920e      	str	r2, [sp, #56]	; 0x38
 800bf6c:	e76f      	b.n	800be4e <_dtoa_r+0x126>
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e7b3      	b.n	800beda <_dtoa_r+0x1b2>
 800bf72:	900c      	str	r0, [sp, #48]	; 0x30
 800bf74:	e7b2      	b.n	800bedc <_dtoa_r+0x1b4>
 800bf76:	9b05      	ldr	r3, [sp, #20]
 800bf78:	eba3 030b 	sub.w	r3, r3, fp
 800bf7c:	9305      	str	r3, [sp, #20]
 800bf7e:	f1cb 0300 	rsb	r3, fp, #0
 800bf82:	9308      	str	r3, [sp, #32]
 800bf84:	2300      	movs	r3, #0
 800bf86:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf88:	e7bf      	b.n	800bf0a <_dtoa_r+0x1e2>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dc52      	bgt.n	800c03a <_dtoa_r+0x312>
 800bf94:	2301      	movs	r3, #1
 800bf96:	9301      	str	r3, [sp, #4]
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	920a      	str	r2, [sp, #40]	; 0x28
 800bf9e:	e00b      	b.n	800bfb8 <_dtoa_r+0x290>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e7f3      	b.n	800bf8c <_dtoa_r+0x264>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfaa:	445b      	add	r3, fp
 800bfac:	9301      	str	r3, [sp, #4]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	bfb8      	it	lt
 800bfb6:	2301      	movlt	r3, #1
 800bfb8:	69e0      	ldr	r0, [r4, #28]
 800bfba:	2100      	movs	r1, #0
 800bfbc:	2204      	movs	r2, #4
 800bfbe:	f102 0614 	add.w	r6, r2, #20
 800bfc2:	429e      	cmp	r6, r3
 800bfc4:	d93d      	bls.n	800c042 <_dtoa_r+0x31a>
 800bfc6:	6041      	str	r1, [r0, #4]
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f000 fceb 	bl	800c9a4 <_Balloc>
 800bfce:	9000      	str	r0, [sp, #0]
 800bfd0:	2800      	cmp	r0, #0
 800bfd2:	d139      	bne.n	800c048 <_dtoa_r+0x320>
 800bfd4:	4b16      	ldr	r3, [pc, #88]	; (800c030 <_dtoa_r+0x308>)
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	f240 11af 	movw	r1, #431	; 0x1af
 800bfdc:	e6bd      	b.n	800bd5a <_dtoa_r+0x32>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	e7e1      	b.n	800bfa6 <_dtoa_r+0x27e>
 800bfe2:	2501      	movs	r5, #1
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9307      	str	r3, [sp, #28]
 800bfe8:	9509      	str	r5, [sp, #36]	; 0x24
 800bfea:	f04f 33ff 	mov.w	r3, #4294967295
 800bfee:	9301      	str	r3, [sp, #4]
 800bff0:	9304      	str	r3, [sp, #16]
 800bff2:	2200      	movs	r2, #0
 800bff4:	2312      	movs	r3, #18
 800bff6:	e7d1      	b.n	800bf9c <_dtoa_r+0x274>
 800bff8:	636f4361 	.word	0x636f4361
 800bffc:	3fd287a7 	.word	0x3fd287a7
 800c000:	8b60c8b3 	.word	0x8b60c8b3
 800c004:	3fc68a28 	.word	0x3fc68a28
 800c008:	509f79fb 	.word	0x509f79fb
 800c00c:	3fd34413 	.word	0x3fd34413
 800c010:	0800d8d9 	.word	0x0800d8d9
 800c014:	0800d8f0 	.word	0x0800d8f0
 800c018:	7ff00000 	.word	0x7ff00000
 800c01c:	0800d8d5 	.word	0x0800d8d5
 800c020:	0800d8cc 	.word	0x0800d8cc
 800c024:	0800d8a9 	.word	0x0800d8a9
 800c028:	3ff80000 	.word	0x3ff80000
 800c02c:	0800d9e0 	.word	0x0800d9e0
 800c030:	0800d948 	.word	0x0800d948
 800c034:	2301      	movs	r3, #1
 800c036:	9309      	str	r3, [sp, #36]	; 0x24
 800c038:	e7d7      	b.n	800bfea <_dtoa_r+0x2c2>
 800c03a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	9304      	str	r3, [sp, #16]
 800c040:	e7ba      	b.n	800bfb8 <_dtoa_r+0x290>
 800c042:	3101      	adds	r1, #1
 800c044:	0052      	lsls	r2, r2, #1
 800c046:	e7ba      	b.n	800bfbe <_dtoa_r+0x296>
 800c048:	69e3      	ldr	r3, [r4, #28]
 800c04a:	9a00      	ldr	r2, [sp, #0]
 800c04c:	601a      	str	r2, [r3, #0]
 800c04e:	9b04      	ldr	r3, [sp, #16]
 800c050:	2b0e      	cmp	r3, #14
 800c052:	f200 80a8 	bhi.w	800c1a6 <_dtoa_r+0x47e>
 800c056:	2d00      	cmp	r5, #0
 800c058:	f000 80a5 	beq.w	800c1a6 <_dtoa_r+0x47e>
 800c05c:	f1bb 0f00 	cmp.w	fp, #0
 800c060:	dd38      	ble.n	800c0d4 <_dtoa_r+0x3ac>
 800c062:	4bc0      	ldr	r3, [pc, #768]	; (800c364 <_dtoa_r+0x63c>)
 800c064:	f00b 020f 	and.w	r2, fp, #15
 800c068:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c06c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c070:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c074:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c078:	d019      	beq.n	800c0ae <_dtoa_r+0x386>
 800c07a:	4bbb      	ldr	r3, [pc, #748]	; (800c368 <_dtoa_r+0x640>)
 800c07c:	ec51 0b18 	vmov	r0, r1, d8
 800c080:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c084:	f7f4 fbf2 	bl	800086c <__aeabi_ddiv>
 800c088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c08c:	f008 080f 	and.w	r8, r8, #15
 800c090:	2503      	movs	r5, #3
 800c092:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c368 <_dtoa_r+0x640>
 800c096:	f1b8 0f00 	cmp.w	r8, #0
 800c09a:	d10a      	bne.n	800c0b2 <_dtoa_r+0x38a>
 800c09c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0a0:	4632      	mov	r2, r6
 800c0a2:	463b      	mov	r3, r7
 800c0a4:	f7f4 fbe2 	bl	800086c <__aeabi_ddiv>
 800c0a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ac:	e02b      	b.n	800c106 <_dtoa_r+0x3de>
 800c0ae:	2502      	movs	r5, #2
 800c0b0:	e7ef      	b.n	800c092 <_dtoa_r+0x36a>
 800c0b2:	f018 0f01 	tst.w	r8, #1
 800c0b6:	d008      	beq.n	800c0ca <_dtoa_r+0x3a2>
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	4639      	mov	r1, r7
 800c0bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c0c0:	f7f4 faaa 	bl	8000618 <__aeabi_dmul>
 800c0c4:	3501      	adds	r5, #1
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	460f      	mov	r7, r1
 800c0ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c0ce:	f109 0908 	add.w	r9, r9, #8
 800c0d2:	e7e0      	b.n	800c096 <_dtoa_r+0x36e>
 800c0d4:	f000 809f 	beq.w	800c216 <_dtoa_r+0x4ee>
 800c0d8:	f1cb 0600 	rsb	r6, fp, #0
 800c0dc:	4ba1      	ldr	r3, [pc, #644]	; (800c364 <_dtoa_r+0x63c>)
 800c0de:	4fa2      	ldr	r7, [pc, #648]	; (800c368 <_dtoa_r+0x640>)
 800c0e0:	f006 020f 	and.w	r2, r6, #15
 800c0e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	ec51 0b18 	vmov	r0, r1, d8
 800c0f0:	f7f4 fa92 	bl	8000618 <__aeabi_dmul>
 800c0f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0f8:	1136      	asrs	r6, r6, #4
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	2502      	movs	r5, #2
 800c0fe:	2e00      	cmp	r6, #0
 800c100:	d17e      	bne.n	800c200 <_dtoa_r+0x4d8>
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1d0      	bne.n	800c0a8 <_dtoa_r+0x380>
 800c106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c108:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 8084 	beq.w	800c21a <_dtoa_r+0x4f2>
 800c112:	4b96      	ldr	r3, [pc, #600]	; (800c36c <_dtoa_r+0x644>)
 800c114:	2200      	movs	r2, #0
 800c116:	4640      	mov	r0, r8
 800c118:	4649      	mov	r1, r9
 800c11a:	f7f4 fcef 	bl	8000afc <__aeabi_dcmplt>
 800c11e:	2800      	cmp	r0, #0
 800c120:	d07b      	beq.n	800c21a <_dtoa_r+0x4f2>
 800c122:	9b04      	ldr	r3, [sp, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d078      	beq.n	800c21a <_dtoa_r+0x4f2>
 800c128:	9b01      	ldr	r3, [sp, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	dd39      	ble.n	800c1a2 <_dtoa_r+0x47a>
 800c12e:	4b90      	ldr	r3, [pc, #576]	; (800c370 <_dtoa_r+0x648>)
 800c130:	2200      	movs	r2, #0
 800c132:	4640      	mov	r0, r8
 800c134:	4649      	mov	r1, r9
 800c136:	f7f4 fa6f 	bl	8000618 <__aeabi_dmul>
 800c13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c13e:	9e01      	ldr	r6, [sp, #4]
 800c140:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c144:	3501      	adds	r5, #1
 800c146:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c14a:	4628      	mov	r0, r5
 800c14c:	f7f4 f9fa 	bl	8000544 <__aeabi_i2d>
 800c150:	4642      	mov	r2, r8
 800c152:	464b      	mov	r3, r9
 800c154:	f7f4 fa60 	bl	8000618 <__aeabi_dmul>
 800c158:	4b86      	ldr	r3, [pc, #536]	; (800c374 <_dtoa_r+0x64c>)
 800c15a:	2200      	movs	r2, #0
 800c15c:	f7f4 f8a6 	bl	80002ac <__adddf3>
 800c160:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c168:	9303      	str	r3, [sp, #12]
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	d158      	bne.n	800c220 <_dtoa_r+0x4f8>
 800c16e:	4b82      	ldr	r3, [pc, #520]	; (800c378 <_dtoa_r+0x650>)
 800c170:	2200      	movs	r2, #0
 800c172:	4640      	mov	r0, r8
 800c174:	4649      	mov	r1, r9
 800c176:	f7f4 f897 	bl	80002a8 <__aeabi_dsub>
 800c17a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c17e:	4680      	mov	r8, r0
 800c180:	4689      	mov	r9, r1
 800c182:	f7f4 fcd9 	bl	8000b38 <__aeabi_dcmpgt>
 800c186:	2800      	cmp	r0, #0
 800c188:	f040 8296 	bne.w	800c6b8 <_dtoa_r+0x990>
 800c18c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c190:	4640      	mov	r0, r8
 800c192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c196:	4649      	mov	r1, r9
 800c198:	f7f4 fcb0 	bl	8000afc <__aeabi_dcmplt>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f040 8289 	bne.w	800c6b4 <_dtoa_r+0x98c>
 800c1a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c1a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f2c0 814e 	blt.w	800c44a <_dtoa_r+0x722>
 800c1ae:	f1bb 0f0e 	cmp.w	fp, #14
 800c1b2:	f300 814a 	bgt.w	800c44a <_dtoa_r+0x722>
 800c1b6:	4b6b      	ldr	r3, [pc, #428]	; (800c364 <_dtoa_r+0x63c>)
 800c1b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f280 80dc 	bge.w	800c380 <_dtoa_r+0x658>
 800c1c8:	9b04      	ldr	r3, [sp, #16]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f300 80d8 	bgt.w	800c380 <_dtoa_r+0x658>
 800c1d0:	f040 826f 	bne.w	800c6b2 <_dtoa_r+0x98a>
 800c1d4:	4b68      	ldr	r3, [pc, #416]	; (800c378 <_dtoa_r+0x650>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	4640      	mov	r0, r8
 800c1da:	4649      	mov	r1, r9
 800c1dc:	f7f4 fa1c 	bl	8000618 <__aeabi_dmul>
 800c1e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1e4:	f7f4 fc9e 	bl	8000b24 <__aeabi_dcmpge>
 800c1e8:	9e04      	ldr	r6, [sp, #16]
 800c1ea:	4637      	mov	r7, r6
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	f040 8245 	bne.w	800c67c <_dtoa_r+0x954>
 800c1f2:	9d00      	ldr	r5, [sp, #0]
 800c1f4:	2331      	movs	r3, #49	; 0x31
 800c1f6:	f805 3b01 	strb.w	r3, [r5], #1
 800c1fa:	f10b 0b01 	add.w	fp, fp, #1
 800c1fe:	e241      	b.n	800c684 <_dtoa_r+0x95c>
 800c200:	07f2      	lsls	r2, r6, #31
 800c202:	d505      	bpl.n	800c210 <_dtoa_r+0x4e8>
 800c204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c208:	f7f4 fa06 	bl	8000618 <__aeabi_dmul>
 800c20c:	3501      	adds	r5, #1
 800c20e:	2301      	movs	r3, #1
 800c210:	1076      	asrs	r6, r6, #1
 800c212:	3708      	adds	r7, #8
 800c214:	e773      	b.n	800c0fe <_dtoa_r+0x3d6>
 800c216:	2502      	movs	r5, #2
 800c218:	e775      	b.n	800c106 <_dtoa_r+0x3de>
 800c21a:	9e04      	ldr	r6, [sp, #16]
 800c21c:	465f      	mov	r7, fp
 800c21e:	e792      	b.n	800c146 <_dtoa_r+0x41e>
 800c220:	9900      	ldr	r1, [sp, #0]
 800c222:	4b50      	ldr	r3, [pc, #320]	; (800c364 <_dtoa_r+0x63c>)
 800c224:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c228:	4431      	add	r1, r6
 800c22a:	9102      	str	r1, [sp, #8]
 800c22c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c22e:	eeb0 9a47 	vmov.f32	s18, s14
 800c232:	eef0 9a67 	vmov.f32	s19, s15
 800c236:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c23a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c23e:	2900      	cmp	r1, #0
 800c240:	d044      	beq.n	800c2cc <_dtoa_r+0x5a4>
 800c242:	494e      	ldr	r1, [pc, #312]	; (800c37c <_dtoa_r+0x654>)
 800c244:	2000      	movs	r0, #0
 800c246:	f7f4 fb11 	bl	800086c <__aeabi_ddiv>
 800c24a:	ec53 2b19 	vmov	r2, r3, d9
 800c24e:	f7f4 f82b 	bl	80002a8 <__aeabi_dsub>
 800c252:	9d00      	ldr	r5, [sp, #0]
 800c254:	ec41 0b19 	vmov	d9, r0, r1
 800c258:	4649      	mov	r1, r9
 800c25a:	4640      	mov	r0, r8
 800c25c:	f7f4 fc8c 	bl	8000b78 <__aeabi_d2iz>
 800c260:	4606      	mov	r6, r0
 800c262:	f7f4 f96f 	bl	8000544 <__aeabi_i2d>
 800c266:	4602      	mov	r2, r0
 800c268:	460b      	mov	r3, r1
 800c26a:	4640      	mov	r0, r8
 800c26c:	4649      	mov	r1, r9
 800c26e:	f7f4 f81b 	bl	80002a8 <__aeabi_dsub>
 800c272:	3630      	adds	r6, #48	; 0x30
 800c274:	f805 6b01 	strb.w	r6, [r5], #1
 800c278:	ec53 2b19 	vmov	r2, r3, d9
 800c27c:	4680      	mov	r8, r0
 800c27e:	4689      	mov	r9, r1
 800c280:	f7f4 fc3c 	bl	8000afc <__aeabi_dcmplt>
 800c284:	2800      	cmp	r0, #0
 800c286:	d164      	bne.n	800c352 <_dtoa_r+0x62a>
 800c288:	4642      	mov	r2, r8
 800c28a:	464b      	mov	r3, r9
 800c28c:	4937      	ldr	r1, [pc, #220]	; (800c36c <_dtoa_r+0x644>)
 800c28e:	2000      	movs	r0, #0
 800c290:	f7f4 f80a 	bl	80002a8 <__aeabi_dsub>
 800c294:	ec53 2b19 	vmov	r2, r3, d9
 800c298:	f7f4 fc30 	bl	8000afc <__aeabi_dcmplt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	f040 80b6 	bne.w	800c40e <_dtoa_r+0x6e6>
 800c2a2:	9b02      	ldr	r3, [sp, #8]
 800c2a4:	429d      	cmp	r5, r3
 800c2a6:	f43f af7c 	beq.w	800c1a2 <_dtoa_r+0x47a>
 800c2aa:	4b31      	ldr	r3, [pc, #196]	; (800c370 <_dtoa_r+0x648>)
 800c2ac:	ec51 0b19 	vmov	r0, r1, d9
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	f7f4 f9b1 	bl	8000618 <__aeabi_dmul>
 800c2b6:	4b2e      	ldr	r3, [pc, #184]	; (800c370 <_dtoa_r+0x648>)
 800c2b8:	ec41 0b19 	vmov	d9, r0, r1
 800c2bc:	2200      	movs	r2, #0
 800c2be:	4640      	mov	r0, r8
 800c2c0:	4649      	mov	r1, r9
 800c2c2:	f7f4 f9a9 	bl	8000618 <__aeabi_dmul>
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	4689      	mov	r9, r1
 800c2ca:	e7c5      	b.n	800c258 <_dtoa_r+0x530>
 800c2cc:	ec51 0b17 	vmov	r0, r1, d7
 800c2d0:	f7f4 f9a2 	bl	8000618 <__aeabi_dmul>
 800c2d4:	9b02      	ldr	r3, [sp, #8]
 800c2d6:	9d00      	ldr	r5, [sp, #0]
 800c2d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2da:	ec41 0b19 	vmov	d9, r0, r1
 800c2de:	4649      	mov	r1, r9
 800c2e0:	4640      	mov	r0, r8
 800c2e2:	f7f4 fc49 	bl	8000b78 <__aeabi_d2iz>
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	f7f4 f92c 	bl	8000544 <__aeabi_i2d>
 800c2ec:	3630      	adds	r6, #48	; 0x30
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f3 ffd7 	bl	80002a8 <__aeabi_dsub>
 800c2fa:	f805 6b01 	strb.w	r6, [r5], #1
 800c2fe:	9b02      	ldr	r3, [sp, #8]
 800c300:	429d      	cmp	r5, r3
 800c302:	4680      	mov	r8, r0
 800c304:	4689      	mov	r9, r1
 800c306:	f04f 0200 	mov.w	r2, #0
 800c30a:	d124      	bne.n	800c356 <_dtoa_r+0x62e>
 800c30c:	4b1b      	ldr	r3, [pc, #108]	; (800c37c <_dtoa_r+0x654>)
 800c30e:	ec51 0b19 	vmov	r0, r1, d9
 800c312:	f7f3 ffcb 	bl	80002ac <__adddf3>
 800c316:	4602      	mov	r2, r0
 800c318:	460b      	mov	r3, r1
 800c31a:	4640      	mov	r0, r8
 800c31c:	4649      	mov	r1, r9
 800c31e:	f7f4 fc0b 	bl	8000b38 <__aeabi_dcmpgt>
 800c322:	2800      	cmp	r0, #0
 800c324:	d173      	bne.n	800c40e <_dtoa_r+0x6e6>
 800c326:	ec53 2b19 	vmov	r2, r3, d9
 800c32a:	4914      	ldr	r1, [pc, #80]	; (800c37c <_dtoa_r+0x654>)
 800c32c:	2000      	movs	r0, #0
 800c32e:	f7f3 ffbb 	bl	80002a8 <__aeabi_dsub>
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	4640      	mov	r0, r8
 800c338:	4649      	mov	r1, r9
 800c33a:	f7f4 fbdf 	bl	8000afc <__aeabi_dcmplt>
 800c33e:	2800      	cmp	r0, #0
 800c340:	f43f af2f 	beq.w	800c1a2 <_dtoa_r+0x47a>
 800c344:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c346:	1e6b      	subs	r3, r5, #1
 800c348:	930f      	str	r3, [sp, #60]	; 0x3c
 800c34a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c34e:	2b30      	cmp	r3, #48	; 0x30
 800c350:	d0f8      	beq.n	800c344 <_dtoa_r+0x61c>
 800c352:	46bb      	mov	fp, r7
 800c354:	e04a      	b.n	800c3ec <_dtoa_r+0x6c4>
 800c356:	4b06      	ldr	r3, [pc, #24]	; (800c370 <_dtoa_r+0x648>)
 800c358:	f7f4 f95e 	bl	8000618 <__aeabi_dmul>
 800c35c:	4680      	mov	r8, r0
 800c35e:	4689      	mov	r9, r1
 800c360:	e7bd      	b.n	800c2de <_dtoa_r+0x5b6>
 800c362:	bf00      	nop
 800c364:	0800d9e0 	.word	0x0800d9e0
 800c368:	0800d9b8 	.word	0x0800d9b8
 800c36c:	3ff00000 	.word	0x3ff00000
 800c370:	40240000 	.word	0x40240000
 800c374:	401c0000 	.word	0x401c0000
 800c378:	40140000 	.word	0x40140000
 800c37c:	3fe00000 	.word	0x3fe00000
 800c380:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c384:	9d00      	ldr	r5, [sp, #0]
 800c386:	4642      	mov	r2, r8
 800c388:	464b      	mov	r3, r9
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f4 fa6d 	bl	800086c <__aeabi_ddiv>
 800c392:	f7f4 fbf1 	bl	8000b78 <__aeabi_d2iz>
 800c396:	9001      	str	r0, [sp, #4]
 800c398:	f7f4 f8d4 	bl	8000544 <__aeabi_i2d>
 800c39c:	4642      	mov	r2, r8
 800c39e:	464b      	mov	r3, r9
 800c3a0:	f7f4 f93a 	bl	8000618 <__aeabi_dmul>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	f7f3 ff7c 	bl	80002a8 <__aeabi_dsub>
 800c3b0:	9e01      	ldr	r6, [sp, #4]
 800c3b2:	9f04      	ldr	r7, [sp, #16]
 800c3b4:	3630      	adds	r6, #48	; 0x30
 800c3b6:	f805 6b01 	strb.w	r6, [r5], #1
 800c3ba:	9e00      	ldr	r6, [sp, #0]
 800c3bc:	1bae      	subs	r6, r5, r6
 800c3be:	42b7      	cmp	r7, r6
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	d134      	bne.n	800c430 <_dtoa_r+0x708>
 800c3c6:	f7f3 ff71 	bl	80002ac <__adddf3>
 800c3ca:	4642      	mov	r2, r8
 800c3cc:	464b      	mov	r3, r9
 800c3ce:	4606      	mov	r6, r0
 800c3d0:	460f      	mov	r7, r1
 800c3d2:	f7f4 fbb1 	bl	8000b38 <__aeabi_dcmpgt>
 800c3d6:	b9c8      	cbnz	r0, 800c40c <_dtoa_r+0x6e4>
 800c3d8:	4642      	mov	r2, r8
 800c3da:	464b      	mov	r3, r9
 800c3dc:	4630      	mov	r0, r6
 800c3de:	4639      	mov	r1, r7
 800c3e0:	f7f4 fb82 	bl	8000ae8 <__aeabi_dcmpeq>
 800c3e4:	b110      	cbz	r0, 800c3ec <_dtoa_r+0x6c4>
 800c3e6:	9b01      	ldr	r3, [sp, #4]
 800c3e8:	07db      	lsls	r3, r3, #31
 800c3ea:	d40f      	bmi.n	800c40c <_dtoa_r+0x6e4>
 800c3ec:	4651      	mov	r1, sl
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 fb18 	bl	800ca24 <_Bfree>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3f8:	702b      	strb	r3, [r5, #0]
 800c3fa:	f10b 0301 	add.w	r3, fp, #1
 800c3fe:	6013      	str	r3, [r2, #0]
 800c400:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c402:	2b00      	cmp	r3, #0
 800c404:	f43f ace2 	beq.w	800bdcc <_dtoa_r+0xa4>
 800c408:	601d      	str	r5, [r3, #0]
 800c40a:	e4df      	b.n	800bdcc <_dtoa_r+0xa4>
 800c40c:	465f      	mov	r7, fp
 800c40e:	462b      	mov	r3, r5
 800c410:	461d      	mov	r5, r3
 800c412:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c416:	2a39      	cmp	r2, #57	; 0x39
 800c418:	d106      	bne.n	800c428 <_dtoa_r+0x700>
 800c41a:	9a00      	ldr	r2, [sp, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d1f7      	bne.n	800c410 <_dtoa_r+0x6e8>
 800c420:	9900      	ldr	r1, [sp, #0]
 800c422:	2230      	movs	r2, #48	; 0x30
 800c424:	3701      	adds	r7, #1
 800c426:	700a      	strb	r2, [r1, #0]
 800c428:	781a      	ldrb	r2, [r3, #0]
 800c42a:	3201      	adds	r2, #1
 800c42c:	701a      	strb	r2, [r3, #0]
 800c42e:	e790      	b.n	800c352 <_dtoa_r+0x62a>
 800c430:	4ba3      	ldr	r3, [pc, #652]	; (800c6c0 <_dtoa_r+0x998>)
 800c432:	2200      	movs	r2, #0
 800c434:	f7f4 f8f0 	bl	8000618 <__aeabi_dmul>
 800c438:	2200      	movs	r2, #0
 800c43a:	2300      	movs	r3, #0
 800c43c:	4606      	mov	r6, r0
 800c43e:	460f      	mov	r7, r1
 800c440:	f7f4 fb52 	bl	8000ae8 <__aeabi_dcmpeq>
 800c444:	2800      	cmp	r0, #0
 800c446:	d09e      	beq.n	800c386 <_dtoa_r+0x65e>
 800c448:	e7d0      	b.n	800c3ec <_dtoa_r+0x6c4>
 800c44a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c44c:	2a00      	cmp	r2, #0
 800c44e:	f000 80ca 	beq.w	800c5e6 <_dtoa_r+0x8be>
 800c452:	9a07      	ldr	r2, [sp, #28]
 800c454:	2a01      	cmp	r2, #1
 800c456:	f300 80ad 	bgt.w	800c5b4 <_dtoa_r+0x88c>
 800c45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c45c:	2a00      	cmp	r2, #0
 800c45e:	f000 80a5 	beq.w	800c5ac <_dtoa_r+0x884>
 800c462:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c466:	9e08      	ldr	r6, [sp, #32]
 800c468:	9d05      	ldr	r5, [sp, #20]
 800c46a:	9a05      	ldr	r2, [sp, #20]
 800c46c:	441a      	add	r2, r3
 800c46e:	9205      	str	r2, [sp, #20]
 800c470:	9a06      	ldr	r2, [sp, #24]
 800c472:	2101      	movs	r1, #1
 800c474:	441a      	add	r2, r3
 800c476:	4620      	mov	r0, r4
 800c478:	9206      	str	r2, [sp, #24]
 800c47a:	f000 fb89 	bl	800cb90 <__i2b>
 800c47e:	4607      	mov	r7, r0
 800c480:	b165      	cbz	r5, 800c49c <_dtoa_r+0x774>
 800c482:	9b06      	ldr	r3, [sp, #24]
 800c484:	2b00      	cmp	r3, #0
 800c486:	dd09      	ble.n	800c49c <_dtoa_r+0x774>
 800c488:	42ab      	cmp	r3, r5
 800c48a:	9a05      	ldr	r2, [sp, #20]
 800c48c:	bfa8      	it	ge
 800c48e:	462b      	movge	r3, r5
 800c490:	1ad2      	subs	r2, r2, r3
 800c492:	9205      	str	r2, [sp, #20]
 800c494:	9a06      	ldr	r2, [sp, #24]
 800c496:	1aed      	subs	r5, r5, r3
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	9306      	str	r3, [sp, #24]
 800c49c:	9b08      	ldr	r3, [sp, #32]
 800c49e:	b1f3      	cbz	r3, 800c4de <_dtoa_r+0x7b6>
 800c4a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f000 80a3 	beq.w	800c5ee <_dtoa_r+0x8c6>
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	dd10      	ble.n	800c4ce <_dtoa_r+0x7a6>
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	4632      	mov	r2, r6
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 fc2d 	bl	800cd10 <__pow5mult>
 800c4b6:	4652      	mov	r2, sl
 800c4b8:	4601      	mov	r1, r0
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	4620      	mov	r0, r4
 800c4be:	f000 fb7d 	bl	800cbbc <__multiply>
 800c4c2:	4651      	mov	r1, sl
 800c4c4:	4680      	mov	r8, r0
 800c4c6:	4620      	mov	r0, r4
 800c4c8:	f000 faac 	bl	800ca24 <_Bfree>
 800c4cc:	46c2      	mov	sl, r8
 800c4ce:	9b08      	ldr	r3, [sp, #32]
 800c4d0:	1b9a      	subs	r2, r3, r6
 800c4d2:	d004      	beq.n	800c4de <_dtoa_r+0x7b6>
 800c4d4:	4651      	mov	r1, sl
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 fc1a 	bl	800cd10 <__pow5mult>
 800c4dc:	4682      	mov	sl, r0
 800c4de:	2101      	movs	r1, #1
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 fb55 	bl	800cb90 <__i2b>
 800c4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	f340 8081 	ble.w	800c5f2 <_dtoa_r+0x8ca>
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fc0b 	bl	800cd10 <__pow5mult>
 800c4fa:	9b07      	ldr	r3, [sp, #28]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	4606      	mov	r6, r0
 800c500:	dd7a      	ble.n	800c5f8 <_dtoa_r+0x8d0>
 800c502:	f04f 0800 	mov.w	r8, #0
 800c506:	6933      	ldr	r3, [r6, #16]
 800c508:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c50c:	6918      	ldr	r0, [r3, #16]
 800c50e:	f000 faf1 	bl	800caf4 <__hi0bits>
 800c512:	f1c0 0020 	rsb	r0, r0, #32
 800c516:	9b06      	ldr	r3, [sp, #24]
 800c518:	4418      	add	r0, r3
 800c51a:	f010 001f 	ands.w	r0, r0, #31
 800c51e:	f000 8094 	beq.w	800c64a <_dtoa_r+0x922>
 800c522:	f1c0 0320 	rsb	r3, r0, #32
 800c526:	2b04      	cmp	r3, #4
 800c528:	f340 8085 	ble.w	800c636 <_dtoa_r+0x90e>
 800c52c:	9b05      	ldr	r3, [sp, #20]
 800c52e:	f1c0 001c 	rsb	r0, r0, #28
 800c532:	4403      	add	r3, r0
 800c534:	9305      	str	r3, [sp, #20]
 800c536:	9b06      	ldr	r3, [sp, #24]
 800c538:	4403      	add	r3, r0
 800c53a:	4405      	add	r5, r0
 800c53c:	9306      	str	r3, [sp, #24]
 800c53e:	9b05      	ldr	r3, [sp, #20]
 800c540:	2b00      	cmp	r3, #0
 800c542:	dd05      	ble.n	800c550 <_dtoa_r+0x828>
 800c544:	4651      	mov	r1, sl
 800c546:	461a      	mov	r2, r3
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 fc3b 	bl	800cdc4 <__lshift>
 800c54e:	4682      	mov	sl, r0
 800c550:	9b06      	ldr	r3, [sp, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	dd05      	ble.n	800c562 <_dtoa_r+0x83a>
 800c556:	4631      	mov	r1, r6
 800c558:	461a      	mov	r2, r3
 800c55a:	4620      	mov	r0, r4
 800c55c:	f000 fc32 	bl	800cdc4 <__lshift>
 800c560:	4606      	mov	r6, r0
 800c562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c564:	2b00      	cmp	r3, #0
 800c566:	d072      	beq.n	800c64e <_dtoa_r+0x926>
 800c568:	4631      	mov	r1, r6
 800c56a:	4650      	mov	r0, sl
 800c56c:	f000 fc96 	bl	800ce9c <__mcmp>
 800c570:	2800      	cmp	r0, #0
 800c572:	da6c      	bge.n	800c64e <_dtoa_r+0x926>
 800c574:	2300      	movs	r3, #0
 800c576:	4651      	mov	r1, sl
 800c578:	220a      	movs	r2, #10
 800c57a:	4620      	mov	r0, r4
 800c57c:	f000 fa74 	bl	800ca68 <__multadd>
 800c580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c582:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c586:	4682      	mov	sl, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	f000 81b0 	beq.w	800c8ee <_dtoa_r+0xbc6>
 800c58e:	2300      	movs	r3, #0
 800c590:	4639      	mov	r1, r7
 800c592:	220a      	movs	r2, #10
 800c594:	4620      	mov	r0, r4
 800c596:	f000 fa67 	bl	800ca68 <__multadd>
 800c59a:	9b01      	ldr	r3, [sp, #4]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	4607      	mov	r7, r0
 800c5a0:	f300 8096 	bgt.w	800c6d0 <_dtoa_r+0x9a8>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	dc59      	bgt.n	800c65e <_dtoa_r+0x936>
 800c5aa:	e091      	b.n	800c6d0 <_dtoa_r+0x9a8>
 800c5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c5b2:	e758      	b.n	800c466 <_dtoa_r+0x73e>
 800c5b4:	9b04      	ldr	r3, [sp, #16]
 800c5b6:	1e5e      	subs	r6, r3, #1
 800c5b8:	9b08      	ldr	r3, [sp, #32]
 800c5ba:	42b3      	cmp	r3, r6
 800c5bc:	bfbf      	itttt	lt
 800c5be:	9b08      	ldrlt	r3, [sp, #32]
 800c5c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c5c2:	9608      	strlt	r6, [sp, #32]
 800c5c4:	1af3      	sublt	r3, r6, r3
 800c5c6:	bfb4      	ite	lt
 800c5c8:	18d2      	addlt	r2, r2, r3
 800c5ca:	1b9e      	subge	r6, r3, r6
 800c5cc:	9b04      	ldr	r3, [sp, #16]
 800c5ce:	bfbc      	itt	lt
 800c5d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c5d2:	2600      	movlt	r6, #0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	bfb7      	itett	lt
 800c5d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c5dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c5e0:	1a9d      	sublt	r5, r3, r2
 800c5e2:	2300      	movlt	r3, #0
 800c5e4:	e741      	b.n	800c46a <_dtoa_r+0x742>
 800c5e6:	9e08      	ldr	r6, [sp, #32]
 800c5e8:	9d05      	ldr	r5, [sp, #20]
 800c5ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c5ec:	e748      	b.n	800c480 <_dtoa_r+0x758>
 800c5ee:	9a08      	ldr	r2, [sp, #32]
 800c5f0:	e770      	b.n	800c4d4 <_dtoa_r+0x7ac>
 800c5f2:	9b07      	ldr	r3, [sp, #28]
 800c5f4:	2b01      	cmp	r3, #1
 800c5f6:	dc19      	bgt.n	800c62c <_dtoa_r+0x904>
 800c5f8:	9b02      	ldr	r3, [sp, #8]
 800c5fa:	b9bb      	cbnz	r3, 800c62c <_dtoa_r+0x904>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c602:	b99b      	cbnz	r3, 800c62c <_dtoa_r+0x904>
 800c604:	9b03      	ldr	r3, [sp, #12]
 800c606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c60a:	0d1b      	lsrs	r3, r3, #20
 800c60c:	051b      	lsls	r3, r3, #20
 800c60e:	b183      	cbz	r3, 800c632 <_dtoa_r+0x90a>
 800c610:	9b05      	ldr	r3, [sp, #20]
 800c612:	3301      	adds	r3, #1
 800c614:	9305      	str	r3, [sp, #20]
 800c616:	9b06      	ldr	r3, [sp, #24]
 800c618:	3301      	adds	r3, #1
 800c61a:	9306      	str	r3, [sp, #24]
 800c61c:	f04f 0801 	mov.w	r8, #1
 800c620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c622:	2b00      	cmp	r3, #0
 800c624:	f47f af6f 	bne.w	800c506 <_dtoa_r+0x7de>
 800c628:	2001      	movs	r0, #1
 800c62a:	e774      	b.n	800c516 <_dtoa_r+0x7ee>
 800c62c:	f04f 0800 	mov.w	r8, #0
 800c630:	e7f6      	b.n	800c620 <_dtoa_r+0x8f8>
 800c632:	4698      	mov	r8, r3
 800c634:	e7f4      	b.n	800c620 <_dtoa_r+0x8f8>
 800c636:	d082      	beq.n	800c53e <_dtoa_r+0x816>
 800c638:	9a05      	ldr	r2, [sp, #20]
 800c63a:	331c      	adds	r3, #28
 800c63c:	441a      	add	r2, r3
 800c63e:	9205      	str	r2, [sp, #20]
 800c640:	9a06      	ldr	r2, [sp, #24]
 800c642:	441a      	add	r2, r3
 800c644:	441d      	add	r5, r3
 800c646:	9206      	str	r2, [sp, #24]
 800c648:	e779      	b.n	800c53e <_dtoa_r+0x816>
 800c64a:	4603      	mov	r3, r0
 800c64c:	e7f4      	b.n	800c638 <_dtoa_r+0x910>
 800c64e:	9b04      	ldr	r3, [sp, #16]
 800c650:	2b00      	cmp	r3, #0
 800c652:	dc37      	bgt.n	800c6c4 <_dtoa_r+0x99c>
 800c654:	9b07      	ldr	r3, [sp, #28]
 800c656:	2b02      	cmp	r3, #2
 800c658:	dd34      	ble.n	800c6c4 <_dtoa_r+0x99c>
 800c65a:	9b04      	ldr	r3, [sp, #16]
 800c65c:	9301      	str	r3, [sp, #4]
 800c65e:	9b01      	ldr	r3, [sp, #4]
 800c660:	b963      	cbnz	r3, 800c67c <_dtoa_r+0x954>
 800c662:	4631      	mov	r1, r6
 800c664:	2205      	movs	r2, #5
 800c666:	4620      	mov	r0, r4
 800c668:	f000 f9fe 	bl	800ca68 <__multadd>
 800c66c:	4601      	mov	r1, r0
 800c66e:	4606      	mov	r6, r0
 800c670:	4650      	mov	r0, sl
 800c672:	f000 fc13 	bl	800ce9c <__mcmp>
 800c676:	2800      	cmp	r0, #0
 800c678:	f73f adbb 	bgt.w	800c1f2 <_dtoa_r+0x4ca>
 800c67c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c67e:	9d00      	ldr	r5, [sp, #0]
 800c680:	ea6f 0b03 	mvn.w	fp, r3
 800c684:	f04f 0800 	mov.w	r8, #0
 800c688:	4631      	mov	r1, r6
 800c68a:	4620      	mov	r0, r4
 800c68c:	f000 f9ca 	bl	800ca24 <_Bfree>
 800c690:	2f00      	cmp	r7, #0
 800c692:	f43f aeab 	beq.w	800c3ec <_dtoa_r+0x6c4>
 800c696:	f1b8 0f00 	cmp.w	r8, #0
 800c69a:	d005      	beq.n	800c6a8 <_dtoa_r+0x980>
 800c69c:	45b8      	cmp	r8, r7
 800c69e:	d003      	beq.n	800c6a8 <_dtoa_r+0x980>
 800c6a0:	4641      	mov	r1, r8
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	f000 f9be 	bl	800ca24 <_Bfree>
 800c6a8:	4639      	mov	r1, r7
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f000 f9ba 	bl	800ca24 <_Bfree>
 800c6b0:	e69c      	b.n	800c3ec <_dtoa_r+0x6c4>
 800c6b2:	2600      	movs	r6, #0
 800c6b4:	4637      	mov	r7, r6
 800c6b6:	e7e1      	b.n	800c67c <_dtoa_r+0x954>
 800c6b8:	46bb      	mov	fp, r7
 800c6ba:	4637      	mov	r7, r6
 800c6bc:	e599      	b.n	800c1f2 <_dtoa_r+0x4ca>
 800c6be:	bf00      	nop
 800c6c0:	40240000 	.word	0x40240000
 800c6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 80c8 	beq.w	800c85c <_dtoa_r+0xb34>
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	9301      	str	r3, [sp, #4]
 800c6d0:	2d00      	cmp	r5, #0
 800c6d2:	dd05      	ble.n	800c6e0 <_dtoa_r+0x9b8>
 800c6d4:	4639      	mov	r1, r7
 800c6d6:	462a      	mov	r2, r5
 800c6d8:	4620      	mov	r0, r4
 800c6da:	f000 fb73 	bl	800cdc4 <__lshift>
 800c6de:	4607      	mov	r7, r0
 800c6e0:	f1b8 0f00 	cmp.w	r8, #0
 800c6e4:	d05b      	beq.n	800c79e <_dtoa_r+0xa76>
 800c6e6:	6879      	ldr	r1, [r7, #4]
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	f000 f95b 	bl	800c9a4 <_Balloc>
 800c6ee:	4605      	mov	r5, r0
 800c6f0:	b928      	cbnz	r0, 800c6fe <_dtoa_r+0x9d6>
 800c6f2:	4b83      	ldr	r3, [pc, #524]	; (800c900 <_dtoa_r+0xbd8>)
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c6fa:	f7ff bb2e 	b.w	800bd5a <_dtoa_r+0x32>
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	3202      	adds	r2, #2
 800c702:	0092      	lsls	r2, r2, #2
 800c704:	f107 010c 	add.w	r1, r7, #12
 800c708:	300c      	adds	r0, #12
 800c70a:	f000 fd75 	bl	800d1f8 <memcpy>
 800c70e:	2201      	movs	r2, #1
 800c710:	4629      	mov	r1, r5
 800c712:	4620      	mov	r0, r4
 800c714:	f000 fb56 	bl	800cdc4 <__lshift>
 800c718:	9b00      	ldr	r3, [sp, #0]
 800c71a:	3301      	adds	r3, #1
 800c71c:	9304      	str	r3, [sp, #16]
 800c71e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c722:	4413      	add	r3, r2
 800c724:	9308      	str	r3, [sp, #32]
 800c726:	9b02      	ldr	r3, [sp, #8]
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	46b8      	mov	r8, r7
 800c72e:	9306      	str	r3, [sp, #24]
 800c730:	4607      	mov	r7, r0
 800c732:	9b04      	ldr	r3, [sp, #16]
 800c734:	4631      	mov	r1, r6
 800c736:	3b01      	subs	r3, #1
 800c738:	4650      	mov	r0, sl
 800c73a:	9301      	str	r3, [sp, #4]
 800c73c:	f7ff fa6c 	bl	800bc18 <quorem>
 800c740:	4641      	mov	r1, r8
 800c742:	9002      	str	r0, [sp, #8]
 800c744:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c748:	4650      	mov	r0, sl
 800c74a:	f000 fba7 	bl	800ce9c <__mcmp>
 800c74e:	463a      	mov	r2, r7
 800c750:	9005      	str	r0, [sp, #20]
 800c752:	4631      	mov	r1, r6
 800c754:	4620      	mov	r0, r4
 800c756:	f000 fbbd 	bl	800ced4 <__mdiff>
 800c75a:	68c2      	ldr	r2, [r0, #12]
 800c75c:	4605      	mov	r5, r0
 800c75e:	bb02      	cbnz	r2, 800c7a2 <_dtoa_r+0xa7a>
 800c760:	4601      	mov	r1, r0
 800c762:	4650      	mov	r0, sl
 800c764:	f000 fb9a 	bl	800ce9c <__mcmp>
 800c768:	4602      	mov	r2, r0
 800c76a:	4629      	mov	r1, r5
 800c76c:	4620      	mov	r0, r4
 800c76e:	9209      	str	r2, [sp, #36]	; 0x24
 800c770:	f000 f958 	bl	800ca24 <_Bfree>
 800c774:	9b07      	ldr	r3, [sp, #28]
 800c776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c778:	9d04      	ldr	r5, [sp, #16]
 800c77a:	ea43 0102 	orr.w	r1, r3, r2
 800c77e:	9b06      	ldr	r3, [sp, #24]
 800c780:	4319      	orrs	r1, r3
 800c782:	d110      	bne.n	800c7a6 <_dtoa_r+0xa7e>
 800c784:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c788:	d029      	beq.n	800c7de <_dtoa_r+0xab6>
 800c78a:	9b05      	ldr	r3, [sp, #20]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	dd02      	ble.n	800c796 <_dtoa_r+0xa6e>
 800c790:	9b02      	ldr	r3, [sp, #8]
 800c792:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c796:	9b01      	ldr	r3, [sp, #4]
 800c798:	f883 9000 	strb.w	r9, [r3]
 800c79c:	e774      	b.n	800c688 <_dtoa_r+0x960>
 800c79e:	4638      	mov	r0, r7
 800c7a0:	e7ba      	b.n	800c718 <_dtoa_r+0x9f0>
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	e7e1      	b.n	800c76a <_dtoa_r+0xa42>
 800c7a6:	9b05      	ldr	r3, [sp, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	db04      	blt.n	800c7b6 <_dtoa_r+0xa8e>
 800c7ac:	9907      	ldr	r1, [sp, #28]
 800c7ae:	430b      	orrs	r3, r1
 800c7b0:	9906      	ldr	r1, [sp, #24]
 800c7b2:	430b      	orrs	r3, r1
 800c7b4:	d120      	bne.n	800c7f8 <_dtoa_r+0xad0>
 800c7b6:	2a00      	cmp	r2, #0
 800c7b8:	dded      	ble.n	800c796 <_dtoa_r+0xa6e>
 800c7ba:	4651      	mov	r1, sl
 800c7bc:	2201      	movs	r2, #1
 800c7be:	4620      	mov	r0, r4
 800c7c0:	f000 fb00 	bl	800cdc4 <__lshift>
 800c7c4:	4631      	mov	r1, r6
 800c7c6:	4682      	mov	sl, r0
 800c7c8:	f000 fb68 	bl	800ce9c <__mcmp>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	dc03      	bgt.n	800c7d8 <_dtoa_r+0xab0>
 800c7d0:	d1e1      	bne.n	800c796 <_dtoa_r+0xa6e>
 800c7d2:	f019 0f01 	tst.w	r9, #1
 800c7d6:	d0de      	beq.n	800c796 <_dtoa_r+0xa6e>
 800c7d8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c7dc:	d1d8      	bne.n	800c790 <_dtoa_r+0xa68>
 800c7de:	9a01      	ldr	r2, [sp, #4]
 800c7e0:	2339      	movs	r3, #57	; 0x39
 800c7e2:	7013      	strb	r3, [r2, #0]
 800c7e4:	462b      	mov	r3, r5
 800c7e6:	461d      	mov	r5, r3
 800c7e8:	3b01      	subs	r3, #1
 800c7ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c7ee:	2a39      	cmp	r2, #57	; 0x39
 800c7f0:	d06c      	beq.n	800c8cc <_dtoa_r+0xba4>
 800c7f2:	3201      	adds	r2, #1
 800c7f4:	701a      	strb	r2, [r3, #0]
 800c7f6:	e747      	b.n	800c688 <_dtoa_r+0x960>
 800c7f8:	2a00      	cmp	r2, #0
 800c7fa:	dd07      	ble.n	800c80c <_dtoa_r+0xae4>
 800c7fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c800:	d0ed      	beq.n	800c7de <_dtoa_r+0xab6>
 800c802:	9a01      	ldr	r2, [sp, #4]
 800c804:	f109 0301 	add.w	r3, r9, #1
 800c808:	7013      	strb	r3, [r2, #0]
 800c80a:	e73d      	b.n	800c688 <_dtoa_r+0x960>
 800c80c:	9b04      	ldr	r3, [sp, #16]
 800c80e:	9a08      	ldr	r2, [sp, #32]
 800c810:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c814:	4293      	cmp	r3, r2
 800c816:	d043      	beq.n	800c8a0 <_dtoa_r+0xb78>
 800c818:	4651      	mov	r1, sl
 800c81a:	2300      	movs	r3, #0
 800c81c:	220a      	movs	r2, #10
 800c81e:	4620      	mov	r0, r4
 800c820:	f000 f922 	bl	800ca68 <__multadd>
 800c824:	45b8      	cmp	r8, r7
 800c826:	4682      	mov	sl, r0
 800c828:	f04f 0300 	mov.w	r3, #0
 800c82c:	f04f 020a 	mov.w	r2, #10
 800c830:	4641      	mov	r1, r8
 800c832:	4620      	mov	r0, r4
 800c834:	d107      	bne.n	800c846 <_dtoa_r+0xb1e>
 800c836:	f000 f917 	bl	800ca68 <__multadd>
 800c83a:	4680      	mov	r8, r0
 800c83c:	4607      	mov	r7, r0
 800c83e:	9b04      	ldr	r3, [sp, #16]
 800c840:	3301      	adds	r3, #1
 800c842:	9304      	str	r3, [sp, #16]
 800c844:	e775      	b.n	800c732 <_dtoa_r+0xa0a>
 800c846:	f000 f90f 	bl	800ca68 <__multadd>
 800c84a:	4639      	mov	r1, r7
 800c84c:	4680      	mov	r8, r0
 800c84e:	2300      	movs	r3, #0
 800c850:	220a      	movs	r2, #10
 800c852:	4620      	mov	r0, r4
 800c854:	f000 f908 	bl	800ca68 <__multadd>
 800c858:	4607      	mov	r7, r0
 800c85a:	e7f0      	b.n	800c83e <_dtoa_r+0xb16>
 800c85c:	9b04      	ldr	r3, [sp, #16]
 800c85e:	9301      	str	r3, [sp, #4]
 800c860:	9d00      	ldr	r5, [sp, #0]
 800c862:	4631      	mov	r1, r6
 800c864:	4650      	mov	r0, sl
 800c866:	f7ff f9d7 	bl	800bc18 <quorem>
 800c86a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c86e:	9b00      	ldr	r3, [sp, #0]
 800c870:	f805 9b01 	strb.w	r9, [r5], #1
 800c874:	1aea      	subs	r2, r5, r3
 800c876:	9b01      	ldr	r3, [sp, #4]
 800c878:	4293      	cmp	r3, r2
 800c87a:	dd07      	ble.n	800c88c <_dtoa_r+0xb64>
 800c87c:	4651      	mov	r1, sl
 800c87e:	2300      	movs	r3, #0
 800c880:	220a      	movs	r2, #10
 800c882:	4620      	mov	r0, r4
 800c884:	f000 f8f0 	bl	800ca68 <__multadd>
 800c888:	4682      	mov	sl, r0
 800c88a:	e7ea      	b.n	800c862 <_dtoa_r+0xb3a>
 800c88c:	9b01      	ldr	r3, [sp, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	bfc8      	it	gt
 800c892:	461d      	movgt	r5, r3
 800c894:	9b00      	ldr	r3, [sp, #0]
 800c896:	bfd8      	it	le
 800c898:	2501      	movle	r5, #1
 800c89a:	441d      	add	r5, r3
 800c89c:	f04f 0800 	mov.w	r8, #0
 800c8a0:	4651      	mov	r1, sl
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	4620      	mov	r0, r4
 800c8a6:	f000 fa8d 	bl	800cdc4 <__lshift>
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4682      	mov	sl, r0
 800c8ae:	f000 faf5 	bl	800ce9c <__mcmp>
 800c8b2:	2800      	cmp	r0, #0
 800c8b4:	dc96      	bgt.n	800c7e4 <_dtoa_r+0xabc>
 800c8b6:	d102      	bne.n	800c8be <_dtoa_r+0xb96>
 800c8b8:	f019 0f01 	tst.w	r9, #1
 800c8bc:	d192      	bne.n	800c7e4 <_dtoa_r+0xabc>
 800c8be:	462b      	mov	r3, r5
 800c8c0:	461d      	mov	r5, r3
 800c8c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8c6:	2a30      	cmp	r2, #48	; 0x30
 800c8c8:	d0fa      	beq.n	800c8c0 <_dtoa_r+0xb98>
 800c8ca:	e6dd      	b.n	800c688 <_dtoa_r+0x960>
 800c8cc:	9a00      	ldr	r2, [sp, #0]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d189      	bne.n	800c7e6 <_dtoa_r+0xabe>
 800c8d2:	f10b 0b01 	add.w	fp, fp, #1
 800c8d6:	2331      	movs	r3, #49	; 0x31
 800c8d8:	e796      	b.n	800c808 <_dtoa_r+0xae0>
 800c8da:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <_dtoa_r+0xbdc>)
 800c8dc:	f7ff ba99 	b.w	800be12 <_dtoa_r+0xea>
 800c8e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	f47f aa6d 	bne.w	800bdc2 <_dtoa_r+0x9a>
 800c8e8:	4b07      	ldr	r3, [pc, #28]	; (800c908 <_dtoa_r+0xbe0>)
 800c8ea:	f7ff ba92 	b.w	800be12 <_dtoa_r+0xea>
 800c8ee:	9b01      	ldr	r3, [sp, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	dcb5      	bgt.n	800c860 <_dtoa_r+0xb38>
 800c8f4:	9b07      	ldr	r3, [sp, #28]
 800c8f6:	2b02      	cmp	r3, #2
 800c8f8:	f73f aeb1 	bgt.w	800c65e <_dtoa_r+0x936>
 800c8fc:	e7b0      	b.n	800c860 <_dtoa_r+0xb38>
 800c8fe:	bf00      	nop
 800c900:	0800d948 	.word	0x0800d948
 800c904:	0800d8a8 	.word	0x0800d8a8
 800c908:	0800d8cc 	.word	0x0800d8cc

0800c90c <_free_r>:
 800c90c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c90e:	2900      	cmp	r1, #0
 800c910:	d044      	beq.n	800c99c <_free_r+0x90>
 800c912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c916:	9001      	str	r0, [sp, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	f1a1 0404 	sub.w	r4, r1, #4
 800c91e:	bfb8      	it	lt
 800c920:	18e4      	addlt	r4, r4, r3
 800c922:	f7fe fb85 	bl	800b030 <__malloc_lock>
 800c926:	4a1e      	ldr	r2, [pc, #120]	; (800c9a0 <_free_r+0x94>)
 800c928:	9801      	ldr	r0, [sp, #4]
 800c92a:	6813      	ldr	r3, [r2, #0]
 800c92c:	b933      	cbnz	r3, 800c93c <_free_r+0x30>
 800c92e:	6063      	str	r3, [r4, #4]
 800c930:	6014      	str	r4, [r2, #0]
 800c932:	b003      	add	sp, #12
 800c934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c938:	f7fe bb80 	b.w	800b03c <__malloc_unlock>
 800c93c:	42a3      	cmp	r3, r4
 800c93e:	d908      	bls.n	800c952 <_free_r+0x46>
 800c940:	6825      	ldr	r5, [r4, #0]
 800c942:	1961      	adds	r1, r4, r5
 800c944:	428b      	cmp	r3, r1
 800c946:	bf01      	itttt	eq
 800c948:	6819      	ldreq	r1, [r3, #0]
 800c94a:	685b      	ldreq	r3, [r3, #4]
 800c94c:	1949      	addeq	r1, r1, r5
 800c94e:	6021      	streq	r1, [r4, #0]
 800c950:	e7ed      	b.n	800c92e <_free_r+0x22>
 800c952:	461a      	mov	r2, r3
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	b10b      	cbz	r3, 800c95c <_free_r+0x50>
 800c958:	42a3      	cmp	r3, r4
 800c95a:	d9fa      	bls.n	800c952 <_free_r+0x46>
 800c95c:	6811      	ldr	r1, [r2, #0]
 800c95e:	1855      	adds	r5, r2, r1
 800c960:	42a5      	cmp	r5, r4
 800c962:	d10b      	bne.n	800c97c <_free_r+0x70>
 800c964:	6824      	ldr	r4, [r4, #0]
 800c966:	4421      	add	r1, r4
 800c968:	1854      	adds	r4, r2, r1
 800c96a:	42a3      	cmp	r3, r4
 800c96c:	6011      	str	r1, [r2, #0]
 800c96e:	d1e0      	bne.n	800c932 <_free_r+0x26>
 800c970:	681c      	ldr	r4, [r3, #0]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	6053      	str	r3, [r2, #4]
 800c976:	440c      	add	r4, r1
 800c978:	6014      	str	r4, [r2, #0]
 800c97a:	e7da      	b.n	800c932 <_free_r+0x26>
 800c97c:	d902      	bls.n	800c984 <_free_r+0x78>
 800c97e:	230c      	movs	r3, #12
 800c980:	6003      	str	r3, [r0, #0]
 800c982:	e7d6      	b.n	800c932 <_free_r+0x26>
 800c984:	6825      	ldr	r5, [r4, #0]
 800c986:	1961      	adds	r1, r4, r5
 800c988:	428b      	cmp	r3, r1
 800c98a:	bf04      	itt	eq
 800c98c:	6819      	ldreq	r1, [r3, #0]
 800c98e:	685b      	ldreq	r3, [r3, #4]
 800c990:	6063      	str	r3, [r4, #4]
 800c992:	bf04      	itt	eq
 800c994:	1949      	addeq	r1, r1, r5
 800c996:	6021      	streq	r1, [r4, #0]
 800c998:	6054      	str	r4, [r2, #4]
 800c99a:	e7ca      	b.n	800c932 <_free_r+0x26>
 800c99c:	b003      	add	sp, #12
 800c99e:	bd30      	pop	{r4, r5, pc}
 800c9a0:	20000c00 	.word	0x20000c00

0800c9a4 <_Balloc>:
 800c9a4:	b570      	push	{r4, r5, r6, lr}
 800c9a6:	69c6      	ldr	r6, [r0, #28]
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	460d      	mov	r5, r1
 800c9ac:	b976      	cbnz	r6, 800c9cc <_Balloc+0x28>
 800c9ae:	2010      	movs	r0, #16
 800c9b0:	f7fe fa8e 	bl	800aed0 <malloc>
 800c9b4:	4602      	mov	r2, r0
 800c9b6:	61e0      	str	r0, [r4, #28]
 800c9b8:	b920      	cbnz	r0, 800c9c4 <_Balloc+0x20>
 800c9ba:	4b18      	ldr	r3, [pc, #96]	; (800ca1c <_Balloc+0x78>)
 800c9bc:	4818      	ldr	r0, [pc, #96]	; (800ca20 <_Balloc+0x7c>)
 800c9be:	216b      	movs	r1, #107	; 0x6b
 800c9c0:	f000 fc28 	bl	800d214 <__assert_func>
 800c9c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9c8:	6006      	str	r6, [r0, #0]
 800c9ca:	60c6      	str	r6, [r0, #12]
 800c9cc:	69e6      	ldr	r6, [r4, #28]
 800c9ce:	68f3      	ldr	r3, [r6, #12]
 800c9d0:	b183      	cbz	r3, 800c9f4 <_Balloc+0x50>
 800c9d2:	69e3      	ldr	r3, [r4, #28]
 800c9d4:	68db      	ldr	r3, [r3, #12]
 800c9d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9da:	b9b8      	cbnz	r0, 800ca0c <_Balloc+0x68>
 800c9dc:	2101      	movs	r1, #1
 800c9de:	fa01 f605 	lsl.w	r6, r1, r5
 800c9e2:	1d72      	adds	r2, r6, #5
 800c9e4:	0092      	lsls	r2, r2, #2
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 fc32 	bl	800d250 <_calloc_r>
 800c9ec:	b160      	cbz	r0, 800ca08 <_Balloc+0x64>
 800c9ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9f2:	e00e      	b.n	800ca12 <_Balloc+0x6e>
 800c9f4:	2221      	movs	r2, #33	; 0x21
 800c9f6:	2104      	movs	r1, #4
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f000 fc29 	bl	800d250 <_calloc_r>
 800c9fe:	69e3      	ldr	r3, [r4, #28]
 800ca00:	60f0      	str	r0, [r6, #12]
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e4      	bne.n	800c9d2 <_Balloc+0x2e>
 800ca08:	2000      	movs	r0, #0
 800ca0a:	bd70      	pop	{r4, r5, r6, pc}
 800ca0c:	6802      	ldr	r2, [r0, #0]
 800ca0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca12:	2300      	movs	r3, #0
 800ca14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca18:	e7f7      	b.n	800ca0a <_Balloc+0x66>
 800ca1a:	bf00      	nop
 800ca1c:	0800d8d9 	.word	0x0800d8d9
 800ca20:	0800d959 	.word	0x0800d959

0800ca24 <_Bfree>:
 800ca24:	b570      	push	{r4, r5, r6, lr}
 800ca26:	69c6      	ldr	r6, [r0, #28]
 800ca28:	4605      	mov	r5, r0
 800ca2a:	460c      	mov	r4, r1
 800ca2c:	b976      	cbnz	r6, 800ca4c <_Bfree+0x28>
 800ca2e:	2010      	movs	r0, #16
 800ca30:	f7fe fa4e 	bl	800aed0 <malloc>
 800ca34:	4602      	mov	r2, r0
 800ca36:	61e8      	str	r0, [r5, #28]
 800ca38:	b920      	cbnz	r0, 800ca44 <_Bfree+0x20>
 800ca3a:	4b09      	ldr	r3, [pc, #36]	; (800ca60 <_Bfree+0x3c>)
 800ca3c:	4809      	ldr	r0, [pc, #36]	; (800ca64 <_Bfree+0x40>)
 800ca3e:	218f      	movs	r1, #143	; 0x8f
 800ca40:	f000 fbe8 	bl	800d214 <__assert_func>
 800ca44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca48:	6006      	str	r6, [r0, #0]
 800ca4a:	60c6      	str	r6, [r0, #12]
 800ca4c:	b13c      	cbz	r4, 800ca5e <_Bfree+0x3a>
 800ca4e:	69eb      	ldr	r3, [r5, #28]
 800ca50:	6862      	ldr	r2, [r4, #4]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca58:	6021      	str	r1, [r4, #0]
 800ca5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca5e:	bd70      	pop	{r4, r5, r6, pc}
 800ca60:	0800d8d9 	.word	0x0800d8d9
 800ca64:	0800d959 	.word	0x0800d959

0800ca68 <__multadd>:
 800ca68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca6c:	690d      	ldr	r5, [r1, #16]
 800ca6e:	4607      	mov	r7, r0
 800ca70:	460c      	mov	r4, r1
 800ca72:	461e      	mov	r6, r3
 800ca74:	f101 0c14 	add.w	ip, r1, #20
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f8dc 3000 	ldr.w	r3, [ip]
 800ca7e:	b299      	uxth	r1, r3
 800ca80:	fb02 6101 	mla	r1, r2, r1, r6
 800ca84:	0c1e      	lsrs	r6, r3, #16
 800ca86:	0c0b      	lsrs	r3, r1, #16
 800ca88:	fb02 3306 	mla	r3, r2, r6, r3
 800ca8c:	b289      	uxth	r1, r1
 800ca8e:	3001      	adds	r0, #1
 800ca90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca94:	4285      	cmp	r5, r0
 800ca96:	f84c 1b04 	str.w	r1, [ip], #4
 800ca9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca9e:	dcec      	bgt.n	800ca7a <__multadd+0x12>
 800caa0:	b30e      	cbz	r6, 800cae6 <__multadd+0x7e>
 800caa2:	68a3      	ldr	r3, [r4, #8]
 800caa4:	42ab      	cmp	r3, r5
 800caa6:	dc19      	bgt.n	800cadc <__multadd+0x74>
 800caa8:	6861      	ldr	r1, [r4, #4]
 800caaa:	4638      	mov	r0, r7
 800caac:	3101      	adds	r1, #1
 800caae:	f7ff ff79 	bl	800c9a4 <_Balloc>
 800cab2:	4680      	mov	r8, r0
 800cab4:	b928      	cbnz	r0, 800cac2 <__multadd+0x5a>
 800cab6:	4602      	mov	r2, r0
 800cab8:	4b0c      	ldr	r3, [pc, #48]	; (800caec <__multadd+0x84>)
 800caba:	480d      	ldr	r0, [pc, #52]	; (800caf0 <__multadd+0x88>)
 800cabc:	21ba      	movs	r1, #186	; 0xba
 800cabe:	f000 fba9 	bl	800d214 <__assert_func>
 800cac2:	6922      	ldr	r2, [r4, #16]
 800cac4:	3202      	adds	r2, #2
 800cac6:	f104 010c 	add.w	r1, r4, #12
 800caca:	0092      	lsls	r2, r2, #2
 800cacc:	300c      	adds	r0, #12
 800cace:	f000 fb93 	bl	800d1f8 <memcpy>
 800cad2:	4621      	mov	r1, r4
 800cad4:	4638      	mov	r0, r7
 800cad6:	f7ff ffa5 	bl	800ca24 <_Bfree>
 800cada:	4644      	mov	r4, r8
 800cadc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cae0:	3501      	adds	r5, #1
 800cae2:	615e      	str	r6, [r3, #20]
 800cae4:	6125      	str	r5, [r4, #16]
 800cae6:	4620      	mov	r0, r4
 800cae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caec:	0800d948 	.word	0x0800d948
 800caf0:	0800d959 	.word	0x0800d959

0800caf4 <__hi0bits>:
 800caf4:	0c03      	lsrs	r3, r0, #16
 800caf6:	041b      	lsls	r3, r3, #16
 800caf8:	b9d3      	cbnz	r3, 800cb30 <__hi0bits+0x3c>
 800cafa:	0400      	lsls	r0, r0, #16
 800cafc:	2310      	movs	r3, #16
 800cafe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb02:	bf04      	itt	eq
 800cb04:	0200      	lsleq	r0, r0, #8
 800cb06:	3308      	addeq	r3, #8
 800cb08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb0c:	bf04      	itt	eq
 800cb0e:	0100      	lsleq	r0, r0, #4
 800cb10:	3304      	addeq	r3, #4
 800cb12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb16:	bf04      	itt	eq
 800cb18:	0080      	lsleq	r0, r0, #2
 800cb1a:	3302      	addeq	r3, #2
 800cb1c:	2800      	cmp	r0, #0
 800cb1e:	db05      	blt.n	800cb2c <__hi0bits+0x38>
 800cb20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb24:	f103 0301 	add.w	r3, r3, #1
 800cb28:	bf08      	it	eq
 800cb2a:	2320      	moveq	r3, #32
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	4770      	bx	lr
 800cb30:	2300      	movs	r3, #0
 800cb32:	e7e4      	b.n	800cafe <__hi0bits+0xa>

0800cb34 <__lo0bits>:
 800cb34:	6803      	ldr	r3, [r0, #0]
 800cb36:	f013 0207 	ands.w	r2, r3, #7
 800cb3a:	d00c      	beq.n	800cb56 <__lo0bits+0x22>
 800cb3c:	07d9      	lsls	r1, r3, #31
 800cb3e:	d422      	bmi.n	800cb86 <__lo0bits+0x52>
 800cb40:	079a      	lsls	r2, r3, #30
 800cb42:	bf49      	itett	mi
 800cb44:	085b      	lsrmi	r3, r3, #1
 800cb46:	089b      	lsrpl	r3, r3, #2
 800cb48:	6003      	strmi	r3, [r0, #0]
 800cb4a:	2201      	movmi	r2, #1
 800cb4c:	bf5c      	itt	pl
 800cb4e:	6003      	strpl	r3, [r0, #0]
 800cb50:	2202      	movpl	r2, #2
 800cb52:	4610      	mov	r0, r2
 800cb54:	4770      	bx	lr
 800cb56:	b299      	uxth	r1, r3
 800cb58:	b909      	cbnz	r1, 800cb5e <__lo0bits+0x2a>
 800cb5a:	0c1b      	lsrs	r3, r3, #16
 800cb5c:	2210      	movs	r2, #16
 800cb5e:	b2d9      	uxtb	r1, r3
 800cb60:	b909      	cbnz	r1, 800cb66 <__lo0bits+0x32>
 800cb62:	3208      	adds	r2, #8
 800cb64:	0a1b      	lsrs	r3, r3, #8
 800cb66:	0719      	lsls	r1, r3, #28
 800cb68:	bf04      	itt	eq
 800cb6a:	091b      	lsreq	r3, r3, #4
 800cb6c:	3204      	addeq	r2, #4
 800cb6e:	0799      	lsls	r1, r3, #30
 800cb70:	bf04      	itt	eq
 800cb72:	089b      	lsreq	r3, r3, #2
 800cb74:	3202      	addeq	r2, #2
 800cb76:	07d9      	lsls	r1, r3, #31
 800cb78:	d403      	bmi.n	800cb82 <__lo0bits+0x4e>
 800cb7a:	085b      	lsrs	r3, r3, #1
 800cb7c:	f102 0201 	add.w	r2, r2, #1
 800cb80:	d003      	beq.n	800cb8a <__lo0bits+0x56>
 800cb82:	6003      	str	r3, [r0, #0]
 800cb84:	e7e5      	b.n	800cb52 <__lo0bits+0x1e>
 800cb86:	2200      	movs	r2, #0
 800cb88:	e7e3      	b.n	800cb52 <__lo0bits+0x1e>
 800cb8a:	2220      	movs	r2, #32
 800cb8c:	e7e1      	b.n	800cb52 <__lo0bits+0x1e>
	...

0800cb90 <__i2b>:
 800cb90:	b510      	push	{r4, lr}
 800cb92:	460c      	mov	r4, r1
 800cb94:	2101      	movs	r1, #1
 800cb96:	f7ff ff05 	bl	800c9a4 <_Balloc>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	b928      	cbnz	r0, 800cbaa <__i2b+0x1a>
 800cb9e:	4b05      	ldr	r3, [pc, #20]	; (800cbb4 <__i2b+0x24>)
 800cba0:	4805      	ldr	r0, [pc, #20]	; (800cbb8 <__i2b+0x28>)
 800cba2:	f240 1145 	movw	r1, #325	; 0x145
 800cba6:	f000 fb35 	bl	800d214 <__assert_func>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	6144      	str	r4, [r0, #20]
 800cbae:	6103      	str	r3, [r0, #16]
 800cbb0:	bd10      	pop	{r4, pc}
 800cbb2:	bf00      	nop
 800cbb4:	0800d948 	.word	0x0800d948
 800cbb8:	0800d959 	.word	0x0800d959

0800cbbc <__multiply>:
 800cbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbc0:	4691      	mov	r9, r2
 800cbc2:	690a      	ldr	r2, [r1, #16]
 800cbc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	bfb8      	it	lt
 800cbcc:	460b      	movlt	r3, r1
 800cbce:	460c      	mov	r4, r1
 800cbd0:	bfbc      	itt	lt
 800cbd2:	464c      	movlt	r4, r9
 800cbd4:	4699      	movlt	r9, r3
 800cbd6:	6927      	ldr	r7, [r4, #16]
 800cbd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cbdc:	68a3      	ldr	r3, [r4, #8]
 800cbde:	6861      	ldr	r1, [r4, #4]
 800cbe0:	eb07 060a 	add.w	r6, r7, sl
 800cbe4:	42b3      	cmp	r3, r6
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	bfb8      	it	lt
 800cbea:	3101      	addlt	r1, #1
 800cbec:	f7ff feda 	bl	800c9a4 <_Balloc>
 800cbf0:	b930      	cbnz	r0, 800cc00 <__multiply+0x44>
 800cbf2:	4602      	mov	r2, r0
 800cbf4:	4b44      	ldr	r3, [pc, #272]	; (800cd08 <__multiply+0x14c>)
 800cbf6:	4845      	ldr	r0, [pc, #276]	; (800cd0c <__multiply+0x150>)
 800cbf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cbfc:	f000 fb0a 	bl	800d214 <__assert_func>
 800cc00:	f100 0514 	add.w	r5, r0, #20
 800cc04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc08:	462b      	mov	r3, r5
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4543      	cmp	r3, r8
 800cc0e:	d321      	bcc.n	800cc54 <__multiply+0x98>
 800cc10:	f104 0314 	add.w	r3, r4, #20
 800cc14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc18:	f109 0314 	add.w	r3, r9, #20
 800cc1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc20:	9202      	str	r2, [sp, #8]
 800cc22:	1b3a      	subs	r2, r7, r4
 800cc24:	3a15      	subs	r2, #21
 800cc26:	f022 0203 	bic.w	r2, r2, #3
 800cc2a:	3204      	adds	r2, #4
 800cc2c:	f104 0115 	add.w	r1, r4, #21
 800cc30:	428f      	cmp	r7, r1
 800cc32:	bf38      	it	cc
 800cc34:	2204      	movcc	r2, #4
 800cc36:	9201      	str	r2, [sp, #4]
 800cc38:	9a02      	ldr	r2, [sp, #8]
 800cc3a:	9303      	str	r3, [sp, #12]
 800cc3c:	429a      	cmp	r2, r3
 800cc3e:	d80c      	bhi.n	800cc5a <__multiply+0x9e>
 800cc40:	2e00      	cmp	r6, #0
 800cc42:	dd03      	ble.n	800cc4c <__multiply+0x90>
 800cc44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d05b      	beq.n	800cd04 <__multiply+0x148>
 800cc4c:	6106      	str	r6, [r0, #16]
 800cc4e:	b005      	add	sp, #20
 800cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc54:	f843 2b04 	str.w	r2, [r3], #4
 800cc58:	e7d8      	b.n	800cc0c <__multiply+0x50>
 800cc5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cc5e:	f1ba 0f00 	cmp.w	sl, #0
 800cc62:	d024      	beq.n	800ccae <__multiply+0xf2>
 800cc64:	f104 0e14 	add.w	lr, r4, #20
 800cc68:	46a9      	mov	r9, r5
 800cc6a:	f04f 0c00 	mov.w	ip, #0
 800cc6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cc72:	f8d9 1000 	ldr.w	r1, [r9]
 800cc76:	fa1f fb82 	uxth.w	fp, r2
 800cc7a:	b289      	uxth	r1, r1
 800cc7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cc80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cc84:	f8d9 2000 	ldr.w	r2, [r9]
 800cc88:	4461      	add	r1, ip
 800cc8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cc92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc96:	b289      	uxth	r1, r1
 800cc98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc9c:	4577      	cmp	r7, lr
 800cc9e:	f849 1b04 	str.w	r1, [r9], #4
 800cca2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cca6:	d8e2      	bhi.n	800cc6e <__multiply+0xb2>
 800cca8:	9a01      	ldr	r2, [sp, #4]
 800ccaa:	f845 c002 	str.w	ip, [r5, r2]
 800ccae:	9a03      	ldr	r2, [sp, #12]
 800ccb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	f1b9 0f00 	cmp.w	r9, #0
 800ccba:	d021      	beq.n	800cd00 <__multiply+0x144>
 800ccbc:	6829      	ldr	r1, [r5, #0]
 800ccbe:	f104 0c14 	add.w	ip, r4, #20
 800ccc2:	46ae      	mov	lr, r5
 800ccc4:	f04f 0a00 	mov.w	sl, #0
 800ccc8:	f8bc b000 	ldrh.w	fp, [ip]
 800cccc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ccd0:	fb09 220b 	mla	r2, r9, fp, r2
 800ccd4:	4452      	add	r2, sl
 800ccd6:	b289      	uxth	r1, r1
 800ccd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ccdc:	f84e 1b04 	str.w	r1, [lr], #4
 800cce0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cce4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cce8:	f8be 1000 	ldrh.w	r1, [lr]
 800ccec:	fb09 110a 	mla	r1, r9, sl, r1
 800ccf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ccf4:	4567      	cmp	r7, ip
 800ccf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ccfa:	d8e5      	bhi.n	800ccc8 <__multiply+0x10c>
 800ccfc:	9a01      	ldr	r2, [sp, #4]
 800ccfe:	50a9      	str	r1, [r5, r2]
 800cd00:	3504      	adds	r5, #4
 800cd02:	e799      	b.n	800cc38 <__multiply+0x7c>
 800cd04:	3e01      	subs	r6, #1
 800cd06:	e79b      	b.n	800cc40 <__multiply+0x84>
 800cd08:	0800d948 	.word	0x0800d948
 800cd0c:	0800d959 	.word	0x0800d959

0800cd10 <__pow5mult>:
 800cd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd14:	4615      	mov	r5, r2
 800cd16:	f012 0203 	ands.w	r2, r2, #3
 800cd1a:	4606      	mov	r6, r0
 800cd1c:	460f      	mov	r7, r1
 800cd1e:	d007      	beq.n	800cd30 <__pow5mult+0x20>
 800cd20:	4c25      	ldr	r4, [pc, #148]	; (800cdb8 <__pow5mult+0xa8>)
 800cd22:	3a01      	subs	r2, #1
 800cd24:	2300      	movs	r3, #0
 800cd26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd2a:	f7ff fe9d 	bl	800ca68 <__multadd>
 800cd2e:	4607      	mov	r7, r0
 800cd30:	10ad      	asrs	r5, r5, #2
 800cd32:	d03d      	beq.n	800cdb0 <__pow5mult+0xa0>
 800cd34:	69f4      	ldr	r4, [r6, #28]
 800cd36:	b97c      	cbnz	r4, 800cd58 <__pow5mult+0x48>
 800cd38:	2010      	movs	r0, #16
 800cd3a:	f7fe f8c9 	bl	800aed0 <malloc>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	61f0      	str	r0, [r6, #28]
 800cd42:	b928      	cbnz	r0, 800cd50 <__pow5mult+0x40>
 800cd44:	4b1d      	ldr	r3, [pc, #116]	; (800cdbc <__pow5mult+0xac>)
 800cd46:	481e      	ldr	r0, [pc, #120]	; (800cdc0 <__pow5mult+0xb0>)
 800cd48:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cd4c:	f000 fa62 	bl	800d214 <__assert_func>
 800cd50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd54:	6004      	str	r4, [r0, #0]
 800cd56:	60c4      	str	r4, [r0, #12]
 800cd58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cd5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd60:	b94c      	cbnz	r4, 800cd76 <__pow5mult+0x66>
 800cd62:	f240 2171 	movw	r1, #625	; 0x271
 800cd66:	4630      	mov	r0, r6
 800cd68:	f7ff ff12 	bl	800cb90 <__i2b>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd72:	4604      	mov	r4, r0
 800cd74:	6003      	str	r3, [r0, #0]
 800cd76:	f04f 0900 	mov.w	r9, #0
 800cd7a:	07eb      	lsls	r3, r5, #31
 800cd7c:	d50a      	bpl.n	800cd94 <__pow5mult+0x84>
 800cd7e:	4639      	mov	r1, r7
 800cd80:	4622      	mov	r2, r4
 800cd82:	4630      	mov	r0, r6
 800cd84:	f7ff ff1a 	bl	800cbbc <__multiply>
 800cd88:	4639      	mov	r1, r7
 800cd8a:	4680      	mov	r8, r0
 800cd8c:	4630      	mov	r0, r6
 800cd8e:	f7ff fe49 	bl	800ca24 <_Bfree>
 800cd92:	4647      	mov	r7, r8
 800cd94:	106d      	asrs	r5, r5, #1
 800cd96:	d00b      	beq.n	800cdb0 <__pow5mult+0xa0>
 800cd98:	6820      	ldr	r0, [r4, #0]
 800cd9a:	b938      	cbnz	r0, 800cdac <__pow5mult+0x9c>
 800cd9c:	4622      	mov	r2, r4
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4630      	mov	r0, r6
 800cda2:	f7ff ff0b 	bl	800cbbc <__multiply>
 800cda6:	6020      	str	r0, [r4, #0]
 800cda8:	f8c0 9000 	str.w	r9, [r0]
 800cdac:	4604      	mov	r4, r0
 800cdae:	e7e4      	b.n	800cd7a <__pow5mult+0x6a>
 800cdb0:	4638      	mov	r0, r7
 800cdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdb6:	bf00      	nop
 800cdb8:	0800daa8 	.word	0x0800daa8
 800cdbc:	0800d8d9 	.word	0x0800d8d9
 800cdc0:	0800d959 	.word	0x0800d959

0800cdc4 <__lshift>:
 800cdc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdc8:	460c      	mov	r4, r1
 800cdca:	6849      	ldr	r1, [r1, #4]
 800cdcc:	6923      	ldr	r3, [r4, #16]
 800cdce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cdd2:	68a3      	ldr	r3, [r4, #8]
 800cdd4:	4607      	mov	r7, r0
 800cdd6:	4691      	mov	r9, r2
 800cdd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cddc:	f108 0601 	add.w	r6, r8, #1
 800cde0:	42b3      	cmp	r3, r6
 800cde2:	db0b      	blt.n	800cdfc <__lshift+0x38>
 800cde4:	4638      	mov	r0, r7
 800cde6:	f7ff fddd 	bl	800c9a4 <_Balloc>
 800cdea:	4605      	mov	r5, r0
 800cdec:	b948      	cbnz	r0, 800ce02 <__lshift+0x3e>
 800cdee:	4602      	mov	r2, r0
 800cdf0:	4b28      	ldr	r3, [pc, #160]	; (800ce94 <__lshift+0xd0>)
 800cdf2:	4829      	ldr	r0, [pc, #164]	; (800ce98 <__lshift+0xd4>)
 800cdf4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cdf8:	f000 fa0c 	bl	800d214 <__assert_func>
 800cdfc:	3101      	adds	r1, #1
 800cdfe:	005b      	lsls	r3, r3, #1
 800ce00:	e7ee      	b.n	800cde0 <__lshift+0x1c>
 800ce02:	2300      	movs	r3, #0
 800ce04:	f100 0114 	add.w	r1, r0, #20
 800ce08:	f100 0210 	add.w	r2, r0, #16
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	4553      	cmp	r3, sl
 800ce10:	db33      	blt.n	800ce7a <__lshift+0xb6>
 800ce12:	6920      	ldr	r0, [r4, #16]
 800ce14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce18:	f104 0314 	add.w	r3, r4, #20
 800ce1c:	f019 091f 	ands.w	r9, r9, #31
 800ce20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce28:	d02b      	beq.n	800ce82 <__lshift+0xbe>
 800ce2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ce2e:	468a      	mov	sl, r1
 800ce30:	2200      	movs	r2, #0
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	fa00 f009 	lsl.w	r0, r0, r9
 800ce38:	4310      	orrs	r0, r2
 800ce3a:	f84a 0b04 	str.w	r0, [sl], #4
 800ce3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce42:	459c      	cmp	ip, r3
 800ce44:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce48:	d8f3      	bhi.n	800ce32 <__lshift+0x6e>
 800ce4a:	ebac 0304 	sub.w	r3, ip, r4
 800ce4e:	3b15      	subs	r3, #21
 800ce50:	f023 0303 	bic.w	r3, r3, #3
 800ce54:	3304      	adds	r3, #4
 800ce56:	f104 0015 	add.w	r0, r4, #21
 800ce5a:	4584      	cmp	ip, r0
 800ce5c:	bf38      	it	cc
 800ce5e:	2304      	movcc	r3, #4
 800ce60:	50ca      	str	r2, [r1, r3]
 800ce62:	b10a      	cbz	r2, 800ce68 <__lshift+0xa4>
 800ce64:	f108 0602 	add.w	r6, r8, #2
 800ce68:	3e01      	subs	r6, #1
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	612e      	str	r6, [r5, #16]
 800ce6e:	4621      	mov	r1, r4
 800ce70:	f7ff fdd8 	bl	800ca24 <_Bfree>
 800ce74:	4628      	mov	r0, r5
 800ce76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce7e:	3301      	adds	r3, #1
 800ce80:	e7c5      	b.n	800ce0e <__lshift+0x4a>
 800ce82:	3904      	subs	r1, #4
 800ce84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce88:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce8c:	459c      	cmp	ip, r3
 800ce8e:	d8f9      	bhi.n	800ce84 <__lshift+0xc0>
 800ce90:	e7ea      	b.n	800ce68 <__lshift+0xa4>
 800ce92:	bf00      	nop
 800ce94:	0800d948 	.word	0x0800d948
 800ce98:	0800d959 	.word	0x0800d959

0800ce9c <__mcmp>:
 800ce9c:	b530      	push	{r4, r5, lr}
 800ce9e:	6902      	ldr	r2, [r0, #16]
 800cea0:	690c      	ldr	r4, [r1, #16]
 800cea2:	1b12      	subs	r2, r2, r4
 800cea4:	d10e      	bne.n	800cec4 <__mcmp+0x28>
 800cea6:	f100 0314 	add.w	r3, r0, #20
 800ceaa:	3114      	adds	r1, #20
 800ceac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ceb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ceb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ceb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cebc:	42a5      	cmp	r5, r4
 800cebe:	d003      	beq.n	800cec8 <__mcmp+0x2c>
 800cec0:	d305      	bcc.n	800cece <__mcmp+0x32>
 800cec2:	2201      	movs	r2, #1
 800cec4:	4610      	mov	r0, r2
 800cec6:	bd30      	pop	{r4, r5, pc}
 800cec8:	4283      	cmp	r3, r0
 800ceca:	d3f3      	bcc.n	800ceb4 <__mcmp+0x18>
 800cecc:	e7fa      	b.n	800cec4 <__mcmp+0x28>
 800cece:	f04f 32ff 	mov.w	r2, #4294967295
 800ced2:	e7f7      	b.n	800cec4 <__mcmp+0x28>

0800ced4 <__mdiff>:
 800ced4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ced8:	460c      	mov	r4, r1
 800ceda:	4606      	mov	r6, r0
 800cedc:	4611      	mov	r1, r2
 800cede:	4620      	mov	r0, r4
 800cee0:	4690      	mov	r8, r2
 800cee2:	f7ff ffdb 	bl	800ce9c <__mcmp>
 800cee6:	1e05      	subs	r5, r0, #0
 800cee8:	d110      	bne.n	800cf0c <__mdiff+0x38>
 800ceea:	4629      	mov	r1, r5
 800ceec:	4630      	mov	r0, r6
 800ceee:	f7ff fd59 	bl	800c9a4 <_Balloc>
 800cef2:	b930      	cbnz	r0, 800cf02 <__mdiff+0x2e>
 800cef4:	4b3a      	ldr	r3, [pc, #232]	; (800cfe0 <__mdiff+0x10c>)
 800cef6:	4602      	mov	r2, r0
 800cef8:	f240 2137 	movw	r1, #567	; 0x237
 800cefc:	4839      	ldr	r0, [pc, #228]	; (800cfe4 <__mdiff+0x110>)
 800cefe:	f000 f989 	bl	800d214 <__assert_func>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf0c:	bfa4      	itt	ge
 800cf0e:	4643      	movge	r3, r8
 800cf10:	46a0      	movge	r8, r4
 800cf12:	4630      	mov	r0, r6
 800cf14:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf18:	bfa6      	itte	ge
 800cf1a:	461c      	movge	r4, r3
 800cf1c:	2500      	movge	r5, #0
 800cf1e:	2501      	movlt	r5, #1
 800cf20:	f7ff fd40 	bl	800c9a4 <_Balloc>
 800cf24:	b920      	cbnz	r0, 800cf30 <__mdiff+0x5c>
 800cf26:	4b2e      	ldr	r3, [pc, #184]	; (800cfe0 <__mdiff+0x10c>)
 800cf28:	4602      	mov	r2, r0
 800cf2a:	f240 2145 	movw	r1, #581	; 0x245
 800cf2e:	e7e5      	b.n	800cefc <__mdiff+0x28>
 800cf30:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf34:	6926      	ldr	r6, [r4, #16]
 800cf36:	60c5      	str	r5, [r0, #12]
 800cf38:	f104 0914 	add.w	r9, r4, #20
 800cf3c:	f108 0514 	add.w	r5, r8, #20
 800cf40:	f100 0e14 	add.w	lr, r0, #20
 800cf44:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf48:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf4c:	f108 0210 	add.w	r2, r8, #16
 800cf50:	46f2      	mov	sl, lr
 800cf52:	2100      	movs	r1, #0
 800cf54:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf58:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cf5c:	fa11 f88b 	uxtah	r8, r1, fp
 800cf60:	b299      	uxth	r1, r3
 800cf62:	0c1b      	lsrs	r3, r3, #16
 800cf64:	eba8 0801 	sub.w	r8, r8, r1
 800cf68:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cf6c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cf70:	fa1f f888 	uxth.w	r8, r8
 800cf74:	1419      	asrs	r1, r3, #16
 800cf76:	454e      	cmp	r6, r9
 800cf78:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cf7c:	f84a 3b04 	str.w	r3, [sl], #4
 800cf80:	d8e8      	bhi.n	800cf54 <__mdiff+0x80>
 800cf82:	1b33      	subs	r3, r6, r4
 800cf84:	3b15      	subs	r3, #21
 800cf86:	f023 0303 	bic.w	r3, r3, #3
 800cf8a:	3304      	adds	r3, #4
 800cf8c:	3415      	adds	r4, #21
 800cf8e:	42a6      	cmp	r6, r4
 800cf90:	bf38      	it	cc
 800cf92:	2304      	movcc	r3, #4
 800cf94:	441d      	add	r5, r3
 800cf96:	4473      	add	r3, lr
 800cf98:	469e      	mov	lr, r3
 800cf9a:	462e      	mov	r6, r5
 800cf9c:	4566      	cmp	r6, ip
 800cf9e:	d30e      	bcc.n	800cfbe <__mdiff+0xea>
 800cfa0:	f10c 0203 	add.w	r2, ip, #3
 800cfa4:	1b52      	subs	r2, r2, r5
 800cfa6:	f022 0203 	bic.w	r2, r2, #3
 800cfaa:	3d03      	subs	r5, #3
 800cfac:	45ac      	cmp	ip, r5
 800cfae:	bf38      	it	cc
 800cfb0:	2200      	movcc	r2, #0
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cfb8:	b17a      	cbz	r2, 800cfda <__mdiff+0x106>
 800cfba:	6107      	str	r7, [r0, #16]
 800cfbc:	e7a4      	b.n	800cf08 <__mdiff+0x34>
 800cfbe:	f856 8b04 	ldr.w	r8, [r6], #4
 800cfc2:	fa11 f288 	uxtah	r2, r1, r8
 800cfc6:	1414      	asrs	r4, r2, #16
 800cfc8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800cfcc:	b292      	uxth	r2, r2
 800cfce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cfd2:	f84e 2b04 	str.w	r2, [lr], #4
 800cfd6:	1421      	asrs	r1, r4, #16
 800cfd8:	e7e0      	b.n	800cf9c <__mdiff+0xc8>
 800cfda:	3f01      	subs	r7, #1
 800cfdc:	e7ea      	b.n	800cfb4 <__mdiff+0xe0>
 800cfde:	bf00      	nop
 800cfe0:	0800d948 	.word	0x0800d948
 800cfe4:	0800d959 	.word	0x0800d959

0800cfe8 <__d2b>:
 800cfe8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfec:	460f      	mov	r7, r1
 800cfee:	2101      	movs	r1, #1
 800cff0:	ec59 8b10 	vmov	r8, r9, d0
 800cff4:	4616      	mov	r6, r2
 800cff6:	f7ff fcd5 	bl	800c9a4 <_Balloc>
 800cffa:	4604      	mov	r4, r0
 800cffc:	b930      	cbnz	r0, 800d00c <__d2b+0x24>
 800cffe:	4602      	mov	r2, r0
 800d000:	4b24      	ldr	r3, [pc, #144]	; (800d094 <__d2b+0xac>)
 800d002:	4825      	ldr	r0, [pc, #148]	; (800d098 <__d2b+0xb0>)
 800d004:	f240 310f 	movw	r1, #783	; 0x30f
 800d008:	f000 f904 	bl	800d214 <__assert_func>
 800d00c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d014:	bb2d      	cbnz	r5, 800d062 <__d2b+0x7a>
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	f1b8 0300 	subs.w	r3, r8, #0
 800d01c:	d026      	beq.n	800d06c <__d2b+0x84>
 800d01e:	4668      	mov	r0, sp
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	f7ff fd87 	bl	800cb34 <__lo0bits>
 800d026:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d02a:	b1e8      	cbz	r0, 800d068 <__d2b+0x80>
 800d02c:	f1c0 0320 	rsb	r3, r0, #32
 800d030:	fa02 f303 	lsl.w	r3, r2, r3
 800d034:	430b      	orrs	r3, r1
 800d036:	40c2      	lsrs	r2, r0
 800d038:	6163      	str	r3, [r4, #20]
 800d03a:	9201      	str	r2, [sp, #4]
 800d03c:	9b01      	ldr	r3, [sp, #4]
 800d03e:	61a3      	str	r3, [r4, #24]
 800d040:	2b00      	cmp	r3, #0
 800d042:	bf14      	ite	ne
 800d044:	2202      	movne	r2, #2
 800d046:	2201      	moveq	r2, #1
 800d048:	6122      	str	r2, [r4, #16]
 800d04a:	b1bd      	cbz	r5, 800d07c <__d2b+0x94>
 800d04c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d050:	4405      	add	r5, r0
 800d052:	603d      	str	r5, [r7, #0]
 800d054:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d058:	6030      	str	r0, [r6, #0]
 800d05a:	4620      	mov	r0, r4
 800d05c:	b003      	add	sp, #12
 800d05e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d066:	e7d6      	b.n	800d016 <__d2b+0x2e>
 800d068:	6161      	str	r1, [r4, #20]
 800d06a:	e7e7      	b.n	800d03c <__d2b+0x54>
 800d06c:	a801      	add	r0, sp, #4
 800d06e:	f7ff fd61 	bl	800cb34 <__lo0bits>
 800d072:	9b01      	ldr	r3, [sp, #4]
 800d074:	6163      	str	r3, [r4, #20]
 800d076:	3020      	adds	r0, #32
 800d078:	2201      	movs	r2, #1
 800d07a:	e7e5      	b.n	800d048 <__d2b+0x60>
 800d07c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d080:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d084:	6038      	str	r0, [r7, #0]
 800d086:	6918      	ldr	r0, [r3, #16]
 800d088:	f7ff fd34 	bl	800caf4 <__hi0bits>
 800d08c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d090:	e7e2      	b.n	800d058 <__d2b+0x70>
 800d092:	bf00      	nop
 800d094:	0800d948 	.word	0x0800d948
 800d098:	0800d959 	.word	0x0800d959

0800d09c <__sflush_r>:
 800d09c:	898a      	ldrh	r2, [r1, #12]
 800d09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a2:	4605      	mov	r5, r0
 800d0a4:	0710      	lsls	r0, r2, #28
 800d0a6:	460c      	mov	r4, r1
 800d0a8:	d458      	bmi.n	800d15c <__sflush_r+0xc0>
 800d0aa:	684b      	ldr	r3, [r1, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	dc05      	bgt.n	800d0bc <__sflush_r+0x20>
 800d0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	dc02      	bgt.n	800d0bc <__sflush_r+0x20>
 800d0b6:	2000      	movs	r0, #0
 800d0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0be:	2e00      	cmp	r6, #0
 800d0c0:	d0f9      	beq.n	800d0b6 <__sflush_r+0x1a>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d0c8:	682f      	ldr	r7, [r5, #0]
 800d0ca:	6a21      	ldr	r1, [r4, #32]
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	d032      	beq.n	800d136 <__sflush_r+0x9a>
 800d0d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d0d2:	89a3      	ldrh	r3, [r4, #12]
 800d0d4:	075a      	lsls	r2, r3, #29
 800d0d6:	d505      	bpl.n	800d0e4 <__sflush_r+0x48>
 800d0d8:	6863      	ldr	r3, [r4, #4]
 800d0da:	1ac0      	subs	r0, r0, r3
 800d0dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0de:	b10b      	cbz	r3, 800d0e4 <__sflush_r+0x48>
 800d0e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0e2:	1ac0      	subs	r0, r0, r3
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	4602      	mov	r2, r0
 800d0e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ea:	6a21      	ldr	r1, [r4, #32]
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	47b0      	blx	r6
 800d0f0:	1c43      	adds	r3, r0, #1
 800d0f2:	89a3      	ldrh	r3, [r4, #12]
 800d0f4:	d106      	bne.n	800d104 <__sflush_r+0x68>
 800d0f6:	6829      	ldr	r1, [r5, #0]
 800d0f8:	291d      	cmp	r1, #29
 800d0fa:	d82b      	bhi.n	800d154 <__sflush_r+0xb8>
 800d0fc:	4a29      	ldr	r2, [pc, #164]	; (800d1a4 <__sflush_r+0x108>)
 800d0fe:	410a      	asrs	r2, r1
 800d100:	07d6      	lsls	r6, r2, #31
 800d102:	d427      	bmi.n	800d154 <__sflush_r+0xb8>
 800d104:	2200      	movs	r2, #0
 800d106:	6062      	str	r2, [r4, #4]
 800d108:	04d9      	lsls	r1, r3, #19
 800d10a:	6922      	ldr	r2, [r4, #16]
 800d10c:	6022      	str	r2, [r4, #0]
 800d10e:	d504      	bpl.n	800d11a <__sflush_r+0x7e>
 800d110:	1c42      	adds	r2, r0, #1
 800d112:	d101      	bne.n	800d118 <__sflush_r+0x7c>
 800d114:	682b      	ldr	r3, [r5, #0]
 800d116:	b903      	cbnz	r3, 800d11a <__sflush_r+0x7e>
 800d118:	6560      	str	r0, [r4, #84]	; 0x54
 800d11a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d11c:	602f      	str	r7, [r5, #0]
 800d11e:	2900      	cmp	r1, #0
 800d120:	d0c9      	beq.n	800d0b6 <__sflush_r+0x1a>
 800d122:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d126:	4299      	cmp	r1, r3
 800d128:	d002      	beq.n	800d130 <__sflush_r+0x94>
 800d12a:	4628      	mov	r0, r5
 800d12c:	f7ff fbee 	bl	800c90c <_free_r>
 800d130:	2000      	movs	r0, #0
 800d132:	6360      	str	r0, [r4, #52]	; 0x34
 800d134:	e7c0      	b.n	800d0b8 <__sflush_r+0x1c>
 800d136:	2301      	movs	r3, #1
 800d138:	4628      	mov	r0, r5
 800d13a:	47b0      	blx	r6
 800d13c:	1c41      	adds	r1, r0, #1
 800d13e:	d1c8      	bne.n	800d0d2 <__sflush_r+0x36>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d0c5      	beq.n	800d0d2 <__sflush_r+0x36>
 800d146:	2b1d      	cmp	r3, #29
 800d148:	d001      	beq.n	800d14e <__sflush_r+0xb2>
 800d14a:	2b16      	cmp	r3, #22
 800d14c:	d101      	bne.n	800d152 <__sflush_r+0xb6>
 800d14e:	602f      	str	r7, [r5, #0]
 800d150:	e7b1      	b.n	800d0b6 <__sflush_r+0x1a>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	e7ad      	b.n	800d0b8 <__sflush_r+0x1c>
 800d15c:	690f      	ldr	r7, [r1, #16]
 800d15e:	2f00      	cmp	r7, #0
 800d160:	d0a9      	beq.n	800d0b6 <__sflush_r+0x1a>
 800d162:	0793      	lsls	r3, r2, #30
 800d164:	680e      	ldr	r6, [r1, #0]
 800d166:	bf08      	it	eq
 800d168:	694b      	ldreq	r3, [r1, #20]
 800d16a:	600f      	str	r7, [r1, #0]
 800d16c:	bf18      	it	ne
 800d16e:	2300      	movne	r3, #0
 800d170:	eba6 0807 	sub.w	r8, r6, r7
 800d174:	608b      	str	r3, [r1, #8]
 800d176:	f1b8 0f00 	cmp.w	r8, #0
 800d17a:	dd9c      	ble.n	800d0b6 <__sflush_r+0x1a>
 800d17c:	6a21      	ldr	r1, [r4, #32]
 800d17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d180:	4643      	mov	r3, r8
 800d182:	463a      	mov	r2, r7
 800d184:	4628      	mov	r0, r5
 800d186:	47b0      	blx	r6
 800d188:	2800      	cmp	r0, #0
 800d18a:	dc06      	bgt.n	800d19a <__sflush_r+0xfe>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d192:	81a3      	strh	r3, [r4, #12]
 800d194:	f04f 30ff 	mov.w	r0, #4294967295
 800d198:	e78e      	b.n	800d0b8 <__sflush_r+0x1c>
 800d19a:	4407      	add	r7, r0
 800d19c:	eba8 0800 	sub.w	r8, r8, r0
 800d1a0:	e7e9      	b.n	800d176 <__sflush_r+0xda>
 800d1a2:	bf00      	nop
 800d1a4:	dfbffffe 	.word	0xdfbffffe

0800d1a8 <_fflush_r>:
 800d1a8:	b538      	push	{r3, r4, r5, lr}
 800d1aa:	690b      	ldr	r3, [r1, #16]
 800d1ac:	4605      	mov	r5, r0
 800d1ae:	460c      	mov	r4, r1
 800d1b0:	b913      	cbnz	r3, 800d1b8 <_fflush_r+0x10>
 800d1b2:	2500      	movs	r5, #0
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	b118      	cbz	r0, 800d1c2 <_fflush_r+0x1a>
 800d1ba:	6a03      	ldr	r3, [r0, #32]
 800d1bc:	b90b      	cbnz	r3, 800d1c2 <_fflush_r+0x1a>
 800d1be:	f7fe fc23 	bl	800ba08 <__sinit>
 800d1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d0f3      	beq.n	800d1b2 <_fflush_r+0xa>
 800d1ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d1cc:	07d0      	lsls	r0, r2, #31
 800d1ce:	d404      	bmi.n	800d1da <_fflush_r+0x32>
 800d1d0:	0599      	lsls	r1, r3, #22
 800d1d2:	d402      	bmi.n	800d1da <_fflush_r+0x32>
 800d1d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1d6:	f7fe fd1d 	bl	800bc14 <__retarget_lock_acquire_recursive>
 800d1da:	4628      	mov	r0, r5
 800d1dc:	4621      	mov	r1, r4
 800d1de:	f7ff ff5d 	bl	800d09c <__sflush_r>
 800d1e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1e4:	07da      	lsls	r2, r3, #31
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	d4e4      	bmi.n	800d1b4 <_fflush_r+0xc>
 800d1ea:	89a3      	ldrh	r3, [r4, #12]
 800d1ec:	059b      	lsls	r3, r3, #22
 800d1ee:	d4e1      	bmi.n	800d1b4 <_fflush_r+0xc>
 800d1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1f2:	f7fe fd10 	bl	800bc16 <__retarget_lock_release_recursive>
 800d1f6:	e7dd      	b.n	800d1b4 <_fflush_r+0xc>

0800d1f8 <memcpy>:
 800d1f8:	440a      	add	r2, r1
 800d1fa:	4291      	cmp	r1, r2
 800d1fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800d200:	d100      	bne.n	800d204 <memcpy+0xc>
 800d202:	4770      	bx	lr
 800d204:	b510      	push	{r4, lr}
 800d206:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d20a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d20e:	4291      	cmp	r1, r2
 800d210:	d1f9      	bne.n	800d206 <memcpy+0xe>
 800d212:	bd10      	pop	{r4, pc}

0800d214 <__assert_func>:
 800d214:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d216:	4614      	mov	r4, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <__assert_func+0x2c>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4605      	mov	r5, r0
 800d220:	68d8      	ldr	r0, [r3, #12]
 800d222:	b14c      	cbz	r4, 800d238 <__assert_func+0x24>
 800d224:	4b07      	ldr	r3, [pc, #28]	; (800d244 <__assert_func+0x30>)
 800d226:	9100      	str	r1, [sp, #0]
 800d228:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d22c:	4906      	ldr	r1, [pc, #24]	; (800d248 <__assert_func+0x34>)
 800d22e:	462b      	mov	r3, r5
 800d230:	f000 f844 	bl	800d2bc <fiprintf>
 800d234:	f000 f854 	bl	800d2e0 <abort>
 800d238:	4b04      	ldr	r3, [pc, #16]	; (800d24c <__assert_func+0x38>)
 800d23a:	461c      	mov	r4, r3
 800d23c:	e7f3      	b.n	800d226 <__assert_func+0x12>
 800d23e:	bf00      	nop
 800d240:	20000094 	.word	0x20000094
 800d244:	0800dabe 	.word	0x0800dabe
 800d248:	0800dacb 	.word	0x0800dacb
 800d24c:	0800daf9 	.word	0x0800daf9

0800d250 <_calloc_r>:
 800d250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d252:	fba1 2402 	umull	r2, r4, r1, r2
 800d256:	b94c      	cbnz	r4, 800d26c <_calloc_r+0x1c>
 800d258:	4611      	mov	r1, r2
 800d25a:	9201      	str	r2, [sp, #4]
 800d25c:	f7fd fe68 	bl	800af30 <_malloc_r>
 800d260:	9a01      	ldr	r2, [sp, #4]
 800d262:	4605      	mov	r5, r0
 800d264:	b930      	cbnz	r0, 800d274 <_calloc_r+0x24>
 800d266:	4628      	mov	r0, r5
 800d268:	b003      	add	sp, #12
 800d26a:	bd30      	pop	{r4, r5, pc}
 800d26c:	220c      	movs	r2, #12
 800d26e:	6002      	str	r2, [r0, #0]
 800d270:	2500      	movs	r5, #0
 800d272:	e7f8      	b.n	800d266 <_calloc_r+0x16>
 800d274:	4621      	mov	r1, r4
 800d276:	f7fe fc40 	bl	800bafa <memset>
 800d27a:	e7f4      	b.n	800d266 <_calloc_r+0x16>

0800d27c <__ascii_mbtowc>:
 800d27c:	b082      	sub	sp, #8
 800d27e:	b901      	cbnz	r1, 800d282 <__ascii_mbtowc+0x6>
 800d280:	a901      	add	r1, sp, #4
 800d282:	b142      	cbz	r2, 800d296 <__ascii_mbtowc+0x1a>
 800d284:	b14b      	cbz	r3, 800d29a <__ascii_mbtowc+0x1e>
 800d286:	7813      	ldrb	r3, [r2, #0]
 800d288:	600b      	str	r3, [r1, #0]
 800d28a:	7812      	ldrb	r2, [r2, #0]
 800d28c:	1e10      	subs	r0, r2, #0
 800d28e:	bf18      	it	ne
 800d290:	2001      	movne	r0, #1
 800d292:	b002      	add	sp, #8
 800d294:	4770      	bx	lr
 800d296:	4610      	mov	r0, r2
 800d298:	e7fb      	b.n	800d292 <__ascii_mbtowc+0x16>
 800d29a:	f06f 0001 	mvn.w	r0, #1
 800d29e:	e7f8      	b.n	800d292 <__ascii_mbtowc+0x16>

0800d2a0 <__ascii_wctomb>:
 800d2a0:	b149      	cbz	r1, 800d2b6 <__ascii_wctomb+0x16>
 800d2a2:	2aff      	cmp	r2, #255	; 0xff
 800d2a4:	bf85      	ittet	hi
 800d2a6:	238a      	movhi	r3, #138	; 0x8a
 800d2a8:	6003      	strhi	r3, [r0, #0]
 800d2aa:	700a      	strbls	r2, [r1, #0]
 800d2ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2b0:	bf98      	it	ls
 800d2b2:	2001      	movls	r0, #1
 800d2b4:	4770      	bx	lr
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4770      	bx	lr
	...

0800d2bc <fiprintf>:
 800d2bc:	b40e      	push	{r1, r2, r3}
 800d2be:	b503      	push	{r0, r1, lr}
 800d2c0:	4601      	mov	r1, r0
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	4805      	ldr	r0, [pc, #20]	; (800d2dc <fiprintf+0x20>)
 800d2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ca:	6800      	ldr	r0, [r0, #0]
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	f000 f837 	bl	800d340 <_vfiprintf_r>
 800d2d2:	b002      	add	sp, #8
 800d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2d8:	b003      	add	sp, #12
 800d2da:	4770      	bx	lr
 800d2dc:	20000094 	.word	0x20000094

0800d2e0 <abort>:
 800d2e0:	b508      	push	{r3, lr}
 800d2e2:	2006      	movs	r0, #6
 800d2e4:	f000 fa04 	bl	800d6f0 <raise>
 800d2e8:	2001      	movs	r0, #1
 800d2ea:	f7f4 f871 	bl	80013d0 <_exit>

0800d2ee <__sfputc_r>:
 800d2ee:	6893      	ldr	r3, [r2, #8]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	b410      	push	{r4}
 800d2f6:	6093      	str	r3, [r2, #8]
 800d2f8:	da08      	bge.n	800d30c <__sfputc_r+0x1e>
 800d2fa:	6994      	ldr	r4, [r2, #24]
 800d2fc:	42a3      	cmp	r3, r4
 800d2fe:	db01      	blt.n	800d304 <__sfputc_r+0x16>
 800d300:	290a      	cmp	r1, #10
 800d302:	d103      	bne.n	800d30c <__sfputc_r+0x1e>
 800d304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d308:	f000 b934 	b.w	800d574 <__swbuf_r>
 800d30c:	6813      	ldr	r3, [r2, #0]
 800d30e:	1c58      	adds	r0, r3, #1
 800d310:	6010      	str	r0, [r2, #0]
 800d312:	7019      	strb	r1, [r3, #0]
 800d314:	4608      	mov	r0, r1
 800d316:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <__sfputs_r>:
 800d31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d31e:	4606      	mov	r6, r0
 800d320:	460f      	mov	r7, r1
 800d322:	4614      	mov	r4, r2
 800d324:	18d5      	adds	r5, r2, r3
 800d326:	42ac      	cmp	r4, r5
 800d328:	d101      	bne.n	800d32e <__sfputs_r+0x12>
 800d32a:	2000      	movs	r0, #0
 800d32c:	e007      	b.n	800d33e <__sfputs_r+0x22>
 800d32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d332:	463a      	mov	r2, r7
 800d334:	4630      	mov	r0, r6
 800d336:	f7ff ffda 	bl	800d2ee <__sfputc_r>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	d1f3      	bne.n	800d326 <__sfputs_r+0xa>
 800d33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d340 <_vfiprintf_r>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	460d      	mov	r5, r1
 800d346:	b09d      	sub	sp, #116	; 0x74
 800d348:	4614      	mov	r4, r2
 800d34a:	4698      	mov	r8, r3
 800d34c:	4606      	mov	r6, r0
 800d34e:	b118      	cbz	r0, 800d358 <_vfiprintf_r+0x18>
 800d350:	6a03      	ldr	r3, [r0, #32]
 800d352:	b90b      	cbnz	r3, 800d358 <_vfiprintf_r+0x18>
 800d354:	f7fe fb58 	bl	800ba08 <__sinit>
 800d358:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d35a:	07d9      	lsls	r1, r3, #31
 800d35c:	d405      	bmi.n	800d36a <_vfiprintf_r+0x2a>
 800d35e:	89ab      	ldrh	r3, [r5, #12]
 800d360:	059a      	lsls	r2, r3, #22
 800d362:	d402      	bmi.n	800d36a <_vfiprintf_r+0x2a>
 800d364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d366:	f7fe fc55 	bl	800bc14 <__retarget_lock_acquire_recursive>
 800d36a:	89ab      	ldrh	r3, [r5, #12]
 800d36c:	071b      	lsls	r3, r3, #28
 800d36e:	d501      	bpl.n	800d374 <_vfiprintf_r+0x34>
 800d370:	692b      	ldr	r3, [r5, #16]
 800d372:	b99b      	cbnz	r3, 800d39c <_vfiprintf_r+0x5c>
 800d374:	4629      	mov	r1, r5
 800d376:	4630      	mov	r0, r6
 800d378:	f000 f93a 	bl	800d5f0 <__swsetup_r>
 800d37c:	b170      	cbz	r0, 800d39c <_vfiprintf_r+0x5c>
 800d37e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d380:	07dc      	lsls	r4, r3, #31
 800d382:	d504      	bpl.n	800d38e <_vfiprintf_r+0x4e>
 800d384:	f04f 30ff 	mov.w	r0, #4294967295
 800d388:	b01d      	add	sp, #116	; 0x74
 800d38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d38e:	89ab      	ldrh	r3, [r5, #12]
 800d390:	0598      	lsls	r0, r3, #22
 800d392:	d4f7      	bmi.n	800d384 <_vfiprintf_r+0x44>
 800d394:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d396:	f7fe fc3e 	bl	800bc16 <__retarget_lock_release_recursive>
 800d39a:	e7f3      	b.n	800d384 <_vfiprintf_r+0x44>
 800d39c:	2300      	movs	r3, #0
 800d39e:	9309      	str	r3, [sp, #36]	; 0x24
 800d3a0:	2320      	movs	r3, #32
 800d3a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d3a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3aa:	2330      	movs	r3, #48	; 0x30
 800d3ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d560 <_vfiprintf_r+0x220>
 800d3b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d3b4:	f04f 0901 	mov.w	r9, #1
 800d3b8:	4623      	mov	r3, r4
 800d3ba:	469a      	mov	sl, r3
 800d3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3c0:	b10a      	cbz	r2, 800d3c6 <_vfiprintf_r+0x86>
 800d3c2:	2a25      	cmp	r2, #37	; 0x25
 800d3c4:	d1f9      	bne.n	800d3ba <_vfiprintf_r+0x7a>
 800d3c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d3ca:	d00b      	beq.n	800d3e4 <_vfiprintf_r+0xa4>
 800d3cc:	465b      	mov	r3, fp
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	4629      	mov	r1, r5
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f7ff ffa2 	bl	800d31c <__sfputs_r>
 800d3d8:	3001      	adds	r0, #1
 800d3da:	f000 80a9 	beq.w	800d530 <_vfiprintf_r+0x1f0>
 800d3de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d3e0:	445a      	add	r2, fp
 800d3e2:	9209      	str	r2, [sp, #36]	; 0x24
 800d3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f000 80a1 	beq.w	800d530 <_vfiprintf_r+0x1f0>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3f8:	f10a 0a01 	add.w	sl, sl, #1
 800d3fc:	9304      	str	r3, [sp, #16]
 800d3fe:	9307      	str	r3, [sp, #28]
 800d400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d404:	931a      	str	r3, [sp, #104]	; 0x68
 800d406:	4654      	mov	r4, sl
 800d408:	2205      	movs	r2, #5
 800d40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d40e:	4854      	ldr	r0, [pc, #336]	; (800d560 <_vfiprintf_r+0x220>)
 800d410:	f7f2 feee 	bl	80001f0 <memchr>
 800d414:	9a04      	ldr	r2, [sp, #16]
 800d416:	b9d8      	cbnz	r0, 800d450 <_vfiprintf_r+0x110>
 800d418:	06d1      	lsls	r1, r2, #27
 800d41a:	bf44      	itt	mi
 800d41c:	2320      	movmi	r3, #32
 800d41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d422:	0713      	lsls	r3, r2, #28
 800d424:	bf44      	itt	mi
 800d426:	232b      	movmi	r3, #43	; 0x2b
 800d428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d42c:	f89a 3000 	ldrb.w	r3, [sl]
 800d430:	2b2a      	cmp	r3, #42	; 0x2a
 800d432:	d015      	beq.n	800d460 <_vfiprintf_r+0x120>
 800d434:	9a07      	ldr	r2, [sp, #28]
 800d436:	4654      	mov	r4, sl
 800d438:	2000      	movs	r0, #0
 800d43a:	f04f 0c0a 	mov.w	ip, #10
 800d43e:	4621      	mov	r1, r4
 800d440:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d444:	3b30      	subs	r3, #48	; 0x30
 800d446:	2b09      	cmp	r3, #9
 800d448:	d94d      	bls.n	800d4e6 <_vfiprintf_r+0x1a6>
 800d44a:	b1b0      	cbz	r0, 800d47a <_vfiprintf_r+0x13a>
 800d44c:	9207      	str	r2, [sp, #28]
 800d44e:	e014      	b.n	800d47a <_vfiprintf_r+0x13a>
 800d450:	eba0 0308 	sub.w	r3, r0, r8
 800d454:	fa09 f303 	lsl.w	r3, r9, r3
 800d458:	4313      	orrs	r3, r2
 800d45a:	9304      	str	r3, [sp, #16]
 800d45c:	46a2      	mov	sl, r4
 800d45e:	e7d2      	b.n	800d406 <_vfiprintf_r+0xc6>
 800d460:	9b03      	ldr	r3, [sp, #12]
 800d462:	1d19      	adds	r1, r3, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	9103      	str	r1, [sp, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	bfbb      	ittet	lt
 800d46c:	425b      	neglt	r3, r3
 800d46e:	f042 0202 	orrlt.w	r2, r2, #2
 800d472:	9307      	strge	r3, [sp, #28]
 800d474:	9307      	strlt	r3, [sp, #28]
 800d476:	bfb8      	it	lt
 800d478:	9204      	strlt	r2, [sp, #16]
 800d47a:	7823      	ldrb	r3, [r4, #0]
 800d47c:	2b2e      	cmp	r3, #46	; 0x2e
 800d47e:	d10c      	bne.n	800d49a <_vfiprintf_r+0x15a>
 800d480:	7863      	ldrb	r3, [r4, #1]
 800d482:	2b2a      	cmp	r3, #42	; 0x2a
 800d484:	d134      	bne.n	800d4f0 <_vfiprintf_r+0x1b0>
 800d486:	9b03      	ldr	r3, [sp, #12]
 800d488:	1d1a      	adds	r2, r3, #4
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	9203      	str	r2, [sp, #12]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	bfb8      	it	lt
 800d492:	f04f 33ff 	movlt.w	r3, #4294967295
 800d496:	3402      	adds	r4, #2
 800d498:	9305      	str	r3, [sp, #20]
 800d49a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d570 <_vfiprintf_r+0x230>
 800d49e:	7821      	ldrb	r1, [r4, #0]
 800d4a0:	2203      	movs	r2, #3
 800d4a2:	4650      	mov	r0, sl
 800d4a4:	f7f2 fea4 	bl	80001f0 <memchr>
 800d4a8:	b138      	cbz	r0, 800d4ba <_vfiprintf_r+0x17a>
 800d4aa:	9b04      	ldr	r3, [sp, #16]
 800d4ac:	eba0 000a 	sub.w	r0, r0, sl
 800d4b0:	2240      	movs	r2, #64	; 0x40
 800d4b2:	4082      	lsls	r2, r0
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	3401      	adds	r4, #1
 800d4b8:	9304      	str	r3, [sp, #16]
 800d4ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4be:	4829      	ldr	r0, [pc, #164]	; (800d564 <_vfiprintf_r+0x224>)
 800d4c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d4c4:	2206      	movs	r2, #6
 800d4c6:	f7f2 fe93 	bl	80001f0 <memchr>
 800d4ca:	2800      	cmp	r0, #0
 800d4cc:	d03f      	beq.n	800d54e <_vfiprintf_r+0x20e>
 800d4ce:	4b26      	ldr	r3, [pc, #152]	; (800d568 <_vfiprintf_r+0x228>)
 800d4d0:	bb1b      	cbnz	r3, 800d51a <_vfiprintf_r+0x1da>
 800d4d2:	9b03      	ldr	r3, [sp, #12]
 800d4d4:	3307      	adds	r3, #7
 800d4d6:	f023 0307 	bic.w	r3, r3, #7
 800d4da:	3308      	adds	r3, #8
 800d4dc:	9303      	str	r3, [sp, #12]
 800d4de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4e0:	443b      	add	r3, r7
 800d4e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d4e4:	e768      	b.n	800d3b8 <_vfiprintf_r+0x78>
 800d4e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	2001      	movs	r0, #1
 800d4ee:	e7a6      	b.n	800d43e <_vfiprintf_r+0xfe>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	3401      	adds	r4, #1
 800d4f4:	9305      	str	r3, [sp, #20]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	f04f 0c0a 	mov.w	ip, #10
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d502:	3a30      	subs	r2, #48	; 0x30
 800d504:	2a09      	cmp	r2, #9
 800d506:	d903      	bls.n	800d510 <_vfiprintf_r+0x1d0>
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d0c6      	beq.n	800d49a <_vfiprintf_r+0x15a>
 800d50c:	9105      	str	r1, [sp, #20]
 800d50e:	e7c4      	b.n	800d49a <_vfiprintf_r+0x15a>
 800d510:	fb0c 2101 	mla	r1, ip, r1, r2
 800d514:	4604      	mov	r4, r0
 800d516:	2301      	movs	r3, #1
 800d518:	e7f0      	b.n	800d4fc <_vfiprintf_r+0x1bc>
 800d51a:	ab03      	add	r3, sp, #12
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	462a      	mov	r2, r5
 800d520:	4b12      	ldr	r3, [pc, #72]	; (800d56c <_vfiprintf_r+0x22c>)
 800d522:	a904      	add	r1, sp, #16
 800d524:	4630      	mov	r0, r6
 800d526:	f7fd fe2f 	bl	800b188 <_printf_float>
 800d52a:	4607      	mov	r7, r0
 800d52c:	1c78      	adds	r0, r7, #1
 800d52e:	d1d6      	bne.n	800d4de <_vfiprintf_r+0x19e>
 800d530:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d532:	07d9      	lsls	r1, r3, #31
 800d534:	d405      	bmi.n	800d542 <_vfiprintf_r+0x202>
 800d536:	89ab      	ldrh	r3, [r5, #12]
 800d538:	059a      	lsls	r2, r3, #22
 800d53a:	d402      	bmi.n	800d542 <_vfiprintf_r+0x202>
 800d53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d53e:	f7fe fb6a 	bl	800bc16 <__retarget_lock_release_recursive>
 800d542:	89ab      	ldrh	r3, [r5, #12]
 800d544:	065b      	lsls	r3, r3, #25
 800d546:	f53f af1d 	bmi.w	800d384 <_vfiprintf_r+0x44>
 800d54a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d54c:	e71c      	b.n	800d388 <_vfiprintf_r+0x48>
 800d54e:	ab03      	add	r3, sp, #12
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	462a      	mov	r2, r5
 800d554:	4b05      	ldr	r3, [pc, #20]	; (800d56c <_vfiprintf_r+0x22c>)
 800d556:	a904      	add	r1, sp, #16
 800d558:	4630      	mov	r0, r6
 800d55a:	f7fe f8b9 	bl	800b6d0 <_printf_i>
 800d55e:	e7e4      	b.n	800d52a <_vfiprintf_r+0x1ea>
 800d560:	0800dbfb 	.word	0x0800dbfb
 800d564:	0800dc05 	.word	0x0800dc05
 800d568:	0800b189 	.word	0x0800b189
 800d56c:	0800d31d 	.word	0x0800d31d
 800d570:	0800dc01 	.word	0x0800dc01

0800d574 <__swbuf_r>:
 800d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d576:	460e      	mov	r6, r1
 800d578:	4614      	mov	r4, r2
 800d57a:	4605      	mov	r5, r0
 800d57c:	b118      	cbz	r0, 800d586 <__swbuf_r+0x12>
 800d57e:	6a03      	ldr	r3, [r0, #32]
 800d580:	b90b      	cbnz	r3, 800d586 <__swbuf_r+0x12>
 800d582:	f7fe fa41 	bl	800ba08 <__sinit>
 800d586:	69a3      	ldr	r3, [r4, #24]
 800d588:	60a3      	str	r3, [r4, #8]
 800d58a:	89a3      	ldrh	r3, [r4, #12]
 800d58c:	071a      	lsls	r2, r3, #28
 800d58e:	d525      	bpl.n	800d5dc <__swbuf_r+0x68>
 800d590:	6923      	ldr	r3, [r4, #16]
 800d592:	b31b      	cbz	r3, 800d5dc <__swbuf_r+0x68>
 800d594:	6823      	ldr	r3, [r4, #0]
 800d596:	6922      	ldr	r2, [r4, #16]
 800d598:	1a98      	subs	r0, r3, r2
 800d59a:	6963      	ldr	r3, [r4, #20]
 800d59c:	b2f6      	uxtb	r6, r6
 800d59e:	4283      	cmp	r3, r0
 800d5a0:	4637      	mov	r7, r6
 800d5a2:	dc04      	bgt.n	800d5ae <__swbuf_r+0x3a>
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	4628      	mov	r0, r5
 800d5a8:	f7ff fdfe 	bl	800d1a8 <_fflush_r>
 800d5ac:	b9e0      	cbnz	r0, 800d5e8 <__swbuf_r+0x74>
 800d5ae:	68a3      	ldr	r3, [r4, #8]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	60a3      	str	r3, [r4, #8]
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	6022      	str	r2, [r4, #0]
 800d5ba:	701e      	strb	r6, [r3, #0]
 800d5bc:	6962      	ldr	r2, [r4, #20]
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d004      	beq.n	800d5ce <__swbuf_r+0x5a>
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	07db      	lsls	r3, r3, #31
 800d5c8:	d506      	bpl.n	800d5d8 <__swbuf_r+0x64>
 800d5ca:	2e0a      	cmp	r6, #10
 800d5cc:	d104      	bne.n	800d5d8 <__swbuf_r+0x64>
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4628      	mov	r0, r5
 800d5d2:	f7ff fde9 	bl	800d1a8 <_fflush_r>
 800d5d6:	b938      	cbnz	r0, 800d5e8 <__swbuf_r+0x74>
 800d5d8:	4638      	mov	r0, r7
 800d5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5dc:	4621      	mov	r1, r4
 800d5de:	4628      	mov	r0, r5
 800d5e0:	f000 f806 	bl	800d5f0 <__swsetup_r>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	d0d5      	beq.n	800d594 <__swbuf_r+0x20>
 800d5e8:	f04f 37ff 	mov.w	r7, #4294967295
 800d5ec:	e7f4      	b.n	800d5d8 <__swbuf_r+0x64>
	...

0800d5f0 <__swsetup_r>:
 800d5f0:	b538      	push	{r3, r4, r5, lr}
 800d5f2:	4b2a      	ldr	r3, [pc, #168]	; (800d69c <__swsetup_r+0xac>)
 800d5f4:	4605      	mov	r5, r0
 800d5f6:	6818      	ldr	r0, [r3, #0]
 800d5f8:	460c      	mov	r4, r1
 800d5fa:	b118      	cbz	r0, 800d604 <__swsetup_r+0x14>
 800d5fc:	6a03      	ldr	r3, [r0, #32]
 800d5fe:	b90b      	cbnz	r3, 800d604 <__swsetup_r+0x14>
 800d600:	f7fe fa02 	bl	800ba08 <__sinit>
 800d604:	89a3      	ldrh	r3, [r4, #12]
 800d606:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d60a:	0718      	lsls	r0, r3, #28
 800d60c:	d422      	bmi.n	800d654 <__swsetup_r+0x64>
 800d60e:	06d9      	lsls	r1, r3, #27
 800d610:	d407      	bmi.n	800d622 <__swsetup_r+0x32>
 800d612:	2309      	movs	r3, #9
 800d614:	602b      	str	r3, [r5, #0]
 800d616:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	e034      	b.n	800d68c <__swsetup_r+0x9c>
 800d622:	0758      	lsls	r0, r3, #29
 800d624:	d512      	bpl.n	800d64c <__swsetup_r+0x5c>
 800d626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d628:	b141      	cbz	r1, 800d63c <__swsetup_r+0x4c>
 800d62a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d62e:	4299      	cmp	r1, r3
 800d630:	d002      	beq.n	800d638 <__swsetup_r+0x48>
 800d632:	4628      	mov	r0, r5
 800d634:	f7ff f96a 	bl	800c90c <_free_r>
 800d638:	2300      	movs	r3, #0
 800d63a:	6363      	str	r3, [r4, #52]	; 0x34
 800d63c:	89a3      	ldrh	r3, [r4, #12]
 800d63e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d642:	81a3      	strh	r3, [r4, #12]
 800d644:	2300      	movs	r3, #0
 800d646:	6063      	str	r3, [r4, #4]
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	89a3      	ldrh	r3, [r4, #12]
 800d64e:	f043 0308 	orr.w	r3, r3, #8
 800d652:	81a3      	strh	r3, [r4, #12]
 800d654:	6923      	ldr	r3, [r4, #16]
 800d656:	b94b      	cbnz	r3, 800d66c <__swsetup_r+0x7c>
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d65e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d662:	d003      	beq.n	800d66c <__swsetup_r+0x7c>
 800d664:	4621      	mov	r1, r4
 800d666:	4628      	mov	r0, r5
 800d668:	f000 f884 	bl	800d774 <__smakebuf_r>
 800d66c:	89a0      	ldrh	r0, [r4, #12]
 800d66e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d672:	f010 0301 	ands.w	r3, r0, #1
 800d676:	d00a      	beq.n	800d68e <__swsetup_r+0x9e>
 800d678:	2300      	movs	r3, #0
 800d67a:	60a3      	str	r3, [r4, #8]
 800d67c:	6963      	ldr	r3, [r4, #20]
 800d67e:	425b      	negs	r3, r3
 800d680:	61a3      	str	r3, [r4, #24]
 800d682:	6923      	ldr	r3, [r4, #16]
 800d684:	b943      	cbnz	r3, 800d698 <__swsetup_r+0xa8>
 800d686:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d68a:	d1c4      	bne.n	800d616 <__swsetup_r+0x26>
 800d68c:	bd38      	pop	{r3, r4, r5, pc}
 800d68e:	0781      	lsls	r1, r0, #30
 800d690:	bf58      	it	pl
 800d692:	6963      	ldrpl	r3, [r4, #20]
 800d694:	60a3      	str	r3, [r4, #8]
 800d696:	e7f4      	b.n	800d682 <__swsetup_r+0x92>
 800d698:	2000      	movs	r0, #0
 800d69a:	e7f7      	b.n	800d68c <__swsetup_r+0x9c>
 800d69c:	20000094 	.word	0x20000094

0800d6a0 <_raise_r>:
 800d6a0:	291f      	cmp	r1, #31
 800d6a2:	b538      	push	{r3, r4, r5, lr}
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	460d      	mov	r5, r1
 800d6a8:	d904      	bls.n	800d6b4 <_raise_r+0x14>
 800d6aa:	2316      	movs	r3, #22
 800d6ac:	6003      	str	r3, [r0, #0]
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d6b6:	b112      	cbz	r2, 800d6be <_raise_r+0x1e>
 800d6b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6bc:	b94b      	cbnz	r3, 800d6d2 <_raise_r+0x32>
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f000 f830 	bl	800d724 <_getpid_r>
 800d6c4:	462a      	mov	r2, r5
 800d6c6:	4601      	mov	r1, r0
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6ce:	f000 b817 	b.w	800d700 <_kill_r>
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d00a      	beq.n	800d6ec <_raise_r+0x4c>
 800d6d6:	1c59      	adds	r1, r3, #1
 800d6d8:	d103      	bne.n	800d6e2 <_raise_r+0x42>
 800d6da:	2316      	movs	r3, #22
 800d6dc:	6003      	str	r3, [r0, #0]
 800d6de:	2001      	movs	r0, #1
 800d6e0:	e7e7      	b.n	800d6b2 <_raise_r+0x12>
 800d6e2:	2400      	movs	r4, #0
 800d6e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	4798      	blx	r3
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e7e0      	b.n	800d6b2 <_raise_r+0x12>

0800d6f0 <raise>:
 800d6f0:	4b02      	ldr	r3, [pc, #8]	; (800d6fc <raise+0xc>)
 800d6f2:	4601      	mov	r1, r0
 800d6f4:	6818      	ldr	r0, [r3, #0]
 800d6f6:	f7ff bfd3 	b.w	800d6a0 <_raise_r>
 800d6fa:	bf00      	nop
 800d6fc:	20000094 	.word	0x20000094

0800d700 <_kill_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4d07      	ldr	r5, [pc, #28]	; (800d720 <_kill_r+0x20>)
 800d704:	2300      	movs	r3, #0
 800d706:	4604      	mov	r4, r0
 800d708:	4608      	mov	r0, r1
 800d70a:	4611      	mov	r1, r2
 800d70c:	602b      	str	r3, [r5, #0]
 800d70e:	f7f3 fe4f 	bl	80013b0 <_kill>
 800d712:	1c43      	adds	r3, r0, #1
 800d714:	d102      	bne.n	800d71c <_kill_r+0x1c>
 800d716:	682b      	ldr	r3, [r5, #0]
 800d718:	b103      	cbz	r3, 800d71c <_kill_r+0x1c>
 800d71a:	6023      	str	r3, [r4, #0]
 800d71c:	bd38      	pop	{r3, r4, r5, pc}
 800d71e:	bf00      	nop
 800d720:	20000d44 	.word	0x20000d44

0800d724 <_getpid_r>:
 800d724:	f7f3 be3c 	b.w	80013a0 <_getpid>

0800d728 <__swhatbuf_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	460c      	mov	r4, r1
 800d72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d730:	2900      	cmp	r1, #0
 800d732:	b096      	sub	sp, #88	; 0x58
 800d734:	4615      	mov	r5, r2
 800d736:	461e      	mov	r6, r3
 800d738:	da0d      	bge.n	800d756 <__swhatbuf_r+0x2e>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d740:	f04f 0100 	mov.w	r1, #0
 800d744:	bf0c      	ite	eq
 800d746:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d74a:	2340      	movne	r3, #64	; 0x40
 800d74c:	2000      	movs	r0, #0
 800d74e:	6031      	str	r1, [r6, #0]
 800d750:	602b      	str	r3, [r5, #0]
 800d752:	b016      	add	sp, #88	; 0x58
 800d754:	bd70      	pop	{r4, r5, r6, pc}
 800d756:	466a      	mov	r2, sp
 800d758:	f000 f848 	bl	800d7ec <_fstat_r>
 800d75c:	2800      	cmp	r0, #0
 800d75e:	dbec      	blt.n	800d73a <__swhatbuf_r+0x12>
 800d760:	9901      	ldr	r1, [sp, #4]
 800d762:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d766:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d76a:	4259      	negs	r1, r3
 800d76c:	4159      	adcs	r1, r3
 800d76e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d772:	e7eb      	b.n	800d74c <__swhatbuf_r+0x24>

0800d774 <__smakebuf_r>:
 800d774:	898b      	ldrh	r3, [r1, #12]
 800d776:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d778:	079d      	lsls	r5, r3, #30
 800d77a:	4606      	mov	r6, r0
 800d77c:	460c      	mov	r4, r1
 800d77e:	d507      	bpl.n	800d790 <__smakebuf_r+0x1c>
 800d780:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d784:	6023      	str	r3, [r4, #0]
 800d786:	6123      	str	r3, [r4, #16]
 800d788:	2301      	movs	r3, #1
 800d78a:	6163      	str	r3, [r4, #20]
 800d78c:	b002      	add	sp, #8
 800d78e:	bd70      	pop	{r4, r5, r6, pc}
 800d790:	ab01      	add	r3, sp, #4
 800d792:	466a      	mov	r2, sp
 800d794:	f7ff ffc8 	bl	800d728 <__swhatbuf_r>
 800d798:	9900      	ldr	r1, [sp, #0]
 800d79a:	4605      	mov	r5, r0
 800d79c:	4630      	mov	r0, r6
 800d79e:	f7fd fbc7 	bl	800af30 <_malloc_r>
 800d7a2:	b948      	cbnz	r0, 800d7b8 <__smakebuf_r+0x44>
 800d7a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7a8:	059a      	lsls	r2, r3, #22
 800d7aa:	d4ef      	bmi.n	800d78c <__smakebuf_r+0x18>
 800d7ac:	f023 0303 	bic.w	r3, r3, #3
 800d7b0:	f043 0302 	orr.w	r3, r3, #2
 800d7b4:	81a3      	strh	r3, [r4, #12]
 800d7b6:	e7e3      	b.n	800d780 <__smakebuf_r+0xc>
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	6020      	str	r0, [r4, #0]
 800d7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c0:	81a3      	strh	r3, [r4, #12]
 800d7c2:	9b00      	ldr	r3, [sp, #0]
 800d7c4:	6163      	str	r3, [r4, #20]
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	6120      	str	r0, [r4, #16]
 800d7ca:	b15b      	cbz	r3, 800d7e4 <__smakebuf_r+0x70>
 800d7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f000 f81d 	bl	800d810 <_isatty_r>
 800d7d6:	b128      	cbz	r0, 800d7e4 <__smakebuf_r+0x70>
 800d7d8:	89a3      	ldrh	r3, [r4, #12]
 800d7da:	f023 0303 	bic.w	r3, r3, #3
 800d7de:	f043 0301 	orr.w	r3, r3, #1
 800d7e2:	81a3      	strh	r3, [r4, #12]
 800d7e4:	89a3      	ldrh	r3, [r4, #12]
 800d7e6:	431d      	orrs	r5, r3
 800d7e8:	81a5      	strh	r5, [r4, #12]
 800d7ea:	e7cf      	b.n	800d78c <__smakebuf_r+0x18>

0800d7ec <_fstat_r>:
 800d7ec:	b538      	push	{r3, r4, r5, lr}
 800d7ee:	4d07      	ldr	r5, [pc, #28]	; (800d80c <_fstat_r+0x20>)
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	4604      	mov	r4, r0
 800d7f4:	4608      	mov	r0, r1
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	602b      	str	r3, [r5, #0]
 800d7fa:	f7f3 fe38 	bl	800146e <_fstat>
 800d7fe:	1c43      	adds	r3, r0, #1
 800d800:	d102      	bne.n	800d808 <_fstat_r+0x1c>
 800d802:	682b      	ldr	r3, [r5, #0]
 800d804:	b103      	cbz	r3, 800d808 <_fstat_r+0x1c>
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	bd38      	pop	{r3, r4, r5, pc}
 800d80a:	bf00      	nop
 800d80c:	20000d44 	.word	0x20000d44

0800d810 <_isatty_r>:
 800d810:	b538      	push	{r3, r4, r5, lr}
 800d812:	4d06      	ldr	r5, [pc, #24]	; (800d82c <_isatty_r+0x1c>)
 800d814:	2300      	movs	r3, #0
 800d816:	4604      	mov	r4, r0
 800d818:	4608      	mov	r0, r1
 800d81a:	602b      	str	r3, [r5, #0]
 800d81c:	f7f3 fe37 	bl	800148e <_isatty>
 800d820:	1c43      	adds	r3, r0, #1
 800d822:	d102      	bne.n	800d82a <_isatty_r+0x1a>
 800d824:	682b      	ldr	r3, [r5, #0]
 800d826:	b103      	cbz	r3, 800d82a <_isatty_r+0x1a>
 800d828:	6023      	str	r3, [r4, #0]
 800d82a:	bd38      	pop	{r3, r4, r5, pc}
 800d82c:	20000d44 	.word	0x20000d44

0800d830 <_init>:
 800d830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d832:	bf00      	nop
 800d834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d836:	bc08      	pop	{r3}
 800d838:	469e      	mov	lr, r3
 800d83a:	4770      	bx	lr

0800d83c <_fini>:
 800d83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d83e:	bf00      	nop
 800d840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d842:	bc08      	pop	{r3}
 800d844:	469e      	mov	lr, r3
 800d846:	4770      	bx	lr
